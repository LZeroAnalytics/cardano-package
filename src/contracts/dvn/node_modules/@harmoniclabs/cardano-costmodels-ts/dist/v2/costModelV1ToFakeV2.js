"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.costModelV1ToFakeV2 = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var a_lot_1 = require("../common/a_lot.js");
var toCostModelV1_1 = require("../v1/toCostModelV1.js");
var newV2Keys_1 = require("./newV2Keys.js");
function costModelV1ToFakeV2(costmdlsV1) {
    var e_1, _a;
    var costs = __assign({}, (0, toCostModelV1_1.toCostModelV1)(costmdlsV1));
    try {
        for (var newV2Keys_2 = __values(newV2Keys_1.newV2Keys), newV2Keys_2_1 = newV2Keys_2.next(); !newV2Keys_2_1.done; newV2Keys_2_1 = newV2Keys_2.next()) {
            var key = newV2Keys_2_1.value;
            (0, obj_utils_1.defineReadOnlyProperty)(costs, key, a_lot_1.a_lot);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (newV2Keys_2_1 && !newV2Keys_2_1.done && (_a = newV2Keys_2.return)) _a.call(newV2Keys_2);
        }
        finally { if (e_1) throw e_1.error; }
    }
    // makeItALot( "serialiseData-cpu-arguments-intercept" );
    // makeItALot( "serialiseData-cpu-arguments-slope" );
    // makeItALot( "serialiseData-memory-arguments-intercept" );
    // makeItALot( "serialiseData-memory-arguments-slope" );
    // makeItALot( "verifyEcdsaSecp256k1Signature-cpu-arguments" );
    // makeItALot( "verifyEcdsaSecp256k1Signature-memory-arguments" );
    // makeItALot( "verifySchnorrSecp256k1Signature-cpu-arguments-intercept" );
    // makeItALot( "verifySchnorrSecp256k1Signature-cpu-arguments-slope" );
    // makeItALot( "verifySchnorrSecp256k1Signature-memory-arguments" );
    return costs;
}
exports.costModelV1ToFakeV2 = costModelV1ToFakeV2;
