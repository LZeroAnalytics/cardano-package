"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Script = exports.defaultScriptType = exports.ScriptType = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var crypto_1 = require("@harmoniclabs/crypto");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var hashes_1 = require("../hashes/index.js");
var NativeScript_1 = require("./NativeScript.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var assert_1 = require("../utils/assert.js");
var getSubCborRef_1 = require("../utils/getSubCborRef.js");
var ScriptType;
(function (ScriptType) {
    ScriptType["NativeScript"] = "NativeScript";
    ScriptType["PlutusV1"] = "PlutusScriptV1";
    ScriptType["PlutusV2"] = "PlutusScriptV2";
    ScriptType["PlutusV3"] = "PlutusScriptV3";
})(ScriptType = exports.ScriptType || (exports.ScriptType = {}));
Object.freeze(ScriptType);
exports.defaultScriptType = ScriptType.PlutusV3;
var Script = /** @class */ (function () {
    function Script(scriptType, bytes, subCborRef) {
        var _this = this;
        this.subCborRef = subCborRef;
        (0, assert_1.assert)(scriptType === ScriptType.NativeScript ||
            scriptType === ScriptType.PlutusV1 ||
            scriptType === ScriptType.PlutusV2 ||
            scriptType === ScriptType.PlutusV3, "invalid 'scriptType'");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "type", scriptType);
        if (!(bytes instanceof Uint8Array)) {
            if ((bytes === null || bytes === void 0 ? void 0 : bytes.type) === ScriptType.PlutusV1 ||
                (bytes === null || bytes === void 0 ? void 0 : bytes.type) === ScriptType.PlutusV2 ||
                (bytes === null || bytes === void 0 ? void 0 : bytes.type) === ScriptType.PlutusV3) {
                bytes = (0, uint8array_utils_1.fromHex)(bytes.cborHex);
            }
            else {
                bytes = (0, NativeScript_1.nativeScriptToCbor)(bytes).toBuffer();
            }
        }
        else
            bytes = Uint8Array.prototype.slice.call(bytes);
        if (scriptType === ScriptType.PlutusV1 ||
            scriptType === ScriptType.PlutusV2 ||
            scriptType === ScriptType.PlutusV3) {
            // unwrap up to 2 cbor bytes 
            try {
                var parsed = cbor_1.Cbor.parse(bytes);
                if (parsed instanceof cbor_1.CborBytes) {
                    bytes = parsed.buffer;
                    parsed = cbor_1.Cbor.parse(bytes);
                    if (parsed instanceof cbor_1.CborBytes) {
                        bytes = parsed.buffer;
                    }
                }
            }
            // assume bytes are flat
            catch (_a) { }
        }
        (0, obj_utils_1.defineReadOnlyProperty)(this, "bytes", bytes);
        (0, obj_utils_1.defineReadOnlyProperty)(this, "cbor", this.type === ScriptType.NativeScript ? new cbor_1.CborString(bytes) :
            cbor_1.Cbor.encode(new cbor_1.CborBytes(cbor_1.Cbor.encode(new cbor_1.CborBytes(Uint8Array.prototype.slice.call(bytes))).toBuffer())));
        var _hash = undefined;
        (0, obj_utils_1.definePropertyIfNotPresent)(this, "hash", {
            get: function () {
                if (_hash !== undefined && _hash instanceof hashes_1.Hash28)
                    return _hash.clone();
                var scriptDataToBeHashed = [];
                if (_this.type === ScriptType.NativeScript)
                    scriptDataToBeHashed = [0x00].concat(Array.from(_this.bytes));
                else {
                    var singleCbor = Array.from(cbor_1.Cbor.encode(new cbor_1.CborBytes(_this.bytes)).toBuffer());
                    scriptDataToBeHashed = [
                        _this.type === ScriptType.PlutusV1 ? 0x01 :
                            _this.type === ScriptType.PlutusV2 ? 0x02 :
                                0x03
                    ].concat(singleCbor);
                }
                _hash = new hashes_1.Hash28(Uint8Array.from((0, crypto_1.blake2b_224)(scriptDataToBeHashed)));
                return _hash.clone();
            },
            set: function () { },
            enumerable: true,
            configurable: false
        });
    }
    Script.prototype.clone = function () {
        return new Script(this.type, Uint8Array.prototype.slice.call(this.bytes));
    };
    Script.prototype.toJSON = function () { return this.toJson(); };
    Script.prototype.toJson = function () {
        if (this.type === ScriptType.NativeScript) {
            return (0, NativeScript_1.nativeScriptFromCbor)(new cbor_1.CborString(this.bytes));
        }
        else {
            return {
                type: this.type,
                description: "",
                cborHex: cbor_1.Cbor.encode(new cbor_1.CborBytes(cbor_1.Cbor.encode(new cbor_1.CborBytes(this.bytes)).toBuffer())).toString()
            };
        }
    };
    Script.fromJson = function (json) {
        var t = json.type;
        if (t !== ScriptType.NativeScript) {
            return new Script(t, (0, uint8array_utils_1.fromHex)(json.cborHex));
        }
        return new Script(ScriptType.NativeScript, json);
    };
    /**
     * format specified in the ledger CDDL
    **/
    Script.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    /**
     * format specified in the ledger CDDL
    **/
    Script.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        if (this.type === ScriptType.NativeScript)
            return new cbor_1.CborArray([
                new cbor_1.CborUInt(0),
                cbor_1.Cbor.parse(this.bytes)
            ]);
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.type === ScriptType.PlutusV1 ? 1 : 2),
            new cbor_1.CborBytes(cbor_1.Cbor.encode(new cbor_1.CborBytes(Uint8Array.prototype.slice.call(this.bytes))).toBuffer())
        ]);
    };
    Script.fromCbor = function (cbor, defType) {
        if (defType === void 0) { defType = exports.defaultScriptType; }
        return Script.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)), defType);
    };
    Script.fromCborObj = function (cObj, defType) {
        if (defType === void 0) { defType = exports.defaultScriptType; }
        // read tx_witness_set
        if (cObj instanceof cbor_1.CborBytes) {
            return new Script(defType, cbor_1.Cbor.encode(cObj).toBuffer());
        }
        if (!(cObj instanceof cbor_1.CborArray &&
            cObj.array.length >= 2 &&
            cObj.array[0] instanceof cbor_1.CborUInt))
            throw new Error("Invalid CBOR format for \"Script\"");
        var n = Number(cObj.array[0].num);
        var t = n === 0 ? ScriptType.NativeScript :
            n === 1 ? ScriptType.PlutusV1 :
                ScriptType.PlutusV2;
        if (t === ScriptType.NativeScript)
            return new Script(t, cbor_1.Cbor.encode(cObj.array[1]).toBuffer());
        if (!(cObj.array[1] instanceof cbor_1.CborBytes))
            throw new Error("Invalid CBOR format for \"Script\"");
        return new Script(t, cObj.array[1].bytes, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    return Script;
}());
exports.Script = Script;
