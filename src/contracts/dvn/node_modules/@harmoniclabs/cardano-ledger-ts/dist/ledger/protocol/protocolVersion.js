"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryIProtocolVersionFromCborObj = exports.protocolVersionToCborObj = exports.isIProtocolVersion = exports.protocolVersionAsObj = exports.protocolVersionAsArray = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ints_1 = require("../../utils/ints.js");
var cbor_1 = require("@harmoniclabs/cbor");
function protocolVersionAsArray(ppv) {
    return Array.isArray(ppv) ? ppv : [ppv.major, ppv.minor];
}
exports.protocolVersionAsArray = protocolVersionAsArray;
function protocolVersionAsObj(ppv) {
    return Array.isArray(ppv) ?
        {
            major: Number((0, ints_1.forceBigUInt)(ppv[0])),
            minor: Number((0, ints_1.forceBigUInt)(ppv[1]))
        } : ppv;
}
exports.protocolVersionAsObj = protocolVersionAsObj;
function isIProtocolVersion(ppv) {
    return (Array.isArray(ppv) &&
        ppv.length >= 2 &&
        (0, ints_1.canBeUInteger)(ppv[0]) && (0, ints_1.canBeUInteger)(ppv[1])) || ((0, obj_utils_1.isObject)(ppv) &&
        typeof ppv.major === "number" &&
        typeof ppv.minor === "number");
}
exports.isIProtocolVersion = isIProtocolVersion;
function protocolVersionToCborObj(ppv) {
    var isArray = Array.isArray(ppv);
    return new cbor_1.CborArray([
        new cbor_1.CborUInt((0, ints_1.forceBigUInt)(isArray ? ppv[0] : ppv.major)),
        new cbor_1.CborUInt((0, ints_1.forceBigUInt)(isArray ? ppv[1] : ppv.minor))
    ]);
}
exports.protocolVersionToCborObj = protocolVersionToCborObj;
function tryIProtocolVersionFromCborObj(cbor) {
    return (cbor instanceof cbor_1.CborArray &&
        cbor.array[0] instanceof cbor_1.CborUInt &&
        cbor.array[1] instanceof cbor_1.CborUInt) ?
        [cbor.array[0].num, cbor.array[1].num]
        : undefined;
}
exports.tryIProtocolVersionFromCborObj = tryIProtocolVersionFromCborObj;
