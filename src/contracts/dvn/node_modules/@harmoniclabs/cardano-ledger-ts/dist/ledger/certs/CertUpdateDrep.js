"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertUpdateDrep = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var credentials_1 = require("../../credentials/index.js");
var roDescr_1 = require("../../utils/roDescr.js");
var CertificateType_1 = require("./CertificateType.js");
var Anchor_1 = require("../../governance/Anchor.js");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var CertUpdateDrep = /** @class */ (function () {
    function CertUpdateDrep(_a, subCborRef) {
        var drepCredential = _a.drepCredential, anchor = _a.anchor;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            certType: __assign({ value: CertificateType_1.CertificateType.UpdateDrep }, roDescr_1.roDescr),
            drepCredential: __assign({ value: drepCredential }, roDescr_1.roDescr),
            anchor: __assign({ value: (0, Anchor_1.isIAnchor)(anchor) ? new Anchor_1.Anchor(anchor) : undefined }, roDescr_1.roDescr),
        });
    }
    CertUpdateDrep.prototype.toData = function (version) {
        version = typeof version !== "string" ? "v3" : version;
        if (version !== "v3")
            throw new Error("DRep registration certificate only allowed in plutus v3");
        return new plutus_data_1.DataConstr(5, [
            this.drepCredential.toData(version)
        ]);
    };
    CertUpdateDrep.prototype.getRequiredSigners = function () {
        return [this.drepCredential.hash.clone()];
    };
    CertUpdateDrep.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    CertUpdateDrep.prototype.toCborObj = function () {
        var _a, _b;
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.certType),
            this.drepCredential.toCborObj(),
            (_b = (_a = this.anchor) === null || _a === void 0 ? void 0 : _a.toCborObj()) !== null && _b !== void 0 ? _b : new cbor_1.CborSimple(null)
        ]);
    };
    CertUpdateDrep.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 3 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === CertificateType_1.CertificateType.UpdateDrep))
            throw new Error("Invalid cbor for 'CertUpdateDrep'");
        return new CertUpdateDrep({
            drepCredential: credentials_1.Credential.fromCborObj(cbor.array[1]),
            anchor: cbor.array[2] instanceof cbor_1.CborSimple ? undefined : Anchor_1.Anchor.fromCborObj(cbor.array[2])
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    CertUpdateDrep.prototype.toJSON = function () { return this.toJson(); };
    CertUpdateDrep.prototype.toJson = function () {
        var _a, _b;
        return {
            certType: (0, CertificateType_1.certTypeToString)(this.certType),
            drepCredential: this.drepCredential.toJson(),
            anchor: (_b = (_a = this.anchor) === null || _a === void 0 ? void 0 : _a.toJson()) !== null && _b !== void 0 ? _b : null
        };
    };
    return CertUpdateDrep;
}());
exports.CertUpdateDrep = CertUpdateDrep;
