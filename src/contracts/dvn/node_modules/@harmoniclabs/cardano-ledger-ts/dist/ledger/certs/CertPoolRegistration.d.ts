import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { IPoolParams, PoolParams } from "../PoolParams.js";
import { Hash28 } from "../../hashes/index.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface ICertPoolRegistration {
    poolParams: IPoolParams;
}
export declare class CertPoolRegistration implements ICert, ICertPoolRegistration {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.PoolRegistration;
    readonly poolParams: PoolParams;
    constructor({ poolParams }: ICertPoolRegistration, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertPoolRegistration;
    toJSON(): {
        certType: "PoolRegistration";
        poolParams: {
            operator: string;
            vrfKeyHash: string;
            pledge: string;
            cost: string;
            margin: number;
            rewardAccount: import("../index.js").StakeAddress<import("../index.js").StakeAddressType>;
            owners: string[];
            relays: ({
                type: string;
                port: number | undefined;
                ipv4: string | undefined;
                ipv6: string | undefined;
                dnsName?: undefined;
            } | {
                type: string;
                port: number | undefined;
                dnsName: string;
                ipv4?: undefined;
                ipv6?: undefined;
            } | {
                type: string;
                dnsName: string;
                port?: undefined;
                ipv4?: undefined;
                ipv6?: undefined;
            })[];
            metadata: {
                poolMetadataUrl: string;
                hash: string;
            } | undefined;
        };
    };
    toJson(): {
        certType: "PoolRegistration";
        poolParams: {
            operator: string;
            vrfKeyHash: string;
            pledge: string;
            cost: string;
            margin: number;
            rewardAccount: import("../index.js").StakeAddress<import("../index.js").StakeAddressType>;
            owners: string[];
            relays: ({
                type: string;
                port: number | undefined;
                ipv4: string | undefined;
                ipv6: string | undefined;
                dnsName?: undefined;
            } | {
                type: string;
                port: number | undefined;
                dnsName: string;
                ipv4?: undefined;
                ipv6?: undefined;
            } | {
                type: string;
                dnsName: string;
                port?: undefined;
                ipv4?: undefined;
                ipv6?: undefined;
            })[];
            metadata: {
                poolMetadataUrl: string;
                hash: string;
            } | undefined;
        };
    };
}
