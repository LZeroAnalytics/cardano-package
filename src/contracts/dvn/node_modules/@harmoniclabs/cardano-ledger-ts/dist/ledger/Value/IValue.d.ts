import { CanBeHash28, Hash28 } from "../../hashes/Hash28/Hash28.js";
import { CanBeUInteger } from "../../utils/ints.js";
export type AssetJson = {
    [name_hex: string]: `${number}`;
};
export type ValueJson = {
    [policy_hex: string]: AssetJson;
};
export type IValue = (IValuePolicyEntry | IValueAdaEntry)[];
export type NormalizedIValue = (NormalizedIValuePolicyEntry | NormalizedIValueAdaEntry)[];
export declare function normalizeIValue(val: IValue): NormalizedIValue;
export type IValueAsset = {
    /** bytes or **HEXADECIMAL** string */
    name: Uint8Array | string;
    quantity: CanBeUInteger;
};
export declare function normalizeIValueAsset(asset: IValueAsset): IValueAssetBI;
export type IValueAssetBI = {
    name: Uint8Array;
    quantity: bigint;
};
export declare function isIValueAssetBI(stuff: any): stuff is IValueAssetBI;
export interface IValuePolicyEntry {
    policy: CanBeHash28;
    assets: IValueAsset[];
}
export interface NormalizedIValuePolicyEntry {
    policy: Hash28;
    assets: IValueAssetBI[];
}
export declare function normalizeIValuePolicyEntry({ policy, assets }: IValuePolicyEntry): NormalizedIValuePolicyEntry;
export declare function isNormalizedIValuePolicyEntry(stuff: any): stuff is NormalizedIValuePolicyEntry;
export type IValueAdaEntry = {
    policy: "";
    assets: [IValueAsset];
};
export type NormalizedIValueAdaEntry = {
    policy: "";
    assets: [IValueAssetBI];
};
export declare function cloneIValue(ival: IValue): IValue;
export declare function IValueToJson(iVal: IValue): ValueJson;
export declare function cloneIValueEntry<Entry extends (IValueAdaEntry | IValuePolicyEntry)>({ policy, assets }: Entry): Entry;
export declare function isIValue(entries: any[]): entries is IValue;
export declare function getNameQty(assets: IValueAsset[] | undefined, searchName: Uint8Array): CanBeUInteger | undefined;
export declare function getEmptyNameQty(assets: IValueAsset[] | undefined): CanBeUInteger | undefined;
export declare function addIValues(a: IValue, b: IValue): IValue;
export declare function subIValues(a: IValue, b: IValue): IValue;
