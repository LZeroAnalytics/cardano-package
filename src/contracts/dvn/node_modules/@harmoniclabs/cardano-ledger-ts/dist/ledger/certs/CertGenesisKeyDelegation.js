"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertGenesisKeyDelegation = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var hashes_1 = require("../../hashes/index.js");
var roDescr_1 = require("../../utils/roDescr.js");
var CertificateType_1 = require("./CertificateType.js");
var defaultToDataVersion_1 = require("../../toData/defaultToDataVersion.js");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
/** @deprecated */
var CertGenesisKeyDelegation = /** @class */ (function () {
    function CertGenesisKeyDelegation(_a, subCborRef) {
        var genesisHash = _a.genesisHash, genesisDelegateHash = _a.genesisDelegateHash, vrfKeyHash = _a.vrfKeyHash;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            certType: __assign({ value: CertificateType_1.CertificateType.GenesisKeyDelegation }, roDescr_1.roDescr),
            genesisHash: __assign({ value: new hashes_1.Hash28(genesisHash) }, roDescr_1.roDescr),
            genesisDelegateHash: __assign({ value: new hashes_1.Hash28(genesisDelegateHash) }, roDescr_1.roDescr),
            vrfKeyHash: __assign({ value: new hashes_1.Hash32(vrfKeyHash) }, roDescr_1.roDescr),
        });
    }
    CertGenesisKeyDelegation.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        if (version !== "v1" && version !== "v2")
            throw new Error("Genesis Key delegation was deprecated with plutus v3; version:" + version);
        return new plutus_data_1.DataConstr(5, []);
    };
    CertGenesisKeyDelegation.prototype.getRequiredSigners = function () {
        return [this.genesisHash.clone()];
    };
    CertGenesisKeyDelegation.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    CertGenesisKeyDelegation.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.certType),
            this.genesisHash.toCborObj(),
            this.genesisDelegateHash.toCborObj(),
            this.vrfKeyHash.toCborObj(),
        ]);
    };
    CertGenesisKeyDelegation.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 4 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === CertificateType_1.CertificateType.GenesisKeyDelegation))
            throw new Error("Invalid cbor for 'CertGenesisKeyDelegation'");
        return new CertGenesisKeyDelegation({
            genesisHash: hashes_1.Hash28.fromCborObj(cbor.array[1]),
            genesisDelegateHash: hashes_1.Hash28.fromCborObj(cbor.array[2]),
            vrfKeyHash: hashes_1.Hash32.fromCborObj(cbor.array[2])
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    CertGenesisKeyDelegation.prototype.toJSON = function () { return this.toJson(); };
    CertGenesisKeyDelegation.prototype.toJson = function () {
        return {
            certType: (0, CertificateType_1.certTypeToString)(this.certType),
            genesisHash: this.genesisHash.toString(),
            genesisDelegateHash: this.genesisDelegateHash.toString(),
            vrfKeyHash: this.vrfKeyHash.toString(),
        };
    };
    return CertGenesisKeyDelegation;
}());
exports.CertGenesisKeyDelegation = CertGenesisKeyDelegation;
