"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DRepAlwaysAbstain = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var roDescr_1 = require("../../utils/roDescr.js");
var DRepType_1 = require("./DRepType.js");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var defaultToDataVersion_1 = require("../../toData/defaultToDataVersion.js");
var DRepAlwaysAbstain = /** @class */ (function () {
    function DRepAlwaysAbstain(_info, subCborRef) {
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            drepType: __assign({ value: DRepType_1.DRepType.AlwaysAbstain }, roDescr_1.roDescr),
            hash: __assign({ value: undefined }, roDescr_1.roDescr) // to preserve shape
        });
    }
    DRepAlwaysAbstain.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        if (version === "v1" || version === "v2")
            throw new Error("DRep not supported before v3");
        return new plutus_data_1.DataConstr(1, // PDrep.AlwaysAbstain
        []);
    };
    DRepAlwaysAbstain.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    DRepAlwaysAbstain.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.drepType)
        ]);
    };
    DRepAlwaysAbstain.prototype.toJSON = function () { return this.toJson(); };
    DRepAlwaysAbstain.prototype.toJson = function () {
        return {
            drepType: (0, DRepType_1.drepTypeToString)(this.drepType)
        };
    };
    return DRepAlwaysAbstain;
}());
exports.DRepAlwaysAbstain = DRepAlwaysAbstain;
