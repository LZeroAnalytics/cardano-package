"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GovActionInfo = exports.isIGovActionInfo = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var GovActionType_1 = require("./GovActionType.js");
var roDescr_1 = require("../../utils/roDescr.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
function isIGovActionInfo(stuff) {
    return (0, obj_utils_1.isObject)(stuff);
}
exports.isIGovActionInfo = isIGovActionInfo;
var GovActionInfo = /** @class */ (function () {
    function GovActionInfo(_info, subCborRef) {
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            govActionType: __assign({ value: GovActionType_1.GovActionType.Info }, roDescr_1.roDescr)
        });
    }
    GovActionInfo.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    GovActionInfo.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.govActionType)
        ]);
    };
    GovActionInfo.prototype.toData = function (v) {
        return new plutus_data_1.DataConstr(6, []);
    };
    return GovActionInfo;
}());
exports.GovActionInfo = GovActionInfo;
