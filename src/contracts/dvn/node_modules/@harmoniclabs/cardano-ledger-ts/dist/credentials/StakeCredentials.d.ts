import { ToCbor, CborString, CborObj, CanBeCborString, SubCborRef } from "@harmoniclabs/cbor";
import { ToData, DataConstr, Data } from "@harmoniclabs/plutus-data";
import { Hash28 } from "../hashes/Hash28/Hash28.js";
import { CanBeUInteger } from "../utils/ints.js";
import { StakeKeyHash } from "./StakeKeyHash.js";
import { ToDataVersion } from "../toData/defaultToDataVersion.js";
export declare class StakeValidatorHash extends Hash28 {
}
export declare enum StakeCredentialsType {
    /** @deprecated use `KeyHash` instead */
    StakeKey = "stakeKey",
    KeyHash = "stakeKey",
    Script = "script",
    Pointer = "pointer"
}
export type StakeHash<T extends StakeCredentialsType> = T extends "stakeKey" ? StakeKeyHash : T extends "script" ? StakeValidatorHash : T extends "pointer" ? [CanBeUInteger, CanBeUInteger, CanBeUInteger] : never;
export declare class StakeCredentials<T extends StakeCredentialsType = StakeCredentialsType> implements ToCbor, ToData {
    readonly subCborRef?: SubCborRef | undefined;
    readonly type: T;
    readonly hash: StakeHash<T>;
    /** @deprecated use `keyHash` instead */
    static pubKey(hash: Uint8Array | Hash28 | string): StakeCredentials<StakeCredentialsType.KeyHash>;
    /** @deprecated use `keyHash` instead */
    static stakeKey(hash: Uint8Array | Hash28 | string): StakeCredentials<StakeCredentialsType.KeyHash>;
    static keyHash(hash: Uint8Array | Hash28 | string): StakeCredentials<StakeCredentialsType.KeyHash>;
    static script(hash: Uint8Array | Hash28 | string): StakeCredentials<StakeCredentialsType.Script>;
    /** @deprecated pointer credentials are deprecated since conway */
    static pointer(hash: [CanBeUInteger, CanBeUInteger, CanBeUInteger]): StakeCredentials<StakeCredentialsType.Pointer>;
    constructor(type: T, hash: StakeHash<T>, subCborRef?: SubCborRef | undefined);
    clone(): StakeCredentials<T>;
    toData(version?: ToDataVersion): DataConstr;
    static fromData(data: Data): StakeCredentials;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cObj: CanBeCborString): StakeCredentials;
    static fromCborObj(cObj: CborObj): StakeCredentials;
    toJSON(): {
        type: string;
        hash: string;
        pointer?: undefined;
    } | {
        type: string;
        pointer: string[];
        hash?: undefined;
    };
    toJson(): {
        type: string;
        hash: string;
        pointer?: undefined;
    } | {
        type: string;
        pointer: string[];
        hash?: undefined;
    };
}
