"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hash = exports.canBeHashInstance = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var assert_1 = require("../utils/assert.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var hex_1 = require("../utils/hex.js");
function canBeHashInstance(obj) {
    if (typeof obj !== "object")
        return false;
    var ks = Object.keys(obj);
    if (!ks.includes("toBuffer"))
        return false;
    var toBuff = obj["toBuffer"];
    if (typeof toBuff !== "function")
        return false;
    if (toBuff.length !== 0)
        return false;
    if (ks.includes("__str")) {
        var str = obj["__str"];
        if (typeof str === "string" && (0, hex_1.isHex)(str))
            return true;
    }
    if (ks.includes("__bytes")) {
        var bytes = obj["__bytes"];
        if (bytes instanceof Uint8Array)
            return true;
    }
    return false;
}
exports.canBeHashInstance = canBeHashInstance;
var Hash = /** @class */ (function () {
    function Hash(bs) {
        if (typeof bs == "string") {
            // remove spaces
            bs = bs.trim().split(" ").join("");
            (0, assert_1.assert)((0, hex_1.isHex)(bs), "invalid hex input while constructing a Hash: " + bs);
            // even length
            (0, obj_utils_1.defineReadOnlyProperty)(this, "__str", (bs.length % 2) === 1 ? "0" + bs : bs);
            return;
        }
        (0, assert_1.assert)((0, uint8array_utils_1.isUint8Array)(bs), "invalid Uint8Array input while constructing a Hash");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "__bytes", bs);
    }
    Hash.isStrictInstance = function (bs) {
        return Object.getPrototypeOf(bs) === Hash.prototype;
    };
    Object.defineProperty(Hash.prototype, "_bytes", {
        get: function () {
            var result = this.__bytes;
            if (result === undefined) {
                (0, obj_utils_1.defineReadOnlyProperty)(this, "__bytes", (0, uint8array_utils_1.fromHex)(this._str));
                return this.__bytes.slice();
            }
            if (!(0, uint8array_utils_1.isUint8Array)(result)) {
                throw new Error("Hash.__bytes was not a Uint8Array");
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hash.prototype, "_str", {
        get: function () {
            var result = this.__str;
            if (result === undefined) {
                (0, obj_utils_1.defineReadOnlyProperty)(this, "__str", (0, uint8array_utils_1.toHex)(this._bytes));
                return this.__str;
            }
            if (!(typeof result === "string" && result.length % 2 === 0)) {
                throw new Error("Hash.__str was not a even string");
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hash.prototype, "asString", {
        /**
         * @deprecated use `toString()` instead
         */
        get: function () {
            return this._str;
        },
        enumerable: false,
        configurable: true
    });
    Hash.prototype.toString = function () {
        return this._str;
    };
    Object.defineProperty(Hash.prototype, "asBytes", {
        /**
         * @deprecated use `toBuffer()` instead
         */
        get: function () {
            return this._bytes;
        },
        enumerable: false,
        configurable: true
    });
    Hash.prototype.toBuffer = function () {
        return this._bytes;
    };
    /**
     * @deprecated use `toBuffer()` instead
     */
    Hash.prototype.toBytes = function () {
        return this._bytes;
    };
    Hash.prototype.clone = function () {
        return new Hash(this._str);
    };
    Hash.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    Hash.prototype.toCborObj = function () {
        return new cbor_1.CborBytes(this.asBytes);
    };
    Hash.fromCbor = function (cStr) {
        return Hash.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr)));
    };
    Hash.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborBytes))
            throw new Error("Invalid CBOR format for \"Hash\"");
        return new Hash(cObj.buffer);
    };
    Hash.prototype.toData = function () {
        return new plutus_data_1.DataB(this.toBuffer());
    };
    Hash.fromAscii = function (asciiStr) {
        return new Hash((0, uint8array_utils_1.fromAscii)(asciiStr));
    };
    Hash.toAscii = function (bStr) {
        return (0, uint8array_utils_1.toAscii)(bStr.toBuffer());
    };
    Hash.isValidHexValue = function (str) {
        return ((0, hex_1.isHex)(str) &&
            str.length % 2 === 0);
    };
    return Hash;
}());
exports.Hash = Hash;
