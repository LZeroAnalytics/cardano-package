import { CanBeUInteger } from "@harmoniclabs/biguint";
import { ToCbor, CborString, CborArray, CanBeCborString, CborObj } from "@harmoniclabs/cbor";
export interface IExBudget {
    mem: CanBeUInteger;
    cpu: CanBeUInteger;
}
export interface ExBudgetJson {
    steps: number;
    memory: number;
}
export declare class ExBudget implements IExBudget, ToCbor {
    readonly cpu: bigint;
    readonly mem: bigint;
    constructor(args: IExBudget);
    constructor(cpu: CanBeUInteger, mem: CanBeUInteger);
    readonly add: (other: Readonly<IExBudget>) => void;
    readonly sub: (other: Readonly<IExBudget>) => void;
    static add(a: ExBudget, b: ExBudget): ExBudget;
    static sub(a: ExBudget, b: ExBudget): ExBudget;
    static get default(): ExBudget;
    static get maxCborSize(): ExBudget;
    clone(): ExBudget;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cStr: CanBeCborString): ExBudget;
    static fromCborObj(cObj: CborObj): ExBudget;
    toJson(): {
        steps: string;
        memory: string;
    };
    static fromJson(stuff: ExBudgetJson): ExBudget;
    static isJson<T>(stuff: T): stuff is (T & ExBudgetJson);
}
