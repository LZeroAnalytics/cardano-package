"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeScriptFromCbor = exports.nativeScriptFromCborObj = exports.nativeScriptToCbor = exports.nativeScriptToCborObj = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var Hash28_1 = require("../hashes/Hash28/Hash28.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var ints_1 = require("../utils/ints.js");
function nativeScriptToCborObj(nativeScript) {
    var type = nativeScript.type;
    if (type === "sig") {
        var keyHash = nativeScript.keyHash;
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(0),
            new cbor_1.CborBytes((keyHash instanceof Hash28_1.Hash28 ?
                keyHash :
                new Hash28_1.Hash28(keyHash)).toBuffer())
        ]);
    }
    if (type === "all" || type === "any")
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(type === "all" ? 1 : 2),
            new cbor_1.CborArray(nativeScript.scripts.map(nativeScriptToCborObj))
        ]);
    if (type === "atLeast")
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(3),
            new cbor_1.CborUInt((0, ints_1.forceBigUInt)(nativeScript.required)),
            new cbor_1.CborArray(nativeScript.scripts.map(nativeScriptToCborObj))
        ]);
    if (type === "after" || type === "before")
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(type === "after" ? 4 : 5),
            new cbor_1.CborUInt((0, ints_1.forceBigUInt)(nativeScript.slot)),
        ]);
    throw new Error("unmatched 'nativeScript.type' while converting to cbor");
}
exports.nativeScriptToCborObj = nativeScriptToCborObj;
function nativeScriptToCbor(nativeScript) {
    return cbor_1.Cbor.encode(nativeScriptToCborObj(nativeScript));
}
exports.nativeScriptToCbor = nativeScriptToCbor;
var notNativeScriptError = new Error("ill formed native script to deserialize");
function nativeScriptFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray))
        throw notNativeScriptError;
    var _a = __read(cbor.array, 3), _type = _a[0], f1 = _a[1], f2 = _a[2];
    if (!(_type instanceof cbor_1.CborUInt))
        throw notNativeScriptError;
    var type = Number(_type.num);
    var scripts;
    switch (type) {
        case 0:
            if (!(f1 instanceof cbor_1.CborBytes))
                throw notNativeScriptError;
            var pkh = (0, uint8array_utils_1.toHex)(f1.buffer);
            return {
                type: "sig",
                keyHash: pkh
            };
        case 1:
        case 2:
            if (!(f1 instanceof cbor_1.CborArray))
                throw notNativeScriptError;
            scripts = f1.array.map(nativeScriptFromCborObj);
            return {
                type: type === 1 ? "all" : "any",
                scripts: scripts
            };
        case 3:
            if (!(f1 instanceof cbor_1.CborUInt))
                throw notNativeScriptError;
            if (!(f2 instanceof cbor_1.CborArray))
                throw notNativeScriptError;
            var n = Number(f1.num);
            scripts = f2.array.map(nativeScriptFromCborObj);
            return {
                type: "atLeast",
                required: n,
                scripts: scripts
            };
        case 4:
        case 5:
            if (!(f1 instanceof cbor_1.CborUInt))
                throw notNativeScriptError;
            return {
                type: type === 4 ? "after" : "before",
                slot: Number(f1.num)
            };
        default:
            throw notNativeScriptError;
    }
}
exports.nativeScriptFromCborObj = nativeScriptFromCborObj;
function nativeScriptFromCbor(cbor) {
    return nativeScriptFromCborObj(cbor_1.Cbor.parse(cbor));
}
exports.nativeScriptFromCbor = nativeScriptFromCbor;
;
