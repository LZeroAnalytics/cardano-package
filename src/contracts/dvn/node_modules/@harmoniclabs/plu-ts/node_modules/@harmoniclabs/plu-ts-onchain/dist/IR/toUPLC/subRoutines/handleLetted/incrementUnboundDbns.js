"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.incrementUnboundDbns = void 0;
var IRVar_1 = require("../../../IRNodes/IRVar.js");
var IRLetted_1 = require("../../../IRNodes/IRLetted.js");
var IRApp_1 = require("../../../IRNodes/IRApp.js");
var IRDelayed_1 = require("../../../IRNodes/IRDelayed.js");
var IRForced_1 = require("../../../IRNodes/IRForced.js");
var IRFunc_1 = require("../../../IRNodes/IRFunc.js");
/**
 *  add 1 to every var's DeBruijn that accesses stuff outside the parent node
 *  not including the `parentNode` node
 *  since the new function introdcued substituting the letted term
 *  is added inside the `parentNode` node
**/
function incrementUnboundDbns(theTerm, shouldNotModifyLetted) {
    var stack = [{ term: theTerm, dbn: 0 }];
    while (stack.length > 0) {
        var _a = stack.pop(), t = _a.term, dbn = _a.dbn;
        if (t instanceof IRVar_1.IRVar &&
            t.dbn >= dbn) {
            // there's a new variable in scope
            t.dbn++;
            continue;
        }
        if (t instanceof IRLetted_1.IRLetted) {
            if (shouldNotModifyLetted(t)) {
                // don't modify letted to be hoisted
                continue;
            }
            else // other letted to be handled in one of the next cycles
             {
                // `IRLambdas` DeBruijn are tracking the level of instantiation
                // we add a new variable so the dbn of instantiation increments
                t.dbn += 1;
                stack.push({ term: t.value, dbn: dbn });
            }
            continue;
        }
        if (t instanceof IRApp_1.IRApp) {
            stack.push({ term: t.arg, dbn: dbn }, { term: t.fn, dbn: dbn });
            continue;
        }
        if (t instanceof IRDelayed_1.IRDelayed) {
            stack.push({ term: t.delayed, dbn: dbn });
            continue;
        }
        if (t instanceof IRForced_1.IRForced) {
            stack.push({ term: t.forced, dbn: dbn });
            continue;
        }
        if (t instanceof IRFunc_1.IRFunc) {
            stack.push({ term: t.body, dbn: dbn + t.arity });
            continue;
        }
        // skip hoisted since closed
    }
}
exports.incrementUnboundDbns = incrementUnboundDbns;
