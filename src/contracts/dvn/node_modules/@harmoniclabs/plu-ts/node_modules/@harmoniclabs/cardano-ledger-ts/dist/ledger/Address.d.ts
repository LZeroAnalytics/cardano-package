import { ToCbor, CborObj, CborString, CanBeCborString } from "@harmoniclabs/cbor";
import { byte } from "@harmoniclabs/crypto";
import { ToData, Data } from "@harmoniclabs/plutus-data";
import { PaymentCredentials, StakeCredentials } from "../credentials/index.js";
import { NetworkT } from "./Network.js";
export type AddressStr = `${"addr1" | "addr_test1"}${string}`;
export declare function isAddressStr(stuff: any): stuff is AddressStr;
export type AddressType = "base" | "pointer" | "enterprise" | "bootstrap" | "unknown";
/**
 * shelley specification in cardano-ledger; page 113
 */
export declare class Address implements ToData, ToCbor {
    readonly network: NetworkT;
    readonly paymentCreds: PaymentCredentials;
    readonly stakeCreds?: StakeCredentials;
    readonly type: AddressType;
    static mainnet(paymentCreds: PaymentCredentials, stakeCreds?: StakeCredentials, type?: AddressType): Address;
    static testnet(paymentCreds: PaymentCredentials, stakeCreds?: StakeCredentials, type?: AddressType): Address;
    constructor(network: NetworkT, paymentCreds: PaymentCredentials, stakeCreds?: StakeCredentials, type?: AddressType);
    clone(): Address;
    static get fake(): Address;
    toData(): Data;
    toBytes(): byte[];
    static fromBytes(bs: byte[] | string): Address;
    toBuffer(): Uint8Array;
    static fromBuffer(buff: Uint8Array | string): Address;
    toCborObj(): CborObj;
    static fromCborObj(buff: CborObj): Address;
    toCbor(): CborString;
    static fromCbor(cbor: CanBeCborString): Address;
    toString(): AddressStr;
    static fromString(addr: string): Address;
    toJson(): `addr1${string}` | `addr_test1${string}`;
}
