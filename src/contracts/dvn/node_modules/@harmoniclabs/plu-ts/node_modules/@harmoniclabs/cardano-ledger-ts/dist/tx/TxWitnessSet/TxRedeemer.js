"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxRedeemer = exports.txRedeemerTagToString = exports.txRdmrTagToString = exports.TxRedeemerTag = void 0;
var hashes_1 = require("../../hashes/index.js");
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var plutus_machine_1 = require("@harmoniclabs/plutus-machine");
var credentials_1 = require("../../credentials/index.js");
var BasePlutsError_1 = require("../../utils/BasePlutsError.js");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var assert_1 = require("../../utils/assert.js");
var ints_1 = require("../../utils/ints.js");
var TxRedeemerTag;
(function (TxRedeemerTag) {
    TxRedeemerTag[TxRedeemerTag["Spend"] = 0] = "Spend";
    TxRedeemerTag[TxRedeemerTag["Mint"] = 1] = "Mint";
    TxRedeemerTag[TxRedeemerTag["Cert"] = 2] = "Cert";
    TxRedeemerTag[TxRedeemerTag["Withdraw"] = 3] = "Withdraw";
})(TxRedeemerTag = exports.TxRedeemerTag || (exports.TxRedeemerTag = {}));
;
Object.freeze(TxRedeemerTag);
function txRdmrTagToString(tag) {
    switch (tag) {
        case TxRedeemerTag.Cert: return "Cert";
        case TxRedeemerTag.Mint: return "Mint";
        case TxRedeemerTag.Spend: return "Spend";
        case TxRedeemerTag.Withdraw: return "Withdraw";
        default: return "";
    }
}
exports.txRdmrTagToString = txRdmrTagToString;
function txRedeemerTagToString(tag) {
    switch (tag) {
        case TxRedeemerTag.Spend: return "Spend";
        case TxRedeemerTag.Mint: return "Mint";
        case TxRedeemerTag.Cert: return "Cert";
        case TxRedeemerTag.Withdraw: return "Withdraw";
        default:
            throw new BasePlutsError_1.BasePlutsError("invalid TxRedeemerTag");
    }
}
exports.txRedeemerTagToString = txRedeemerTagToString;
var TxRedeemer = /** @class */ (function () {
    function TxRedeemer(redeemer) {
        (0, assert_1.assert)((0, obj_utils_1.isObject)(redeemer) &&
            (0, obj_utils_1.hasOwn)(redeemer, "tag") &&
            (0, obj_utils_1.hasOwn)(redeemer, "index") &&
            (0, obj_utils_1.hasOwn)(redeemer, "data") &&
            (0, obj_utils_1.hasOwn)(redeemer, "execUnits"), "invalid object passed to construct a 'TxRedeemer'");
        var tag = redeemer.tag, index = redeemer.index, data = redeemer.data, execUnits = redeemer.execUnits;
        (0, assert_1.assert)(tag === 0 || tag === 1 || tag === 2 || tag === 3, "invalid redeemer tag");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "tag", tag);
        (0, assert_1.assert)((0, ints_1.canBeUInteger)(index), "invlaid redeemer index");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "index", Number((0, ints_1.forceBigUInt)(index)));
        (0, assert_1.assert)((0, plutus_data_1.isData)(data), "redeemer's data was not 'Data'");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "data", data);
        (0, assert_1.assert)(execUnits instanceof plutus_machine_1.ExBudget, "invalid 'execUnits' constructing 'TxRedeemer'");
        var _exUnits = execUnits.clone();
        (0, obj_utils_1.definePropertyIfNotPresent)(this, "execUnits", {
            get: function () { return _exUnits; },
            set: function (newExUnits) {
                (0, assert_1.assert)(newExUnits instanceof plutus_machine_1.ExBudget, "invalid 'execUnits' constructing 'TxRedeemer'");
                _exUnits = newExUnits.clone();
            },
            enumerable: true,
            configurable: false
        });
    }
    TxRedeemer.prototype.clone = function () {
        return new TxRedeemer(__assign(__assign({}, this), { data: this.data.clone(), execUnits: this.execUnits.clone() }));
    };
    TxRedeemer.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxRedeemer.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.tag),
            new cbor_1.CborUInt(this.index),
            (0, plutus_data_1.dataToCborObj)(this.data),
            this.execUnits.toCborObj()
        ]);
    };
    TxRedeemer.fromCbor = function (cStr) {
        return TxRedeemer.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr)));
    };
    TxRedeemer.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray &&
            cObj.array.length >= 4 &&
            cObj.array[0] instanceof cbor_1.CborUInt &&
            cObj.array[1] instanceof cbor_1.CborUInt))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("TxRedeemer");
        return new TxRedeemer({
            tag: Number(cObj.array[0].num),
            index: cObj.array[1].num,
            data: (0, plutus_data_1.dataFromCborObj)(cObj.array[2]),
            execUnits: plutus_machine_1.ExBudget.fromCborObj(cObj.array[3])
        });
    };
    TxRedeemer.prototype.toJson = function () {
        return {
            tag: txRedeemerTagToString(this.tag),
            index: this.index,
            execUnits: this.execUnits.toJson(),
            data: this.data.toJson(),
        };
    };
    TxRedeemer.prototype.toSpendingPurposeData = function (tx) {
        var _a, _b, _c, _d;
        var tag = this.tag;
        var ctorIdx;
        var purposeArgData;
        if (tag === TxRedeemerTag.Mint) {
            ctorIdx = 0;
            var policy = (_a = tx.mint) === null || _a === void 0 ? void 0 : _a.map[this.index + 1].policy;
            if (!(policy instanceof hashes_1.Hash28))
                throw new BasePlutsError_1.BasePlutsError("invalid minting policy for minting redeemer " + this.index.toString());
            purposeArgData = new plutus_data_1.DataB(policy.asBytes);
        }
        else if (tag === TxRedeemerTag.Spend) {
            ctorIdx = 1;
            var utxoRef = tx.inputs[this.index].utxoRef;
            if (utxoRef === undefined)
                throw new BasePlutsError_1.BasePlutsError("invalid utxo for spending redeemer " + this.index.toString());
            purposeArgData = utxoRef.toData();
        }
        else if (tag === TxRedeemerTag.Withdraw) {
            ctorIdx = 2;
            var stakeAddr = (_c = (_b = tx.withdrawals) === null || _b === void 0 ? void 0 : _b.map[this.index]) === null || _c === void 0 ? void 0 : _c.rewardAccount;
            if (stakeAddr === undefined)
                throw new BasePlutsError_1.BasePlutsError("invalid stake credentials for rewarding redeemer " + this.index.toString());
            purposeArgData = new credentials_1.StakeCredentials("script", new credentials_1.StakeValidatorHash(stakeAddr.credentials)).toData();
        }
        else if (tag === TxRedeemerTag.Cert) {
            ctorIdx = 3;
            var cert = (_d = tx.certs) === null || _d === void 0 ? void 0 : _d.at(this.index);
            if (cert === undefined)
                throw new BasePlutsError_1.BasePlutsError("invalid certificate for certifyng redeemer " + this.index.toString());
            purposeArgData = cert.toData();
        }
        else
            throw new BasePlutsError_1.BasePlutsError("invalid redeemer tag");
        return new plutus_data_1.DataConstr(ctorIdx, [purposeArgData]);
    };
    return TxRedeemer;
}());
exports.TxRedeemer = TxRedeemer;
