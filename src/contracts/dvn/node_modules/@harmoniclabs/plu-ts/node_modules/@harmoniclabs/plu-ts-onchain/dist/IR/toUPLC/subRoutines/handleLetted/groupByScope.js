"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._getMinUnboundDbn = exports.groupByScope = void 0;
var IRApp_1 = require("../../../IRNodes/IRApp.js");
var IRDelayed_1 = require("../../../IRNodes/IRDelayed.js");
var IRForced_1 = require("../../../IRNodes/IRForced.js");
var IRFunc_1 = require("../../../IRNodes/IRFunc.js");
var IRLetted_1 = require("../../../IRNodes/IRLetted.js");
var IRVar_1 = require("../../../IRNodes/IRVar.js");
function groupByScope(letteds) {
    var e_1, _a;
    var scopes = [];
    function pushScope(scope, letted) {
        var scopeEntry = scopes.find(function (entry) { return entry.maxScope === scope; });
        if (scopeEntry === undefined) {
            scopes.push({
                maxScope: scope,
                group: [letted]
            });
            return;
        }
        scopeEntry.group.push(letted);
    }
    try {
        for (var letteds_1 = __values(letteds), letteds_1_1 = letteds_1.next(); !letteds_1_1.done; letteds_1_1 = letteds_1.next()) {
            var _b = letteds_1_1.value, letted = _b.letted, nReferences = _b.nReferences;
            var minUnboundDbn = _getMinUnboundDbn(letted.value);
            if (minUnboundDbn === undefined) {
                pushScope(undefined, { letted: letted, nReferences: nReferences });
                continue;
            }
            var maxScope = letted.parent;
            if (maxScope instanceof IRFunc_1.IRFunc) {
                minUnboundDbn -= maxScope.arity;
            }
            while (minUnboundDbn >= 0) {
                maxScope = maxScope === null || maxScope === void 0 ? void 0 : maxScope.parent;
                if (maxScope instanceof IRFunc_1.IRFunc) {
                    minUnboundDbn -= maxScope.arity;
                }
            }
            pushScope(maxScope, { letted: letted, nReferences: nReferences });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (letteds_1_1 && !letteds_1_1.done && (_a = letteds_1.return)) _a.call(letteds_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return scopes;
}
exports.groupByScope = groupByScope;
/**
 *
 * @param _term
 * @returns {number | undefined}
 *  a `number` if the `_term` param is open;
 *  represents the debuijn index an `IRVar` would have
 *  in order to point to the smallest scope that fulfills the term;
 *
 *  `undefined` if the term is closed
 */
function _getMinUnboundDbn(_term) {
    var minDbn = undefined;
    var stack = [{ term: _term, dbn: 0 }];
    while (stack.length > 0) {
        var _a = stack.pop(), term = _a.term, dbn = _a.dbn;
        if (term instanceof IRVar_1.IRVar) {
            if (term.dbn >= dbn) // some val outside
             {
                var outsideDbn = term.dbn - dbn;
                minDbn = minDbn === undefined ? outsideDbn : Math.min(outsideDbn, minDbn);
            }
        }
        if (term instanceof IRApp_1.IRApp) {
            stack.push({ term: term.fn, dbn: dbn }, { term: term.arg, dbn: dbn });
            continue;
        }
        if (term instanceof IRDelayed_1.IRDelayed) {
            stack.push({ term: term.delayed, dbn: dbn });
            continue;
        }
        if (term instanceof IRForced_1.IRForced) {
            stack.push({ term: term.forced, dbn: dbn });
            continue;
        }
        if (term instanceof IRFunc_1.IRFunc) {
            stack.push({ term: term.body, dbn: dbn + term.arity });
            continue;
        }
        // letted terms do count too
        if (term instanceof IRLetted_1.IRLetted) {
            stack.push({ term: term.value, dbn: dbn });
            continue;
        }
        // closed
        // if( term instanceof IRHoisted )
    }
    return minDbn;
}
exports._getMinUnboundDbn = _getMinUnboundDbn;
