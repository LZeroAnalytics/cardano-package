import { Term } from "../../../Term/index.js";
import type { PStruct, RestrictedStructInstance, StructInstance } from "../../../PTypes/PStruct/pstruct.js";
import type { PType } from "../../../PType/index.js";
import type { TermFn } from "../../../PTypes/PFn/PFn.js";
import { StructDefinition, Methods } from "../../../type_system/index.js";
import { PBool } from "../../../PTypes/PBool.js";
import { TermBool } from "./TermBool.js";
import { UtilityTermOf } from "./addUtilityForType.js";
import { TermInt } from "./TermInt.js";
import { TermList } from "./TermList.js";
import type { IsSingleKey } from "../../../../utils/IsSingleKey.js";
import type { PData } from "../../../PTypes/PData/index.js";
import { FilterMethodsByInput, LiftMethods, MethodsAsTerms } from "./userMethods/methodsTypes.js";
export type RawStruct = {
    readonly index: TermInt;
    readonly fields: TermList<PData>;
};
export type TermStruct<SDef extends StructDefinition, SMethods extends Methods> = Term<PStruct<SDef, SMethods>> & {
    readonly peq: TermFn<[PStruct<SDef, {}>], PBool>;
    readonly eq: (other: Term<PStruct<SDef, {}>>) => TermBool;
    readonly raw: RawStruct;
} & (IsSingleKey<SDef> extends true ? StructInstance<SDef[keyof SDef]> & {
    /**
     * @deprecated
     */
    extract: <Fields extends (keyof SDef[keyof SDef])[]>(...fields: Fields) => {
        /**
         * @deprecated
         */
        in: <PExprResult extends PType>(expr: (extracted: RestrictedStructInstance<SDef[keyof SDef], Fields>) => Term<PExprResult>) => UtilityTermOf<PExprResult>;
    };
} : {}) & LiftMethods<FilterMethodsByInput<SMethods, PStruct<SDef, {}>>> & MethodsAsTerms<FilterMethodsByInput<SMethods, PStruct<SDef, {}>>>;
export declare function addPStructMethods<SDef extends StructDefinition, SMethods extends Methods>(struct: Term<PStruct<SDef, SMethods>>): TermStruct<SDef, SMethods>;
