import { PrivateKey } from "../credentials/index.js";
import { Hash28, Hash32 } from "../hashes/index.js";
import { VKeyWitness, ITxWitnessSet, TxWitnessSet } from "./TxWitnessSet/index.js";
import { ToCbor, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { ToJson } from "../utils/ToJson.js";
import { AuxiliaryData } from "./AuxiliaryData/index.js";
import { ITxBody, TxBody } from "./body/index.js";
export interface ITx {
    body: ITxBody;
    witnesses: ITxWitnessSet;
    isScriptValid?: boolean;
    auxiliaryData?: AuxiliaryData | null;
}
export interface Cip30LikeSignTx {
    /**
     *
     * @param {string} txCbor receives the current transaction (`this`) cbor
     * @param {boolean} partial (standard parameter) wheather to throw or not if the wallet can not sign the entire transaction (`true` always passed)
     * @returns {string} the cbor of the `TxWitnessSet` (!!! NOT the cbor of the signe transaction !!!)
     */
    signTx: (txCbor: string, partial?: boolean) => string;
}
export declare class Tx implements ITx, ToCbor, ToJson {
    readonly body: TxBody;
    readonly witnesses: TxWitnessSet;
    readonly isScriptValid: boolean;
    readonly auxiliaryData?: AuxiliaryData | null;
    /**
     * checks that the signer is needed
     * if true adds the witness
     * otherwise nothing happens (the signature is not added)
     *
     * one might prefer to use this method instead of `signWith`
     * when signature is provided by a third party (example CIP30 wallet)
    **/
    readonly addVKeyWitness: (vkeyWit: VKeyWitness) => void;
    /**
     * checks that the signer is needed
     * if true signs the transaction with the specified key
     * otherwise nothing happens (the signature is not added)
    **/
    readonly signWith: (signer: PrivateKey) => void;
    /**
     * signs the transaction using any browser wallet
     * that follows the [CIP-0030 standard]
     * (https://github.com/cardano-foundation/CIPs/tree/master/CIP-0030#apisigntxtx-cbortransaction-partialsign-bool--false-promisecbortransaction_witness_set)
    **/
    readonly signWithCip30Wallet: (cip30wallet: Cip30LikeSignTx) => void;
    /**
     * @returns {boolean}
     *  `true` if all the signers needed
     *  have signed the transaction; `false` otherwise
     *
     * signers needed are:
     *  - required to spend an utxo
     *  - required by certificate
     *  - required by withdrawals
     *  - additional spefified in the `requiredSigners` field
     */
    readonly isComplete: boolean;
    /**
     * getter
     */
    readonly hash: Hash32;
    constructor(tx: ITx);
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): Tx;
    static fromCborObj(cObj: CborObj): Tx;
    toJson(): {
        body: {
            inputs: {
                utxoRef: import("./body/index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                        type: import("../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                };
            }[];
            outputs: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../ledger/index.js").ValueJson;
                datum: any;
                refScript: import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                    type: import("../index.js").LitteralScriptType;
                    description: string;
                    cborHex: string;
                } | undefined;
            }[];
            fee: string;
            ttl: string | undefined;
            certs: ({
                certType: "StakeRegistration" | "StakeDeRegistration" | "StakeDelegation" | "PoolRegistration" | "PoolRetirement" | "GenesisKeyDelegation" | "MoveInstantRewards";
                stakeCredentials: {
                    type: string;
                    hash: string;
                    pointer?: undefined;
                } | {
                    type: string;
                    pointer: string[];
                    hash?: undefined;
                };
                poolKeyHash?: undefined;
                poolParams?: undefined;
                epoch?: undefined;
                genesisHash?: undefined;
                genesisDelegateHash?: undefined;
                vrfKeyHash?: undefined;
                mirCert?: undefined;
            } | {
                certType: "StakeRegistration" | "StakeDeRegistration" | "StakeDelegation" | "PoolRegistration" | "PoolRetirement" | "GenesisKeyDelegation" | "MoveInstantRewards";
                stakeCredentials: {
                    type: string;
                    hash: string;
                    pointer?: undefined;
                } | {
                    type: string;
                    pointer: string[];
                    hash?: undefined;
                };
                poolKeyHash: string;
                poolParams?: undefined;
                epoch?: undefined;
                genesisHash?: undefined;
                genesisDelegateHash?: undefined;
                vrfKeyHash?: undefined;
                mirCert?: undefined;
            } | {
                certType: "StakeRegistration" | "StakeDeRegistration" | "StakeDelegation" | "PoolRegistration" | "PoolRetirement" | "GenesisKeyDelegation" | "MoveInstantRewards";
                poolParams: {
                    operator: string;
                    vrfKeyHash: string;
                    pledge: string;
                    cost: string;
                    margin: number;
                    rewardAccount: string;
                    owners: string[];
                    relays: ({
                        type: string;
                        port: number | undefined;
                        ipv4: string | undefined;
                        ipv6: string | undefined;
                        dnsName?: undefined;
                    } | {
                        type: string;
                        port: number | undefined;
                        dnsName: string;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    } | {
                        type: string;
                        dnsName: string;
                        port?: undefined;
                        ipv4?: undefined;
                        ipv6?: undefined;
                    })[];
                    metadata: {
                        poolMetadataUrl: string;
                        hash: string;
                    } | undefined;
                };
                stakeCredentials?: undefined;
                poolKeyHash?: undefined;
                epoch?: undefined;
                genesisHash?: undefined;
                genesisDelegateHash?: undefined;
                vrfKeyHash?: undefined;
                mirCert?: undefined;
            } | {
                certType: "StakeRegistration" | "StakeDeRegistration" | "StakeDelegation" | "PoolRegistration" | "PoolRetirement" | "GenesisKeyDelegation" | "MoveInstantRewards";
                poolKeyHash: string;
                epoch: number;
                stakeCredentials?: undefined;
                poolParams?: undefined;
                genesisHash?: undefined;
                genesisDelegateHash?: undefined;
                vrfKeyHash?: undefined;
                mirCert?: undefined;
            } | {
                certType: "StakeRegistration" | "StakeDeRegistration" | "StakeDelegation" | "PoolRegistration" | "PoolRetirement" | "GenesisKeyDelegation" | "MoveInstantRewards";
                genesisHash: string;
                genesisDelegateHash: string;
                vrfKeyHash: string;
                stakeCredentials?: undefined;
                poolKeyHash?: undefined;
                poolParams?: undefined;
                epoch?: undefined;
                mirCert?: undefined;
            } | {
                certType: "StakeRegistration" | "StakeDeRegistration" | "StakeDelegation" | "PoolRegistration" | "PoolRetirement" | "GenesisKeyDelegation" | "MoveInstantRewards";
                mirCert: {
                    source: "Reserves" | "Treasurery";
                    destination: string | {
                        stakeCreds: {
                            type: string;
                            hash: string;
                            pointer?: undefined;
                        } | {
                            type: string;
                            pointer: string[];
                            hash?: undefined;
                        };
                        amount: string;
                    }[];
                };
                stakeCredentials?: undefined;
                poolKeyHash?: undefined;
                poolParams?: undefined;
                epoch?: undefined;
                genesisHash?: undefined;
                genesisDelegateHash?: undefined;
                vrfKeyHash?: undefined;
            })[] | undefined;
            withdrawals: {
                [rewardAccount: string]: string;
            } | undefined;
            protocolUpdate: object | undefined;
            auxDataHash: string | undefined;
            validityIntervalStart: string | undefined;
            mint: import("../ledger/index.js").ValueJson | undefined;
            scriptDataHash: string | undefined;
            collateralInputs: {
                utxoRef: import("./body/index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                        type: import("../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                };
            }[] | undefined;
            requiredSigners: string[] | undefined;
            network: import("../ledger/index.js").NetworkT | undefined;
            collateralReturn: {
                address: `addr1${string}` | `addr_test1${string}`;
                value: import("../ledger/index.js").ValueJson;
                datum: any;
                refScript: import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                    type: import("../index.js").LitteralScriptType;
                    description: string;
                    cborHex: string;
                } | undefined;
            } | undefined;
            totCollateral: string | undefined;
            refInputs: {
                utxoRef: import("./body/index.js").UTxORefJson;
                resolved: {
                    address: `addr1${string}` | `addr_test1${string}`;
                    value: import("../ledger/index.js").ValueJson;
                    datum: any;
                    refScript: import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                        type: import("../index.js").LitteralScriptType;
                        description: string;
                        cborHex: string;
                    } | undefined;
                };
            }[] | undefined;
        };
        witnesses: {
            vkeyWitnesses: {
                vkey: string; /**
                 * signs the transaction using any browser wallet
                 * that follows the [CIP-0030 standard]
                 * (https://github.com/cardano-foundation/CIPs/tree/master/CIP-0030#apisigntxtx-cbortransaction-partialsign-bool--false-promisecbortransaction_witness_set)
                **/
                signature: string;
            }[] | undefined;
            nativeScripts: (import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                type: import("../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            bootstrapWitnesses: {
                pubKey: string;
                signature: string;
                chainCode: string;
                attributes: string;
            }[] | undefined;
            plutusV1Scripts: (import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                type: import("../index.js").ScriptType.PlutusV1;
                description: string;
                cborHex: string;
            })[] | undefined;
            datums: any[] | undefined;
            redeemers: {
                tag: "Spend" | "Mint" | "Cert" | "Withdraw";
                index: number;
                execUnits: {
                    steps: string;
                    memory: string;
                };
                data: any;
            }[] | undefined;
            plutusV2Scripts: (import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                type: import("../index.js").ScriptType.PlutusV2;
                description: string;
                cborHex: string;
            })[] | undefined;
        };
        isScriptValid: boolean;
        auxiliaryData: {
            metadata: any;
            nativeScripts: (import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                type: import("../index.js").ScriptType.NativeScript;
                description: string;
                cborHex: string;
            })[] | undefined;
            plutusV1Scripts: (import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                type: import("../index.js").ScriptType.PlutusV1;
                description: string;
                cborHex: string;
            })[] | undefined;
            plutusV2Scripts: (import("../index.js").ScriptSignature | import("../index.js").ScriptAll | import("../index.js").ScriptAny | import("../index.js").ScriptAtLeast | import("../index.js").ScriptAfter | import("../index.js").ScriptBefore | {
                type: import("../index.js").ScriptType.PlutusV2;
                description: string;
                cborHex: string;
            })[] | undefined;
        } | undefined;
    };
}
/**
 * signers needed are:
 *  - required to spend an utxo
 *  - required by certificate
 *  - required by withdrawals
 *  - additional specified in the `requiredSigners` field
 */
export declare function getAllRequiredSigners(body: Readonly<TxBody>): Hash28[];
export declare function getNSignersNeeded(body: Readonly<TxBody>): number;
