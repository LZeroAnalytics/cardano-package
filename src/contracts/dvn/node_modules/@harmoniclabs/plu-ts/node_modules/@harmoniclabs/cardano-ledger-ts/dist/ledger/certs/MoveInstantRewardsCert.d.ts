import { CborObj, ToCbor, CborString } from "@harmoniclabs/cbor";
import { StakeCredentials } from "../../credentials/index.js";
import { Coin } from "../Coin.js";
export declare enum InstantRewardsSource {
    Reserves = 0,
    Treasurery = 1
}
export type RewardSourceToStr<S extends InstantRewardsSource> = S extends InstantRewardsSource.Reserves ? "Reserves" : S extends InstantRewardsSource.Treasurery ? "Treasurery" : never;
export declare function rewardSourceToStr<S extends InstantRewardsSource>(source: S): RewardSourceToStr<S>;
export type RewardsMap = {
    stakeCredentials: StakeCredentials;
    amount: number | bigint;
}[];
export declare class MoveInstantRewardsCert implements ToCbor {
    readonly source: InstantRewardsSource;
    /**
     * If the second field is a map, funds are moved to stake credentials,
     * otherwise the funds are given to the other accounting pot
     * (eg. source is Reserve, hence founds are going to treasurery)
     */
    readonly destintaion: RewardsMap | Coin;
    constructor(source: InstantRewardsSource, destintaion: RewardsMap | Coin);
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCborObj(cObj: CborObj): MoveInstantRewardsCert;
    toJson(): {
        source: "Reserves" | "Treasurery";
        destination: string | {
            stakeCreds: {
                type: string;
                hash: string;
                pointer?: undefined;
            } | {
                type: string;
                pointer: string[];
                hash?: undefined;
            };
            amount: string;
        }[];
    };
}
