import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { ToJson } from "../../utils/ToJson.js";
import { IHash } from "../interfaces/IHash.js";
import { IIRParent } from "../interfaces/IIRParent.js";
import { IRParentTerm } from "../utils/isIRParentTerm.js";
import { BaseIRMetadata } from "./BaseIRMetadata.js";
export interface IRVarMetadata extends BaseIRMetadata {
}
export declare class IRVar implements Cloneable<IRVar>, IHash, IIRParent, ToJson {
    readonly hash: Uint8Array;
    markHashAsInvalid: () => void;
    /**
     * the IR DeBruijn index is not necessarly the same of the UPLC
     * ( more ofthen than not it won't be the same )
     *
     * this is because in the IR things like `plet`
     * are skipping some DeBruijin levels that are instead present
     * in the final UPLC
    **/
    dbn: number;
    readonly meta: IRVarMetadata;
    parent: IRParentTerm | undefined;
    constructor(DeBruijn: number | bigint);
    static get tag(): Uint8Array;
    clone(): IRVar;
    toJson(): any;
}
