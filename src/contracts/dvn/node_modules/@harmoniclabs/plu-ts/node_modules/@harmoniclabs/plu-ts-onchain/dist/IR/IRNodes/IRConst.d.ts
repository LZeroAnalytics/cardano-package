import { ByteString } from "@harmoniclabs/bytestring";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Pair } from "@harmoniclabs/pair";
import { Data } from "@harmoniclabs/plutus-data";
import { ToJson } from "../../utils/ToJson.js";
import { CanBeUInteger } from "../../utils/ints.js";
import { IHash, IIRParent } from "../interfaces/index.js";
import { TermType } from "../../pluts/type_system/types.js";
import { IRParentTerm } from "../utils/isIRParentTerm.js";
import { BaseIRMetadata } from "./BaseIRMetadata.js";
export type IRConstValue = CanBeUInteger | ByteString | Uint8Array | string | boolean | IRConstValue[] | Pair<IRConstValue, IRConstValue> | Data | undefined;
export interface IRConstMetadata extends BaseIRMetadata {
}
export declare class IRConst implements Cloneable<IRConst>, IHash, IIRParent, ToJson {
    readonly hash: Uint8Array;
    markHashAsInvalid: () => void;
    readonly meta: IRConstMetadata;
    readonly type: TermType;
    readonly value: IRConstValue;
    parent: IRParentTerm | undefined;
    constructor(t: TermType, v: IRConstValue);
    static get tag(): Uint8Array;
    clone(): IRConst;
    toJson(): any;
    static get unit(): IRConst;
    static bool(b: boolean): IRConst;
    static byteString(b: ByteString | Uint8Array): IRConst;
    static int(n: number | bigint): IRConst;
    static str(string: string): IRConst;
    static data(d: Data): IRConst;
    static listOf(t: TermType): (vals: IRConstValue[]) => IRConst;
    static pairOf(a: TermType, b: TermType): (fst: IRConstValue, snd: IRConstValue) => IRConst;
}
export declare function isIRConstValue(value: any): boolean;
