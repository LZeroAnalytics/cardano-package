"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IRForced = void 0;
var crypto_1 = require("@harmoniclabs/crypto");
var BasePlutsError_1 = require("../../utils/BasePlutsError.js");
var concatUint8Arr_1 = require("../utils/concatUint8Arr.js");
var isIRTerm_1 = require("../utils/isIRTerm.js");
var isIRParentTerm_1 = require("../utils/isIRParentTerm.js");
var _modifyChildFromTo_1 = require("../toUPLC/_internal/_modifyChildFromTo.js");
var IRForced = /** @class */ (function () {
    function IRForced(forced) {
        var _this = this;
        Object.defineProperty(this, "meta", {
            value: {},
            writable: false,
            enumerable: true,
            configurable: false
        });
        var hash = undefined;
        Object.defineProperty(this, "hash", {
            get: function () {
                if (!(hash instanceof Uint8Array)) {
                    hash = (0, crypto_1.blake2b_128)((0, concatUint8Arr_1.concatUint8Arr)(IRForced.tag, _this.forced.hash));
                }
                return hash.slice();
            }
        });
        Object.defineProperty(this, "markHashAsInvalid", {
            value: function () {
                var _a;
                hash = undefined;
                (_a = _this.parent) === null || _a === void 0 ? void 0 : _a.markHashAsInvalid();
            },
            writable: false,
            enumerable: false,
            configurable: false
        });
        if (!(0, isIRTerm_1.isIRTerm)(forced))
            throw new Error("IRForced argument was not an IRTerm");
        var _forced = forced;
        _forced.parent = this;
        Object.defineProperty(this, "forced", {
            get: function () { return _forced; },
            set: function (newForced) {
                if (!(0, isIRTerm_1.isIRTerm)(newForced)) {
                    throw new BasePlutsError_1.BasePlutsError("invalid IRTerm to be forced");
                }
                _this.markHashAsInvalid();
                _forced = newForced;
                _forced.parent = _this;
            },
            enumerable: true,
            configurable: false
        });
        var _parent = undefined;
        Object.defineProperty(this, "parent", {
            get: function () { return _parent; },
            set: function (newParent) {
                if (!( // assert
                // new parent value is different than current
                _parent !== newParent && (
                // and the new parent value is valid
                newParent === undefined ||
                    (0, isIRParentTerm_1.isIRParentTerm)(newParent))))
                    return;
                // keep reference
                var oldParent = _parent;
                // change parent
                _parent = newParent;
                // if has old parent
                if (oldParent !== undefined && (0, isIRParentTerm_1.isIRParentTerm)(oldParent)) {
                    // change reference to a clone for safety
                    (0, _modifyChildFromTo_1._modifyChildFromTo)(oldParent, _this, _this.clone());
                }
            },
            enumerable: true,
            configurable: false
        });
    }
    Object.defineProperty(IRForced, "tag", {
        get: function () {
            return new Uint8Array([8]);
        },
        enumerable: false,
        configurable: true
    });
    IRForced.prototype.clone = function () {
        return new IRForced(this.forced.clone());
    };
    IRForced.prototype.toJson = function () {
        return {
            type: "IRForced",
            forced: this.forced.toJson()
        };
    };
    return IRForced;
}());
exports.IRForced = IRForced;
