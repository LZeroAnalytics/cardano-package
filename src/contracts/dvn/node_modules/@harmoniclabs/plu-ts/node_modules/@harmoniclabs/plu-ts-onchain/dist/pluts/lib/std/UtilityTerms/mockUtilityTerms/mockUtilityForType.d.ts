import { PType } from "../../../../PType/index.js";
import type { PAlias } from "../../../../PTypes/index.js";
import { Term } from "../../../../Term/index.js";
import { ToPType } from "../../../../type_system/ts-pluts-conversion.js";
import { Methods, TermType } from "../../../../type_system/types.js";
import { TermAlias } from "../../UtilityTerms/index.js";
import { UtilityTermOf } from "../../UtilityTerms/addUtilityForType.js";
/**
 * like `addUtilityForType` but it doesn't add real terms;
 *
 * the generated terms are not intended to end in the compilation result
 * rather are useful to add the expected properties to the terms and their types
 *
 * `mockUtilityForType` is requires less work and less dependecies than `addUtilityForType`
 */
export declare function mockUtilityForType<T extends TermType>(t: T): (term: Term<ToPType<T>>) => UtilityTermOf<ToPType<T>>;
export declare function mockPAliasMethods<PAliased extends PType, AMethods extends Methods>(aliasTerm: Term<PAlias<PAliased, AMethods>>): TermAlias<PAliased, AMethods>;
