"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.showFrames = exports.CEKFrames = exports.isFrame = void 0;
var uplc_1 = require("@harmoniclabs/uplc");
var ForceFrame_1 = require("./ForceFrame.js");
var LApp_1 = require("./LApp.js");
var RApp_1 = require("./RApp.js");
var ConstrFrame_1 = require("./ConstrFrame.js");
var CaseFrame_1 = require("./CaseFrame.js");
function isFrame(stuff) {
    return (stuff instanceof ForceFrame_1.ForceFrame ||
        stuff instanceof LApp_1.LApp ||
        stuff instanceof RApp_1.RApp ||
        stuff instanceof ConstrFrame_1.ConstrFrame ||
        stuff instanceof CaseFrame_1.CaseFrame);
}
exports.isFrame = isFrame;
var CEKFrames = /** @class */ (function () {
    function CEKFrames(init) {
        if (init === void 0) { init = []; }
        this._frames = init;
    }
    Object.defineProperty(CEKFrames.prototype, "isEmpty", {
        get: function () { return this._frames.length === 0; },
        enumerable: false,
        configurable: true
    });
    CEKFrames.prototype.callStack = function () {
        /*
        Essentially
        ```
        return this._frames
            .map( f => f.src )
            .filter( s => typeof s === "string" );
        ```
        but avoids 1 extra array allocation
        */
        var framesLen = this._frames.length;
        var result = new Array(framesLen);
        var actualLen = 0;
        for (var i = 0; i < framesLen; i++) {
            var src = this._frames[i].src;
            if (typeof src === "string") {
                result[actualLen++] = src;
            }
        }
        // drop extra slots
        result.length = actualLen;
        return result;
    };
    CEKFrames.prototype.push = function () {
        var _a;
        var frames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            frames[_i] = arguments[_i];
        }
        (_a = this._frames).push.apply(_a, __spreadArray([], __read(frames), false));
    };
    CEKFrames.prototype.pop = function () {
        var f = this._frames.pop();
        if (f === undefined) {
            throw new Error("frames stack was empty while trying to pop a frame");
        }
        return f;
    };
    CEKFrames.prototype.clone = function () {
        return new CEKFrames(this._frames.map(function (frame) { return frame.clone(); }));
    };
    CEKFrames.prototype._unsafe_clear = function () {
        this._frames.length = 0;
    };
    return CEKFrames;
}());
exports.CEKFrames = CEKFrames;
function showFrames(frames) {
    // const frames = frames_.clone();
    var res = "_";
    var topFrame;
    while (!frames.isEmpty) {
        topFrame = frames.pop();
        if (topFrame instanceof ForceFrame_1.ForceFrame) {
            res = "( force ".concat(res, " )");
        }
        else if (topFrame instanceof LApp_1.LApp) {
            res = "[ ".concat((0, uplc_1.showUPLC)(topFrame.func), " ").concat(res, " ]");
        }
        else if (topFrame instanceof RApp_1.RApp) {
            res = "[ ".concat(res, " ").concat((0, uplc_1.showUPLC)(topFrame.arg), " ]");
        }
        else if (topFrame instanceof ConstrFrame_1.ConstrFrame) {
            res = "(constr ".concat(topFrame.tag, " [ ").concat(topFrame.terms.map(uplc_1.showUPLC).join(", "), " ] [ ").concat(topFrame.values.map(function (v) { return v.clone(); }), " ])");
        }
        else if (topFrame instanceof CaseFrame_1.CaseFrame) {
            res = "(case [ ".concat(topFrame.terms.map(uplc_1.showUPLC).join(", "), " ])");
        }
    }
    return res;
}
exports.showFrames = showFrames;
