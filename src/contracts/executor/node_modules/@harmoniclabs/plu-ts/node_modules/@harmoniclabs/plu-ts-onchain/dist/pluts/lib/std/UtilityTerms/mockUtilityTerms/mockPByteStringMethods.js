"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockPByteStringMethods = exports.makeMockTermBs = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var makeMockTerm_1 = require("./makeMockTerm.js");
var types_1 = require("../../../../type_system/types.js");
var makeMockUtilityTerm_1 = require("./makeMockUtilityTerm.js");
var mockPBoolMethods_1 = require("./mockPBoolMethods.js");
var mockPIntMethods_1 = require("./mockPIntMethods.js");
var getterOnly = {
    set: function () { },
    configurable: false,
    enumerable: true
};
function makeMockTermBs() {
    return mockPByteStringMethods((0, makeMockTerm_1.makeMockTerm)(types_1.bs));
}
exports.makeMockTermBs = makeMockTermBs;
function mockPByteStringMethods(term) {
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "length", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)(types_1.int); } }, getterOnly));
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "utf8Decoded", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)(types_1.str); } }, getterOnly));
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pconcat", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.bs, types_1.bs)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "concat", function (other) { return makeMockTermBs(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pprepend", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.int, types_1.bs)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "prepend", function (byte) { return makeMockTermBs(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "psubByteString", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.int, (0, types_1.lam)(types_1.int, types_1.bs))); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "subByteString", function (fromInclusive, ofLength) { return makeMockTermBs(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pslice", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.int, (0, types_1.lam)(types_1.int, types_1.bs))); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "slice", function (fromInclusive, toExclusive) { return makeMockTermBs(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pat", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.int, types_1.bs)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "at", function (index) { return (0, mockPIntMethods_1.makeMockTermInt)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "peq", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.bs, types_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "eq", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "plt", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.bs, types_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "lt", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pltEq", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.bs, types_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "ltEq", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pgt", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.bs, types_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "gt", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pgtEq", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, types_1.lam)(types_1.bs, types_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "gtEq", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    return term;
}
exports.mockPByteStringMethods = mockPByteStringMethods;
