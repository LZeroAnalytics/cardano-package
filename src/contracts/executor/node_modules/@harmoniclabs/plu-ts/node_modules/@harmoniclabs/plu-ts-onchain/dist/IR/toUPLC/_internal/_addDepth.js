"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._addDepths = void 0;
var IRApp_1 = require("../../IRNodes/IRApp.js");
var IRDelayed_1 = require("../../IRNodes/IRDelayed.js");
var IRForced_1 = require("../../IRNodes/IRForced.js");
var IRFunc_1 = require("../../IRNodes/IRFunc.js");
var IRHoisted_1 = require("../../IRNodes/IRHoisted.js");
var IRLetted_1 = require("../../IRNodes/IRLetted.js");
var depth_1 = require("./depth.js");
function _addDepths(_term, initialDepth) {
    if (initialDepth === void 0) { initialDepth = 0; }
    var stack = [(0, depth_1.defineDepth)(_term, initialDepth)];
    while (stack.length > 0) {
        var t = stack.pop();
        if (t instanceof IRApp_1.IRApp) {
            stack.push((0, depth_1.defineDepth)(t.fn, t.depth + 1), (0, depth_1.defineDepth)(t.arg, t.depth + 1));
            continue;
        }
        if (t instanceof IRDelayed_1.IRDelayed) {
            stack.push((0, depth_1.defineDepth)(t.delayed, t.depth + 1));
            continue;
        }
        if (t instanceof IRForced_1.IRForced) {
            stack.push((0, depth_1.defineDepth)(t.forced, t.depth + 1));
            continue;
        }
        if (t instanceof IRFunc_1.IRFunc) {
            stack.push((0, depth_1.defineDepth)(t.body, t.depth + 1));
            continue;
        }
        if (t instanceof IRHoisted_1.IRHoisted) {
            // 0 because hoisted are closed
            // for hoisted we keep track of the depth inside the term
            stack.push((0, depth_1.defineDepth)(t.hoisted, 0));
            continue;
        }
        if (t instanceof IRLetted_1.IRLetted) {
            // same stuff as the hoisted terms
            // the only difference is that depth is then incremented
            // once the letted term reaches its final position
            stack.push((0, depth_1.defineDepth)(t.value, 0));
            continue;
        }
    }
}
exports._addDepths = _addDepths;
