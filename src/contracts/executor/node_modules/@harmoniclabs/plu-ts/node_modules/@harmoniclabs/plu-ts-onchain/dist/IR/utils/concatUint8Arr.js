"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatUint8Arr = void 0;
function concatUint8Arr() {
    var e_1, _a, e_2, _b;
    var arrs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrs[_i] = arguments[_i];
    }
    var len = arrs.reduce(function (acc, arr) { return acc + arr.length; }, 0);
    var res = new Uint8Array(len);
    var idx = 0;
    try {
        for (var arrs_1 = __values(arrs), arrs_1_1 = arrs_1.next(); !arrs_1_1.done; arrs_1_1 = arrs_1.next()) {
            var arr = arrs_1_1.value;
            try {
                for (var arr_1 = (e_2 = void 0, __values(arr)), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
                    var byte = arr_1_1.value;
                    res[idx++] = byte;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (arr_1_1 && !arr_1_1.done && (_b = arr_1.return)) _b.call(arr_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (arrs_1_1 && !arrs_1_1.done && (_a = arrs_1.return)) _a.call(arrs_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return res;
}
exports.concatUint8Arr = concatUint8Arr;
