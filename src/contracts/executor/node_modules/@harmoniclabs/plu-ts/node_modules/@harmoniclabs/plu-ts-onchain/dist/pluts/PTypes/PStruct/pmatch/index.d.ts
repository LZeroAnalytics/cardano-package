import { PStruct, StructInstance } from "../pstruct.js";
import { PType } from "../../../PType/index.js";
import { Term } from "../../../Term/index.js";
import { PData } from "../../PData/PData.js";
import { PList } from "../../PList.js";
import { UtilityTermOf } from "../../../lib/std/UtilityTerms/addUtilityForType.js";
import { TermList } from "../../../lib/std/UtilityTerms/TermList.js";
import { TermFn } from "../../PFn/index.js";
import { StructCtorDef, StructDefinition, TermType } from "../../../type_system/types.js";
export declare function getElemAtTerm(n: number): TermFn<[PList<PData>], PData>;
type EmptyObject = {
    [x: string | number | symbol]: never;
};
type MatchRest<PReturnT extends PType> = {
    _: (continuation: (mathcedCtorsFields: TermList<PData>) => Term<PReturnT>) => UtilityTermOf<PReturnT>;
};
type TypedPMatchOptions<SDef extends StructDefinition, PReturnT extends PType> = {
    [Ctor in keyof SDef as `on${Capitalize<string & Ctor>}`]: (cb: (mathcedCtorsFields: StructInstance<SDef[Ctor]>) => Term<PReturnT>) => Omit<SDef, Ctor> extends EmptyObject ? UtilityTermOf<PReturnT> : TypedPMatchOptions<Omit<SDef, Ctor>, PReturnT>;
} & MatchRest<PReturnT>;
type MathcedCtorsFields<SCtorDef extends StructCtorDef> = StructInstance<SCtorDef> & {
    /**
     * @deprecated
     * you can use simple dot notation instead
    **/
    extract: (...fields: (keyof SCtorDef)[]) => {
        /**
         * @deprecated
        **/
        in: <PExprReturn extends PType>(cb: (mathcedCtorsFields: StructInstance<SCtorDef>) => Term<PExprReturn>) => Term<PExprReturn>;
    };
};
export type PMatchOptions<SDef extends StructDefinition> = {
    [Ctor in keyof SDef as `on${Capitalize<string & Ctor>}`]: <PReturnT extends PType>(cb: (mathcedCtorsFields: MathcedCtorsFields<SDef[Ctor]>) => Term<PReturnT>) => Omit<SDef, Ctor> extends EmptyObject ? UtilityTermOf<PReturnT> : TypedPMatchOptions<Omit<SDef, Ctor>, PReturnT>;
} & {
    _: <PReturnT extends PType>(continuation: (mathcedCtorsFields: TermList<PData>) => Term<PReturnT>) => UtilityTermOf<PReturnT>;
};
export declare function matchNCtorsIdxs(_n: number, returnT: TermType): Term<any>;
export declare function pmatch<SDef extends StructDefinition>(struct: Term<PStruct<SDef, {}>>): PMatchOptions<SDef>;
export {};
