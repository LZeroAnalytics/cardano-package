import { UPLCTerm, ToUPLC } from "@harmoniclabs/uplc";
import { ScriptType } from "../utils/ScriptType.js";
import { ExBudget } from "./ExBudget.js";
import { AnyV1CostModel, AnyV2CostModel } from "@harmoniclabs/cardano-costmodels-ts";
export type MachineVersionV1 = ScriptType.PlutusV1;
export type MachineVersionV2 = ScriptType.PlutusV2;
export declare const machineVersionV1: ScriptType.PlutusV1;
export declare const machineVersionV2: ScriptType.PlutusV2;
export type MachineVersion = MachineVersionV1 | MachineVersionV2;
type CostModelOf<V extends MachineVersion> = V extends ScriptType.PlutusV1 ? AnyV1CostModel : V extends ScriptType.PlutusV2 ? AnyV2CostModel : never;
export type SrcMap = {
    [node_index: number]: string;
};
export declare class Machine<V extends MachineVersion = MachineVersion> {
    readonly version: V;
    constructor(version: V, costmodel: CostModelOf<V>);
    static evalSimple(_term: UPLCTerm | ToUPLC, srcmap?: SrcMap | undefined): UPLCTerm;
    static eval(_term: UPLCTerm | ToUPLC, srcmap?: SrcMap | undefined): {
        result: UPLCTerm;
        budgetSpent: ExBudget;
        logs: string[];
    };
    eval(_term: UPLCTerm | ToUPLC, srcmap?: SrcMap | undefined): {
        result: UPLCTerm;
        budgetSpent: ExBudget;
        logs: string[];
    };
}
export {};
