import { ToCbor, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { ToData, DataConstr } from "@harmoniclabs/plutus-data";
import { StakeCredentials } from "../../credentials/StakeCredentials.js";
import { GenesisDelegateHash } from "../../hashes/Hash28/GenesisDelegateHash.js";
import { GenesisHash } from "../../hashes/Hash28/GenesisHash.js";
import { PoolKeyHash } from "../../hashes/Hash28/PoolKeyHash.js";
import { VRFKeyHash } from "../../hashes/Hash32/VRFKeyHash.js";
import { Epoch } from "../Epoch.js";
import { PoolParams } from "../PoolParams.js";
import { MoveInstantRewardsCert } from "./MoveInstantRewardsCert.js";
export declare enum CertificateType {
    StakeRegistration = 0,
    StakeDeRegistration = 1,
    StakeDelegation = 2,
    PoolRegistration = 3,
    PoolRetirement = 4,
    GenesisKeyDelegation = 5,
    MoveInstantRewards = 6
}
export type CertTypeToStr<CertT extends CertificateType> = CertT extends CertificateType.StakeRegistration ? "StakeRegistration" : CertT extends CertificateType.StakeDeRegistration ? "StakeDeRegistration" : CertT extends CertificateType.StakeDelegation ? "StakeDelegation" : CertT extends CertificateType.PoolRegistration ? "PoolRegistration" : CertT extends CertificateType.PoolRetirement ? "PoolRetirement" : CertT extends CertificateType.GenesisKeyDelegation ? "GenesisKeyDelegation" : CertT extends CertificateType.MoveInstantRewards ? "MoveInstantRewards" : never;
export declare function certTypeToString<CertT extends CertificateType>(certT: CertT): CertTypeToStr<CertT>;
export type StakeRegistration = CertificateType.StakeRegistration;
export type StakeDeRegistration = CertificateType.StakeDeRegistration;
export type StakeDelegation = CertificateType.StakeDelegation;
export type PoolRegistration = CertificateType.PoolRegistration;
export type PoolRetirement = CertificateType.PoolRetirement;
export type GenesisKeyDelegation = CertificateType.GenesisKeyDelegation;
export type MoveInstantRewards = CertificateType.MoveInstantRewards;
export type ParamsOfCert<CertTy extends CertificateType> = CertTy extends CertificateType.StakeRegistration ? [StakeCredentials] : CertTy extends CertificateType.StakeDeRegistration ? [StakeCredentials] : CertTy extends CertificateType.StakeDelegation ? [StakeCredentials, PoolKeyHash] : CertTy extends CertificateType.PoolRegistration ? [PoolParams] : CertTy extends CertificateType.PoolRetirement ? [PoolKeyHash, Epoch] : CertTy extends CertificateType.GenesisKeyDelegation ? [GenesisHash, GenesisDelegateHash, VRFKeyHash] : CertTy extends CertificateType.MoveInstantRewards ? [MoveInstantRewardsCert] : never;
export declare class Certificate<CertTy extends CertificateType> implements ToCbor, ToData {
    readonly certType: CertTy;
    readonly params: ParamsOfCert<CertTy>;
    constructor(certType: CertTy, ...params: ParamsOfCert<CertTy>);
    toData(): DataConstr;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): AnyCertificate;
    static fromCborObj(cObj: CborObj): AnyCertificate;
    toJson(): {
        certType: CertTypeToStr<CertTy>;
        stakeCredentials: {
            type: string;
            hash: string;
            pointer?: undefined;
        } | {
            type: string;
            pointer: string[];
            hash?: undefined;
        };
        poolKeyHash?: undefined;
        poolParams?: undefined;
        epoch?: undefined;
        genesisHash?: undefined;
        genesisDelegateHash?: undefined;
        vrfKeyHash?: undefined;
        mirCert?: undefined;
    } | {
        certType: CertTypeToStr<CertTy>;
        stakeCredentials: {
            type: string;
            hash: string;
            pointer?: undefined;
        } | {
            type: string;
            pointer: string[];
            hash?: undefined;
        };
        poolKeyHash: string;
        poolParams?: undefined;
        epoch?: undefined;
        genesisHash?: undefined;
        genesisDelegateHash?: undefined;
        vrfKeyHash?: undefined;
        mirCert?: undefined;
    } | {
        certType: CertTypeToStr<CertTy>;
        poolParams: {
            operator: string;
            vrfKeyHash: string;
            pledge: string;
            cost: string;
            margin: number;
            rewardAccount: string;
            owners: string[];
            relays: ({
                type: string;
                port: number | undefined;
                ipv4: string | undefined;
                ipv6: string | undefined;
                dnsName?: undefined;
            } | {
                type: string;
                port: number | undefined;
                dnsName: string;
                ipv4?: undefined;
                ipv6?: undefined;
            } | {
                type: string;
                dnsName: string;
                port?: undefined;
                ipv4?: undefined;
                ipv6?: undefined;
            })[];
            metadata: {
                poolMetadataUrl: string;
                hash: string;
            } | undefined;
        };
        stakeCredentials?: undefined;
        poolKeyHash?: undefined;
        epoch?: undefined;
        genesisHash?: undefined;
        genesisDelegateHash?: undefined;
        vrfKeyHash?: undefined;
        mirCert?: undefined;
    } | {
        certType: CertTypeToStr<CertTy>;
        poolKeyHash: string;
        epoch: number;
        stakeCredentials?: undefined;
        poolParams?: undefined;
        genesisHash?: undefined;
        genesisDelegateHash?: undefined;
        vrfKeyHash?: undefined;
        mirCert?: undefined;
    } | {
        certType: CertTypeToStr<CertTy>;
        genesisHash: string;
        genesisDelegateHash: string;
        vrfKeyHash: string;
        stakeCredentials?: undefined;
        poolKeyHash?: undefined;
        poolParams?: undefined;
        epoch?: undefined;
        mirCert?: undefined;
    } | {
        certType: CertTypeToStr<CertTy>;
        mirCert: {
            source: "Reserves" | "Treasurery";
            destination: string | {
                stakeCreds: {
                    type: string;
                    hash: string;
                    pointer?: undefined;
                } | {
                    type: string;
                    pointer: string[];
                    hash?: undefined;
                };
                amount: string;
            }[];
        };
        stakeCredentials?: undefined;
        poolKeyHash?: undefined;
        poolParams?: undefined;
        epoch?: undefined;
        genesisHash?: undefined;
        genesisDelegateHash?: undefined;
        vrfKeyHash?: undefined;
    };
}
export type AnyCertificate = Certificate<CertificateType>;
export declare function certToDepositLovelaces(cert: AnyCertificate): bigint;
export declare function certificatesToDepositLovelaces(certs: AnyCertificate[]): bigint;
