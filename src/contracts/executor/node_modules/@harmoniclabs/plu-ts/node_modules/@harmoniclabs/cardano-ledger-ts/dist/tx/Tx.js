"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNSignersNeeded = exports.getAllRequiredSigners = exports.Tx = void 0;
var credentials_1 = require("../credentials/index.js");
var hashes_1 = require("../hashes/index.js");
var TxWitnessSet_1 = require("./TxWitnessSet/index.js");
var ledger_1 = require("../ledger/index.js");
var cbor_1 = require("@harmoniclabs/cbor");
var crypto_1 = require("@harmoniclabs/crypto");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var InvalidCborFormatError_1 = require("../utils/InvalidCborFormatError.js");
var assert_1 = require("../utils/assert.js");
var AuxiliaryData_1 = require("./AuxiliaryData/index.js");
var body_1 = require("./body/index.js");
var Tx = /** @class */ (function () {
    function Tx(tx) {
        var _this = this;
        var body = tx.body, witnesses = tx.witnesses, isScriptValid = tx.isScriptValid, auxiliaryData = tx.auxiliaryData;
        (0, assert_1.assert)(body instanceof body_1.TxBody || (0, body_1.isITxBody)(body), "invalid transaction body; must be instance of 'TxBody'");
        (0, assert_1.assert)((0, TxWitnessSet_1.isITxWitnessSet)(witnesses), "invalid wintesses; must be instance of 'TxWitnessSet'");
        (0, assert_1.assert)(isScriptValid === undefined || typeof isScriptValid === "boolean", "'isScriptValid' ('Tx' third paramter) must be a boolean");
        (0, assert_1.assert)(auxiliaryData === undefined ||
            auxiliaryData === null ||
            auxiliaryData instanceof AuxiliaryData_1.AuxiliaryData, "invalid transaction auxiliray data; must be instance of 'AuxiliaryData'");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "body", new body_1.TxBody(body));
        (0, obj_utils_1.defineReadOnlyProperty)(this, "witnesses", new TxWitnessSet_1.TxWitnessSet(witnesses, getAllRequiredSigners(this.body)));
        (0, obj_utils_1.defineReadOnlyProperty)(this, "isScriptValid", isScriptValid === undefined ? true : isScriptValid);
        (0, obj_utils_1.defineReadOnlyProperty)(this, "auxiliaryData", auxiliaryData);
        (0, obj_utils_1.definePropertyIfNotPresent)(this, "hash", {
            // needs to be a getter because `this.body.hash` is a getter
            get: function () { return _this.body.hash; },
            set: function () { },
            enumerable: true,
            configurable: false
        });
        //*
        (0, obj_utils_1.defineReadOnlyProperty)(this, "addVKeyWitness", function (vkeyWit) { return _this.witnesses.addVKeyWitness(vkeyWit); });
        (0, obj_utils_1.defineReadOnlyProperty)(this, "signWith", function (signer) {
            var _a = __read((0, crypto_1.signEd25519)(_this.body.hash.toBuffer(), signer.toBuffer()), 2), derivedPubKey = _a[0], signature = _a[1];
            _this.addVKeyWitness(new TxWitnessSet_1.VKeyWitness(new TxWitnessSet_1.VKey(derivedPubKey), new hashes_1.Signature(signature)));
        });
        (0, obj_utils_1.defineReadOnlyProperty)(this, "signWithCip30Wallet", function (cip30) {
            var e_1, _a;
            var wits = TxWitnessSet_1.TxWitnessSet.fromCbor(cip30.signTx(
            // signTx expects the entire transaction by standard (not only the body ¯\_(ツ)_/¯)
            _this.toCbor().toString(), true));
            try {
                for (var _b = __values(wits.vkeyWitnesses), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var wit = _c.value;
                    _this.addVKeyWitness(wit);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        Object.defineProperty(this, "isComplete", {
            // calls the `TxWitnessSet` getter
            get: function () { return _this.witnesses.isComplete; },
            set: function () { },
            configurable: false,
            enumerable: true
        });
        //*/
    }
    Tx.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    Tx.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            this.body.toCborObj(),
            this.witnesses.toCborObj(),
            new cbor_1.CborSimple(this.isScriptValid),
            this.auxiliaryData === undefined || this.auxiliaryData === null ?
                new cbor_1.CborSimple(null) :
                this.auxiliaryData.toCborObj()
        ]);
    };
    Tx.fromCbor = function (cStr) {
        return Tx.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr)));
    };
    Tx.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("Tx");
        var _a = __read(cObj.array, 4), _body = _a[0], _wits = _a[1], _isValid = _a[2], _aux = _a[3];
        if (!(_isValid instanceof cbor_1.CborSimple &&
            typeof (_isValid.simple) === "boolean"))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("Tx", "isScriptValid is not a boolean");
        var noAuxiliaryData = _aux instanceof cbor_1.CborSimple && (_aux.simple === null || _aux.simple === undefined);
        return new Tx({
            body: body_1.TxBody.fromCborObj(_body),
            witnesses: TxWitnessSet_1.TxWitnessSet.fromCborObj(_wits),
            isScriptValid: _isValid.simple,
            auxiliaryData: noAuxiliaryData ? undefined : AuxiliaryData_1.AuxiliaryData.fromCborObj(_aux)
        });
    };
    Tx.prototype.toJson = function () {
        var _a;
        return {
            body: this.body.toJson(),
            witnesses: this.witnesses.toJson(),
            isScriptValid: this.isScriptValid,
            auxiliaryData: (_a = this.auxiliaryData) === null || _a === void 0 ? void 0 : _a.toJson()
        };
    };
    return Tx;
}());
exports.Tx = Tx;
/**
 * signers needed are:
 *  - required to spend an utxo
 *  - required by certificate
 *  - required by withdrawals
 *  - additional specified in the `requiredSigners` field
 */
function getAllRequiredSigners(body) {
    var _a;
    var _b, _c, _d, _e, _f, _g;
    return (
    // required for spending pubKey utxo
    (_a = body.inputs.reduce(function (acc, _in) {
        var _a = _in.resolved.address.paymentCreds, type = _a.type, hash = _a.hash;
        if (type === "pubKey")
            acc.push(new credentials_1.PubKeyHash(hash));
        return acc;
    }, [])
        // required to sign certificate
        .concat((_c = (_b = body.certs) === null || _b === void 0 ? void 0 : _b.reduce(function (acc, cert) {
        var _a = __read(cert.params, 3), _0 = _a[0], _1 = _a[1], _2 = _a[2];
        var hash = undefined;
        switch (cert.certType) {
            case ledger_1.CertificateType.StakeRegistration:
            case ledger_1.CertificateType.StakeDeRegistration:
            case ledger_1.CertificateType.StakeDelegation:
                hash = _0.hash;
                break;
            case ledger_1.CertificateType.PoolRegistration:
                hash = _0.operator;
                break;
            case ledger_1.CertificateType.PoolRetirement:
            case ledger_1.CertificateType.GenesisKeyDelegation:
                hash = _0;
                break;
        }
        if (hash instanceof hashes_1.Hash28)
            acc.push(hash);
        return acc;
    }, [])) !== null && _c !== void 0 ? _c : [])
        // requred for withdrawal
        .concat((_e = (_d = body.withdrawals) === null || _d === void 0 ? void 0 : _d.map.map(function (_a) {
        var rewardAccount = _a.rewardAccount;
        return rewardAccount.credentials.clone();
    })) !== null && _e !== void 0 ? _e : []))
        .concat.apply(_a, __spreadArray([], __read((_g = (_f = body.requiredSigners) === null || _f === void 0 ? void 0 : _f.map(function (sig) { return sig.clone(); })) !== null && _g !== void 0 ? _g : []), false))).filter(function (elem, i, thisArr) { return thisArr.indexOf(elem) === i; });
}
exports.getAllRequiredSigners = getAllRequiredSigners;
function getNSignersNeeded(body) {
    var n = getAllRequiredSigners(body).length;
    return n === 0 ? 1 : n;
}
exports.getNSignersNeeded = getNSignersNeeded;
