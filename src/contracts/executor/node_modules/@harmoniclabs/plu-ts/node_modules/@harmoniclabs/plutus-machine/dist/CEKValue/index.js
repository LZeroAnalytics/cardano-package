"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eqCEKValue = void 0;
var uplc_1 = require("@harmoniclabs/uplc");
var PartialBuiltin_1 = require("../BnCEK/PartialBuiltin.js");
var CEKEnv_1 = require("../CEKEnv.js");
var DelayCEK_1 = require("../DelayCEK/index.js");
var LambdaCEK_1 = require("../LambdaCEK/index.js");
function eqCEKValue(a, b) {
    if (!(Object.getPrototypeOf(a) === Object.getPrototypeOf(b)))
        return false;
    if (a instanceof DelayCEK_1.DelayCEK && b instanceof DelayCEK_1.DelayCEK) {
        return CEKEnv_1.CEKEnv.eq(a.env, b.env) && eqCEKValue(a.delayedTerm, b.delayedTerm);
    }
    if (a instanceof LambdaCEK_1.LambdaCEK && b instanceof LambdaCEK_1.LambdaCEK) {
        return CEKEnv_1.CEKEnv.eq(a.env, b.env) && eqCEKValue(a.body, b.body);
    }
    if (a instanceof PartialBuiltin_1.PartialBuiltin && b instanceof PartialBuiltin_1.PartialBuiltin) {
        return (a.tag === b.tag &&
            a.nMissingArgs === b.nMissingArgs &&
            a.args.every(function (arg, i) { return eqCEKValue(arg, b.args[i]); }));
    }
    if (a instanceof uplc_1.UPLCVar && b instanceof uplc_1.UPLCVar) {
        return a.deBruijn === b.deBruijn;
    }
    if (a instanceof uplc_1.Delay && b instanceof uplc_1.Delay) {
        return eqCEKValue(a.delayedTerm, b.delayedTerm);
    }
    if (a instanceof uplc_1.Lambda && b instanceof uplc_1.Lambda) {
        return eqCEKValue(a.body, b.body);
    }
    if (a instanceof uplc_1.Application && b instanceof uplc_1.Application) {
        return eqCEKValue(a.argTerm, b.argTerm) && eqCEKValue(a.funcTerm, b.funcTerm);
    }
    if (a instanceof uplc_1.UPLCConst && b instanceof uplc_1.UPLCConst) {
        return ((0, uplc_1.constTypeEq)(a.type, b.type) &&
            (0, uplc_1.canConstValueBeOfConstType)(a.value, a.type) &&
            (0, uplc_1.canConstValueBeOfConstType)(b.value, b.type) &&
            (function () {
                try {
                    return (0, uplc_1.eqConstValue)(a.value, b.value);
                }
                catch (e) {
                    if (e instanceof RangeError)
                        return false;
                    throw e;
                }
            })());
    }
    if (a instanceof uplc_1.Force && b instanceof uplc_1.Force) {
        return (eqCEKValue(a.termToForce, b.termToForce));
    }
    if (a instanceof uplc_1.ErrorUPLC)
        return b instanceof uplc_1.ErrorUPLC;
    if (a instanceof uplc_1.Builtin && b instanceof uplc_1.Builtin)
        return a.tag === b.tag;
    return false;
}
exports.eqCEKValue = eqCEKValue;
