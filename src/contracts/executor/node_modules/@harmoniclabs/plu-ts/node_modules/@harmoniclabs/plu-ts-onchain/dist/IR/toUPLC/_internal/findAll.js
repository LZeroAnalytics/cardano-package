"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAllNoHoisted = exports.findAll = void 0;
var IRApp_1 = require("../../IRNodes/IRApp.js");
var IRDelayed_1 = require("../../IRNodes/IRDelayed.js");
var IRForced_1 = require("../../IRNodes/IRForced.js");
var IRFunc_1 = require("../../IRNodes/IRFunc.js");
var IRHoisted_1 = require("../../IRNodes/IRHoisted.js");
var IRLetted_1 = require("../../IRNodes/IRLetted.js");
function findAll(term, predicate) {
    var stack = [term];
    var result = [];
    while (stack.length > 0) {
        var t = stack.pop();
        if (predicate(t))
            result.push(t);
        if (t instanceof IRApp_1.IRApp) {
            stack.push(t.fn, t.arg);
            continue;
        }
        if (t instanceof IRDelayed_1.IRDelayed) {
            stack.push(t.delayed);
            continue;
        }
        if (t instanceof IRForced_1.IRForced) {
            stack.push(t.forced);
            continue;
        }
        if (t instanceof IRFunc_1.IRFunc) {
            stack.push(t.body);
            continue;
        }
        if (t instanceof IRHoisted_1.IRHoisted) {
            stack.push(t.hoisted);
            continue;
        }
        if (t instanceof IRLetted_1.IRLetted) {
            // same stuff as the hoisted terms
            // the only difference is that depth is then incremented
            // once the letted term reaches its final position
            stack.push(t.value);
            continue;
        }
    }
    return result;
}
exports.findAll = findAll;
function findAllNoHoisted(term, predicate) {
    var stack = [term];
    var result = [];
    while (stack.length > 0) {
        var t = stack.pop();
        if (predicate(t))
            result.push(t);
        if (t instanceof IRApp_1.IRApp) {
            stack.push(t.fn, t.arg);
            continue;
        }
        if (t instanceof IRDelayed_1.IRDelayed) {
            stack.push(t.delayed);
            continue;
        }
        if (t instanceof IRForced_1.IRForced) {
            stack.push(t.forced);
            continue;
        }
        if (t instanceof IRFunc_1.IRFunc) {
            stack.push(t.body);
            continue;
        }
        if (t instanceof IRHoisted_1.IRHoisted) {
            // this is `findAllNoHoisted` remember?
            // stack.push( t.hoisted );
            continue;
        }
        if (t instanceof IRLetted_1.IRLetted) {
            // same stuff as the hoisted terms
            // the only difference is that depth is then incremented
            // once the letted term reaches its final position
            stack.push(t.value);
            continue;
        }
    }
    return result;
}
exports.findAllNoHoisted = findAllNoHoisted;
