"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.showFrames = exports.CEKFrames = exports.isFrame = void 0;
var uplc_1 = require("@harmoniclabs/uplc");
var ForceFrame_1 = require("./ForceFrame.js");
var LApp_1 = require("./LApp.js");
var RApp_1 = require("./RApp.js");
function isFrame(stuff) {
    return (stuff instanceof ForceFrame_1.ForceFrame ||
        stuff instanceof LApp_1.LApp ||
        stuff instanceof RApp_1.RApp);
}
exports.isFrame = isFrame;
var CEKFrames = /** @class */ (function () {
    function CEKFrames(init) {
        if (init === void 0) { init = []; }
        this._frames = init;
    }
    Object.defineProperty(CEKFrames.prototype, "isEmpty", {
        get: function () { return this._frames.length === 0; },
        enumerable: false,
        configurable: true
    });
    CEKFrames.prototype.callStack = function () {
        /*
        Essentially
        ```
        return this._frames
            .map( f => f.src )
            .filter( s => typeof s === "string" );
        ```
        but avoids 1 extra array allocation
        */
        var framesLen = this._frames.length;
        var result = new Array(framesLen);
        var actualLen = 0;
        for (var i = 0; i < framesLen; i++) {
            var src = this._frames[i].src;
            if (typeof src === "string") {
                result[actualLen++] = src;
            }
        }
        // drop extra slots
        result.length = actualLen;
        return result;
    };
    CEKFrames.prototype.push = function (f) {
        this._frames.push(f);
    };
    CEKFrames.prototype.pop = function () {
        var f = this._frames.pop();
        if (f === undefined) {
            throw new Error("frames stack was empty while trying to pop a frame");
        }
        return f;
    };
    CEKFrames.prototype.clone = function () {
        return new CEKFrames(this._frames.map(function (frame) { return frame.clone(); }));
    };
    CEKFrames.prototype._unsafe_clear = function () {
        this._frames.length = 0;
    };
    return CEKFrames;
}());
exports.CEKFrames = CEKFrames;
function showFrames(frames) {
    // const frames = frames_.clone();
    var res = "_";
    var topFrame;
    while (!frames.isEmpty) {
        topFrame = frames.pop();
        if (topFrame instanceof ForceFrame_1.ForceFrame) {
            res = "( force ".concat(res, " )");
        }
        else if (topFrame instanceof LApp_1.LApp) {
            res = "[ ".concat((0, uplc_1.showUPLC)(topFrame.func), " ").concat(res, " ]");
        }
        else {
            res = "[ ".concat(res, " ").concat((0, uplc_1.showUPLC)(topFrame.arg), " ]");
        }
    }
    return res;
}
exports.showFrames = showFrames;
