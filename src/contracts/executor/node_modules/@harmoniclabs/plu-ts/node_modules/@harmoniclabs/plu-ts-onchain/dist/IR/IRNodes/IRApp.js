"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IRApp = void 0;
var concatUint8Arr_1 = require("../utils/concatUint8Arr.js");
var isIRTerm_1 = require("../utils/isIRTerm.js");
var crypto_1 = require("@harmoniclabs/crypto");
var isIRParentTerm_1 = require("../utils/isIRParentTerm.js");
var _modifyChildFromTo_1 = require("../toUPLC/_internal/_modifyChildFromTo.js");
var IRApp = /** @class */ (function () {
    function IRApp(_fn_, _arg_, meta) {
        if (meta === void 0) { meta = {}; }
        var _this = this;
        if (!(0, isIRTerm_1.isIRTerm)(_fn_)) {
            throw new Error("invalidn function node for `IRApp`");
        }
        if (!(0, isIRTerm_1.isIRTerm)(_arg_)) {
            throw new Error("invalidn function node for `IRApp`");
        }
        Object.defineProperty(this, "meta", {
            value: __assign({}, meta),
            writable: false,
            enumerable: true,
            configurable: false
        });
        var fn = _fn_;
        var arg = _arg_;
        fn.parent = this;
        arg.parent = this;
        var hash = undefined;
        Object.defineProperty(this, "hash", {
            get: function () {
                if (!(hash instanceof Uint8Array)) {
                    // basically a merkle tree
                    hash = (0, crypto_1.blake2b_128)((0, concatUint8Arr_1.concatUint8Arr)(IRApp.tag, fn.hash, arg.hash));
                }
                // return a copy
                return hash.slice();
            },
            set: function () { },
            enumerable: true,
            configurable: false
        });
        Object.defineProperty(this, "markHashAsInvalid", {
            value: function () {
                var _a;
                hash = undefined;
                (_a = _this.parent) === null || _a === void 0 ? void 0 : _a.markHashAsInvalid();
            },
            writable: false,
            enumerable: false,
            configurable: false
        });
        Object.defineProperty(this, "fn", {
            get: function () { return fn; },
            set: function (newFn) {
                if (!(0, isIRTerm_1.isIRTerm)(newFn))
                    return;
                _this.markHashAsInvalid();
                fn = newFn;
                fn.parent = _this;
            },
            enumerable: true,
            configurable: false
        });
        Object.defineProperty(this, "arg", {
            get: function () { return arg; },
            set: function (newArg) {
                if (!(0, isIRTerm_1.isIRTerm)(newArg))
                    return;
                _this.markHashAsInvalid();
                arg = newArg;
                arg.parent = _this;
            },
            enumerable: true,
            configurable: false
        });
        var _parent = undefined;
        Object.defineProperty(this, "parent", {
            get: function () { return _parent; },
            set: function (newParent) {
                if (!( // assert
                // new parent value is different than current
                _parent !== newParent && (
                // and the new parent value is valid
                newParent === undefined ||
                    (0, isIRParentTerm_1.isIRParentTerm)(newParent))))
                    return;
                // keep reference
                var oldParent = _parent;
                // change parent
                _parent = newParent;
                // if has old parent
                if (oldParent !== undefined && (0, isIRParentTerm_1.isIRParentTerm)(oldParent)) {
                    // change reference to a clone for safety
                    (0, _modifyChildFromTo_1._modifyChildFromTo)(oldParent, _this, _this.clone());
                }
            },
            enumerable: true,
            configurable: false
        });
    }
    Object.defineProperty(IRApp, "tag", {
        get: function () { return new Uint8Array([2]); },
        enumerable: false,
        configurable: true
    });
    IRApp.prototype.clone = function () {
        return new IRApp(this.fn.clone(), this.arg.clone(), __assign({}, this.meta));
    };
    IRApp.prototype.toJson = function () {
        return {
            type: "IRApp",
            fn: this.fn.toJson(),
            arg: this.arg.toJson()
        };
    };
    return IRApp;
}());
exports.IRApp = IRApp;
