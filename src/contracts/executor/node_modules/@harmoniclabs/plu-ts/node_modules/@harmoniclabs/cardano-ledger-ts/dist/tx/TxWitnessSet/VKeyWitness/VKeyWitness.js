"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VKeyWitness = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var Hash32_1 = require("../../../hashes/Hash32/Hash32.js");
var Signature_1 = require("../../../hashes/Signature/index.js");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
var VKey_1 = require("./VKey.js");
var assert_1 = require("../../../utils/assert.js");
var VKeyWitness = /** @class */ (function () {
    function VKeyWitness(vkey, signature) {
        (0, assert_1.assert)(vkey instanceof Hash32_1.Hash32, "can't construct 'VKeyWitness' without a 'VKey' as first argument");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "vkey", vkey);
        (0, assert_1.assert)(signature instanceof Signature_1.Signature, "can't construct 'VKeyWitness' without a 'Signature' as second argument");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "signature", signature);
    }
    VKeyWitness.prototype.clone = function () {
        return new VKeyWitness(new VKey_1.VKey(this.vkey), new Signature_1.Signature(this.signature));
    };
    VKeyWitness.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    VKeyWitness.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            this.vkey.toCborObj(),
            this.signature.toCborObj()
        ]);
    };
    VKeyWitness.fromCbor = function (cStr) {
        return VKeyWitness.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr)));
    };
    VKeyWitness.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("VKeyWitness");
        return new VKeyWitness(Hash32_1.Hash32.fromCborObj(cObj.array[0]), Signature_1.Signature.fromCborObj(cObj.array[1]));
    };
    VKeyWitness.prototype.toJson = function () {
        return {
            vkey: this.vkey.asString,
            signature: this.signature.asString
        };
    };
    return VKeyWitness;
}());
exports.VKeyWitness = VKeyWitness;
