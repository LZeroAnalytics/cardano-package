import { ToCbor, CborString, CborMap, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Data, ToData } from "@harmoniclabs/plutus-data";
import { Hash32 } from "../../../hashes/index.js";
import { Address, AddressStr, Value, IValue } from "../../../ledger/index.js";
import { Script } from "../../../script/index.js";
import { ToJson } from "../../../utils/ToJson.js";
import { ToDataVersion } from "../../../toData/defaultToDataVersion.js";
export interface ITxOut {
    address: Address | AddressStr;
    value: Value | IValue;
    datum?: Hash32 | Data;
    refScript?: Script;
}
export declare function isITxOut(stuff: any): stuff is ITxOut;
export declare class TxOut implements ITxOut, ToCbor, Cloneable<TxOut>, ToData, ToJson {
    readonly subCborRef?: SubCborRef | undefined;
    readonly address: Address;
    readonly value: Value;
    readonly datum?: Hash32 | Data;
    readonly refScript?: Script;
    constructor(txOutput: ITxOut, subCborRef?: SubCborRef | undefined);
    clone(): TxOut;
    static get fake(): TxOut;
    toData(version?: ToDataVersion): Data;
    toCbor(): CborString;
    toCborObj(): CborMap;
    static fromCbor(cStr: CanBeCborString): TxOut;
    static fromCborObj(cObj: CborObj): TxOut;
    toJSON(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
        datum: any;
        refScript: import("../../../script/index.js").ScriptSignature | import("../../../script/index.js").ScriptAll | import("../../../script/index.js").ScriptAny | import("../../../script/index.js").ScriptAtLeast | import("../../../script/index.js").ScriptAfter | import("../../../script/index.js").ScriptBefore | {
            type: import("../../../script/index.js").LitteralScriptType;
            description: string;
            cborHex: string;
        } | undefined;
    };
    toJson(): {
        address: `addr1${string}` | `addr_test1${string}`;
        value: import("../../../ledger/index.js").ValueJson;
        datum: any;
        refScript: import("../../../script/index.js").ScriptSignature | import("../../../script/index.js").ScriptAll | import("../../../script/index.js").ScriptAny | import("../../../script/index.js").ScriptAtLeast | import("../../../script/index.js").ScriptAfter | import("../../../script/index.js").ScriptBefore | {
            type: import("../../../script/index.js").LitteralScriptType;
            description: string;
            cborHex: string;
        } | undefined;
    };
}
