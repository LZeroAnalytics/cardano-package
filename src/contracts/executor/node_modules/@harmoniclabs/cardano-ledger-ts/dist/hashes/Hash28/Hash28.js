"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hash28 = exports.canBeHash28 = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var assert_1 = require("../../utils/assert.js");
var Hash_1 = require("../Hash.js");
var hex_1 = require("../../utils/hex.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
function canBeHash28(stuff) {
    if (stuff instanceof Hash28)
        return true;
    if (typeof stuff === "string") {
        return stuff.length === 56 && (0, hex_1.isHex)(stuff);
    }
    if (stuff instanceof Uint8Array) {
        return stuff.length === 28;
    }
    return (0, Hash_1.canBeHashInstance)(stuff) && canBeHash28(stuff.toBuffer());
}
exports.canBeHash28 = canBeHash28;
var Hash28 = /** @class */ (function (_super) {
    __extends(Hash28, _super);
    function Hash28(bs, subCborRef) {
        var _this = _super.call(this, bs instanceof Hash28 ? bs.toBuffer() : bs) || this;
        _this.subCborRef = subCborRef;
        (0, assert_1.assert)(_this._bytes.length === 28, "'Hash28' must be an hash of length 28");
        return _this;
    }
    Hash28.prototype.valueOf = function () {
        return this.toString();
    };
    Hash28.prototype.clone = function () {
        return new Hash28(this.toBuffer());
    };
    Hash28.fromCbor = function (cStr) {
        return Hash28.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    Hash28.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborBytes))
            throw new Error("Invalid CBOR format for \"Hash\"");
        return new Hash28(cObj.bytes, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    return Hash28;
}(Hash_1.Hash));
exports.Hash28 = Hash28;
