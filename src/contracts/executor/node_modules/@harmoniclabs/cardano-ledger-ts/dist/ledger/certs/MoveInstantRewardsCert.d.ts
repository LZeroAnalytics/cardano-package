import { CborObj, ToCbor, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { Coin } from "../Coin.js";
import { CertificateType } from "./CertificateType.js";
import { ToJson } from "../../utils/ToJson.js";
import { Credential } from "../../credentials/index.js";
import { ICert } from "./ICert.js";
import { Hash28 } from "../../hashes/index.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export declare enum InstantRewardsSource {
    Reserves = 0,
    Treasurery = 1
}
export type RewardSourceToStr<S extends InstantRewardsSource> = S extends InstantRewardsSource.Reserves ? "Reserves" : S extends InstantRewardsSource.Treasurery ? "Treasurery" : never;
export declare function rewardSourceToStr<S extends InstantRewardsSource>(source: S): RewardSourceToStr<S>;
export type RewardsMap = {
    stakeCredentials: Credential;
    amount: number | bigint;
}[];
export interface IMoveInstantRewardsCert {
    source: InstantRewardsSource;
    destination: RewardsMap | Coin;
}
/** @deprecated */
export declare class MoveInstantRewardsCert implements ToCbor, ToJson, ICert {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.MoveInstantRewards;
    readonly source: InstantRewardsSource;
    /**
     * If the second field is a map, funds are moved to stake credentials,
     * otherwise the funds are given to the other accounting pot
     * (eg. source is Reserve, hence founds are going to treasurery)
     */
    readonly destination: RewardsMap | Coin;
    constructor({ source, destination }: IMoveInstantRewardsCert, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCborObj(cObj: CborObj): MoveInstantRewardsCert;
    toJSON(): {
        certType: "MoveInstantRewards";
        source: "Reserves" | "Treasurery";
        destination: string | {
            stakeCreds: {
                credentialType: string;
                hash: string;
            };
            amount: string;
        }[];
    };
    toJson(): {
        certType: "MoveInstantRewards";
        source: "Reserves" | "Treasurery";
        destination: string | {
            stakeCreds: {
                credentialType: string;
                hash: string;
            };
            amount: string;
        }[];
    };
}
