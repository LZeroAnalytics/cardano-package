import { CborObj } from "@harmoniclabs/cbor";
import { CanBeUInteger } from "../utils/ints.js";
export type IpPoolRelay = ({
    ipv4: Uint8Array;
} | {
    ipv6: Uint8Array;
} | {
    ipv4: Uint8Array;
    ipv6: Uint8Array;
}) & {
    type: "ip";
    port?: CanBeUInteger;
};
export interface DnsPoolRelay {
    type: "dns";
    port?: CanBeUInteger;
    dnsName: string;
}
export interface MultiHostPoolRelay {
    type: "multi-host";
    dnsName: string;
}
export type PoolRelay = IpPoolRelay | DnsPoolRelay | MultiHostPoolRelay;
export declare function poolRelayToJson(relay: PoolRelay): {
    type: string;
    port: number | undefined;
    ipv4: string | undefined;
    ipv6: string | undefined;
    dnsName?: undefined;
} | {
    type: string;
    port: number | undefined;
    dnsName: string;
    ipv4?: undefined;
    ipv6?: undefined;
} | {
    type: string;
    dnsName: string;
    port?: undefined;
    ipv4?: undefined;
    ipv6?: undefined;
};
export declare function isIpPoolRelay<T extends object>(something: T): something is (T & IpPoolRelay);
export declare function isDnsPoolRelay<T extends object>(something: T): something is (T & DnsPoolRelay);
export declare function isMultiHostPoolRelay<T extends object>(something: T): something is (T & MultiHostPoolRelay);
export declare function isPoolRelay<T extends object>(something: T): something is (T & PoolRelay);
export declare function poolRelayToCborObj(poolRelay: PoolRelay): CborObj;
export declare function poolRelayFromCborObj(cObj: CborObj): PoolRelay;
