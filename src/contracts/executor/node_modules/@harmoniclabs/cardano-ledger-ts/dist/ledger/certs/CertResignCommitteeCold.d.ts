import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { Credential } from "../../credentials/index.js";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { Anchor, IAnchor } from "../../governance/Anchor.js";
import { Hash28 } from "../../hashes/index.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface ICertResignCommitteeCold {
    coldCredential: Credential;
    anchor?: IAnchor | undefined;
}
export declare class CertResignCommitteeCold implements ICert, ICertResignCommitteeCold {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.ResignCommitteeCold;
    readonly coldCredential: Credential;
    readonly anchor: Anchor | undefined;
    constructor({ coldCredential, anchor }: ICertResignCommitteeCold, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertResignCommitteeCold;
    toJSON(): {
        certType: "ResignCommitteeCold";
        coldCredential: {
            credentialType: string;
            hash: string;
        };
        anchor: {
            url: string;
            anchorDataHash: string;
        } | null;
    };
    toJson(): {
        certType: "ResignCommitteeCold";
        coldCredential: {
            credentialType: string;
            hash: string;
        };
        anchor: {
            url: string;
            anchorDataHash: string;
        } | null;
    };
}
