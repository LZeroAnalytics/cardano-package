import { StakeAddress, StakeAddressBech32 } from "./StakeAddress.js";
import { NetworkT } from "./Network.js";
import { ToCbor, CborString, CborObj, CanBeCborString, SubCborRef } from "@harmoniclabs/cbor";
import { ToData, DataMap, DataConstr, DataI } from "@harmoniclabs/plutus-data";
import { CanBeHash28 } from "../hashes/index.js";
import { Coin } from "./Coin.js";
import { Value } from "./Value/index.js";
import { ToDataVersion } from "../toData/defaultToDataVersion.js";
export type ITxWithdrawalsEntryBigInt = {
    rewardAccount: StakeAddress;
    amount: bigint;
};
export type TxWithdrawalsMapBigInt = ITxWithdrawalsEntryBigInt[];
export type ITxWithdrawalsEntry = {
    rewardAccount: CanBeHash28 | StakeAddress;
    amount: Coin;
};
export type ITxWithdrawalsMap = ITxWithdrawalsEntry[];
export type ITxWithdrawals = {
    [rewardAccount: StakeAddressBech32]: Coin;
} | ITxWithdrawalsMap;
export declare function isTxWithdrawalsMap(stuff: any): stuff is ITxWithdrawalsMap;
export declare function isITxWithdrawals(stuff: any): stuff is ITxWithdrawals;
export declare class TxWithdrawals implements ToCbor, ToData {
    readonly subCborRef?: SubCborRef | undefined;
    readonly map: TxWithdrawalsMapBigInt;
    constructor(map: ITxWithdrawals, subCborRef?: SubCborRef | undefined, network?: NetworkT);
    toTotalWitdrawn(): Value;
    toData(version?: ToDataVersion | undefined): DataMap<DataConstr, DataI>;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): TxWithdrawals;
    static fromCborObj(cObj: CborObj): TxWithdrawals;
    toJSON(): {
        [rewardAccount: string]: string;
    };
    toJson(): {
        [rewardAccount: string]: string;
    };
    static fromJson(json: any): TxWithdrawals;
}
export declare function canBeTxWithdrawals(stuff: any): stuff is (ITxWithdrawals | TxWithdrawals);
export declare function forceTxWithdrawals(stuff: TxWithdrawals | ITxWithdrawals): TxWithdrawals;
