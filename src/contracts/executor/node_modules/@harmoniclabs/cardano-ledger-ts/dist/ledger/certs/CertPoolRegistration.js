"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertPoolRegistration = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var roDescr_1 = require("../../utils/roDescr.js");
var CertificateType_1 = require("./CertificateType.js");
var PoolParams_1 = require("../PoolParams.js");
var hashes_1 = require("../../hashes/index.js");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var defaultToDataVersion_1 = require("../../toData/defaultToDataVersion.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var CertPoolRegistration = /** @class */ (function () {
    function CertPoolRegistration(_a, subCborRef) {
        var poolParams = _a.poolParams;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            certType: __assign({ value: CertificateType_1.CertificateType.PoolRegistration }, roDescr_1.roDescr),
            poolParams: __assign({ value: new PoolParams_1.PoolParams(poolParams) }, roDescr_1.roDescr)
        });
    }
    CertPoolRegistration.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        if (version === "v1" || version === "v2")
            return new plutus_data_1.DataConstr(3, [
                // poolId (PPubKeyHash)
                this.poolParams.operator.toData(version),
                // poolVRF
                this.poolParams.vrfKeyHash.toData(version)
            ]);
        return new plutus_data_1.DataConstr(7, [
            // poolId (PPubKeyHash)
            this.poolParams.operator.toData(version),
            // poolVRF
            this.poolParams.vrfKeyHash.toData(version)
        ]);
    };
    CertPoolRegistration.prototype.getRequiredSigners = function () {
        var ownersStr = this.poolParams.owners.map(function (pkh) { return pkh.toString(); });
        var operatorStr = this.poolParams.operator.toString();
        if (!ownersStr.includes(operatorStr))
            ownersStr.push(operatorStr);
        return ownersStr.map(function (hash) { return new hashes_1.Hash28(hash); });
    };
    CertPoolRegistration.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    CertPoolRegistration.prototype.toCborObj = function () {
        return new cbor_1.CborArray(__spreadArray([
            new cbor_1.CborUInt(this.certType)
        ], __read(this.poolParams.toCborObjArray()), false));
    };
    CertPoolRegistration.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 10 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === CertificateType_1.CertificateType.PoolRegistration))
            throw new Error("Invalid cbor for 'CertPoolRegistration'");
        return new CertPoolRegistration({
            poolParams: PoolParams_1.PoolParams.fromCborObjArray(cbor.array.slice(1))
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    CertPoolRegistration.prototype.toJSON = function () { return this.toJson(); };
    CertPoolRegistration.prototype.toJson = function () {
        return {
            certType: (0, CertificateType_1.certTypeToString)(this.certType),
            poolParams: this.poolParams.toJson(),
        };
    };
    return CertPoolRegistration;
}());
exports.CertPoolRegistration = CertPoolRegistration;
