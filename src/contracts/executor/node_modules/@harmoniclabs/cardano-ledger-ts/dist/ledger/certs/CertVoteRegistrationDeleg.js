"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertVoteRegistrationDeleg = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var credentials_1 = require("../../credentials/index.js");
var roDescr_1 = require("../../utils/roDescr.js");
var CertificateType_1 = require("./CertificateType.js");
var DRepLike_1 = require("../../governance/DRep/DRepLike.js");
var DRep_1 = require("../../governance/DRep/DRep.js");
var ints_1 = require("../../utils/ints.js");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var defaultToDataVersion_1 = require("../../toData/defaultToDataVersion.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var CertVoteRegistrationDeleg = /** @class */ (function () {
    function CertVoteRegistrationDeleg(_a, subCborRef) {
        var stakeCredential = _a.stakeCredential, drep = _a.drep, coin = _a.coin;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            certType: __assign({ value: CertificateType_1.CertificateType.VoteRegistrationDeleg }, roDescr_1.roDescr),
            stakeCredential: __assign({ value: stakeCredential }, roDescr_1.roDescr),
            drep: __assign({ value: (0, DRepLike_1.toRealDRep)(drep) }, roDescr_1.roDescr),
            coin: __assign({ value: (0, ints_1.forceBigUInt)(coin) }, roDescr_1.roDescr)
        });
    }
    CertVoteRegistrationDeleg.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        return new plutus_data_1.DataConstr(2, // PCertificate.Delegation
        [
            // delegator (PCredential)
            this.stakeCredential.toData(version),
            // delegatee
            new plutus_data_1.DataConstr(1, // PDelegatee.DelegVote
            [this.drep.toData(version)])
        ]);
    };
    CertVoteRegistrationDeleg.prototype.getRequiredSigners = function () {
        return [this.stakeCredential.hash.clone()];
    };
    CertVoteRegistrationDeleg.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    CertVoteRegistrationDeleg.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.certType),
            this.stakeCredential.toCborObj(),
            this.drep.toCborObj(),
            new cbor_1.CborUInt(this.coin)
        ]);
    };
    CertVoteRegistrationDeleg.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 4 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === CertificateType_1.CertificateType.VoteRegistrationDeleg &&
            cbor.array[3] instanceof cbor_1.CborUInt))
            throw new Error("Invalid cbor for 'CertVoteRegistrationDeleg'");
        return new CertVoteRegistrationDeleg({
            stakeCredential: credentials_1.Credential.fromCborObj(cbor.array[1]),
            drep: (0, DRep_1.drepFromCborObj)(cbor.array[2]),
            coin: cbor.array[3].num
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    CertVoteRegistrationDeleg.prototype.toJSON = function () { return this.toJson(); };
    CertVoteRegistrationDeleg.prototype.toJson = function () {
        return {
            certType: (0, CertificateType_1.certTypeToString)(this.certType),
            stakeCredential: this.stakeCredential.toJson(),
            drep: this.drep.toJson(),
            coin: this.coin.toString()
        };
    };
    return CertVoteRegistrationDeleg;
}());
exports.CertVoteRegistrationDeleg = CertVoteRegistrationDeleg;
