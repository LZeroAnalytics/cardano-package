"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.certificateFromCertificateLike = exports.certificateFromCborObj = exports.isCertificate = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var CertAuthCommitteeHot_1 = require("./CertAuthCommitteeHot.js");
var CertGenesisKeyDelegation_1 = require("./CertGenesisKeyDelegation.js");
var CertPoolRegistration_1 = require("./CertPoolRegistration.js");
var CertPoolRetirement_1 = require("./CertPoolRetirement.js");
var CertRegistrationDeposit_1 = require("./CertRegistrationDeposit.js");
var CertRegistrationDrep_1 = require("./CertRegistrationDrep.js");
var CertResignCommitteeCold_1 = require("./CertResignCommitteeCold.js");
var CertStakeDeRegistration_1 = require("./CertStakeDeRegistration.js");
var CertStakeDelegation_1 = require("./CertStakeDelegation.js");
var CertStakeRegistration_1 = require("./CertStakeRegistration.js");
var CertStakeVoteDeleg_1 = require("./CertStakeVoteDeleg.js");
var CertStakeVoteRegistrationDeleg_1 = require("./CertStakeVoteRegistrationDeleg.js");
var CertUnRegistrationDeposit_1 = require("./CertUnRegistrationDeposit.js");
var CertUnRegistrationDrep_1 = require("./CertUnRegistrationDrep.js");
var CertUpdateDrep_1 = require("./CertUpdateDrep.js");
var CertVoteDeleg_1 = require("./CertVoteDeleg.js");
var CertVoteRegistrationDeleg_1 = require("./CertVoteRegistrationDeleg.js");
var CertificateType_1 = require("./CertificateType.js");
var MoveInstantRewardsCert_1 = require("./MoveInstantRewardsCert.js");
var CertStakeRegistrationDeleg_1 = require("./CertStakeRegistrationDeleg.js");
function isCertificate(stuff) {
    return (stuff instanceof CertStakeRegistration_1.CertStakeRegistration ||
        stuff instanceof CertStakeDeRegistration_1.CertStakeDeRegistration ||
        stuff instanceof CertStakeDelegation_1.CertStakeDelegation ||
        stuff instanceof CertPoolRegistration_1.CertPoolRegistration ||
        stuff instanceof CertPoolRetirement_1.CertPoolRetirement ||
        stuff instanceof CertGenesisKeyDelegation_1.CertGenesisKeyDelegation ||
        stuff instanceof MoveInstantRewardsCert_1.MoveInstantRewardsCert ||
        stuff instanceof CertRegistrationDeposit_1.CertRegistrationDeposit ||
        stuff instanceof CertUnRegistrationDeposit_1.CertUnRegistrationDeposit ||
        stuff instanceof CertVoteDeleg_1.CertVoteDeleg ||
        stuff instanceof CertStakeVoteDeleg_1.CertStakeVoteDeleg ||
        stuff instanceof CertStakeRegistrationDeleg_1.CertStakeRegistrationDeleg ||
        stuff instanceof CertVoteRegistrationDeleg_1.CertVoteRegistrationDeleg ||
        stuff instanceof CertStakeVoteRegistrationDeleg_1.CertStakeVoteRegistrationDeleg ||
        stuff instanceof CertAuthCommitteeHot_1.CertAuthCommitteeHot ||
        stuff instanceof CertResignCommitteeCold_1.CertResignCommitteeCold ||
        stuff instanceof CertRegistrationDrep_1.CertRegistrationDrep ||
        stuff instanceof CertUnRegistrationDrep_1.CertUnRegistrationDrep ||
        stuff instanceof CertUpdateDrep_1.CertUpdateDrep);
}
exports.isCertificate = isCertificate;
function certificateFromCborObj(cbor) {
    if (!(cbor instanceof cbor_1.CborArray &&
        cbor.array.length > 0 &&
        cbor.array[0] instanceof cbor_1.CborUInt))
        throw new Error("invalid cbor for 'Certificate'");
    var certType = Number(cbor.array[0].num);
    if (!(0, CertificateType_1.isCertificateType)(certType))
        throw new Error("invalid certType for 'Certificate'; " + certType.toString());
    switch (certType) {
        case CertificateType_1.CertificateType.StakeRegistration: return CertStakeRegistration_1.CertStakeRegistration.fromCborObj(cbor);
        case CertificateType_1.CertificateType.StakeDeRegistration: return CertStakeDeRegistration_1.CertStakeDeRegistration.fromCborObj(cbor);
        case CertificateType_1.CertificateType.StakeDelegation: return CertStakeDelegation_1.CertStakeDelegation.fromCborObj(cbor);
        case CertificateType_1.CertificateType.PoolRegistration: return CertPoolRegistration_1.CertPoolRegistration.fromCborObj(cbor);
        case CertificateType_1.CertificateType.PoolRetirement: return CertPoolRetirement_1.CertPoolRetirement.fromCborObj(cbor);
        case CertificateType_1.CertificateType.RegistrationDeposit: return CertRegistrationDeposit_1.CertRegistrationDeposit.fromCborObj(cbor);
        case CertificateType_1.CertificateType.UnRegistrationDeposit: return CertUnRegistrationDeposit_1.CertUnRegistrationDeposit.fromCborObj(cbor);
        case CertificateType_1.CertificateType.VoteDeleg: return CertVoteDeleg_1.CertVoteDeleg.fromCborObj(cbor);
        case CertificateType_1.CertificateType.StakeVoteDeleg: return CertStakeVoteDeleg_1.CertStakeVoteDeleg.fromCborObj(cbor);
        case CertificateType_1.CertificateType.StakeRegistrationDeleg: return CertStakeRegistrationDeleg_1.CertStakeRegistrationDeleg.fromCborObj(cbor);
        case CertificateType_1.CertificateType.VoteRegistrationDeleg: return CertVoteRegistrationDeleg_1.CertVoteRegistrationDeleg.fromCborObj(cbor);
        case CertificateType_1.CertificateType.StakeVoteRegistrationDeleg: return CertStakeVoteRegistrationDeleg_1.CertStakeVoteRegistrationDeleg.fromCborObj(cbor);
        case CertificateType_1.CertificateType.AuthCommitteeHot: return CertAuthCommitteeHot_1.CertAuthCommitteeHot.fromCborObj(cbor);
        case CertificateType_1.CertificateType.ResignCommitteeCold: return CertResignCommitteeCold_1.CertResignCommitteeCold.fromCborObj(cbor);
        case CertificateType_1.CertificateType.RegistrationDrep: return CertRegistrationDrep_1.CertRegistrationDrep.fromCborObj(cbor);
        case CertificateType_1.CertificateType.UnRegistrationDrep: return CertUnRegistrationDrep_1.CertUnRegistrationDrep.fromCborObj(cbor);
        case CertificateType_1.CertificateType.UpdateDrep: return CertUpdateDrep_1.CertUpdateDrep.fromCborObj(cbor);
        case CertificateType_1.CertificateType.GenesisKeyDelegation: return CertGenesisKeyDelegation_1.CertGenesisKeyDelegation.fromCborObj(cbor);
        case CertificateType_1.CertificateType.MoveInstantRewards: return MoveInstantRewardsCert_1.MoveInstantRewardsCert.fromCborObj(cbor);
        default: throw new Error("unknown cert type");
    }
}
exports.certificateFromCborObj = certificateFromCborObj;
function certificateFromCertificateLike(like) {
    switch (like.certType) {
        case CertificateType_1.CertificateType.StakeRegistration: return new CertStakeRegistration_1.CertStakeRegistration(like);
        case CertificateType_1.CertificateType.StakeDeRegistration: return new CertStakeDeRegistration_1.CertStakeDeRegistration(like);
        case CertificateType_1.CertificateType.StakeDelegation: return new CertStakeDelegation_1.CertStakeDelegation(like);
        case CertificateType_1.CertificateType.PoolRegistration: return new CertPoolRegistration_1.CertPoolRegistration(like);
        case CertificateType_1.CertificateType.PoolRetirement: return new CertPoolRetirement_1.CertPoolRetirement(like);
        case CertificateType_1.CertificateType.RegistrationDeposit: return new CertRegistrationDeposit_1.CertRegistrationDeposit(like);
        case CertificateType_1.CertificateType.UnRegistrationDeposit: return new CertUnRegistrationDeposit_1.CertUnRegistrationDeposit(like);
        case CertificateType_1.CertificateType.VoteDeleg: return new CertVoteDeleg_1.CertVoteDeleg(like);
        case CertificateType_1.CertificateType.StakeVoteDeleg: return new CertStakeVoteDeleg_1.CertStakeVoteDeleg(like);
        case CertificateType_1.CertificateType.StakeRegistrationDeleg: return new CertStakeRegistrationDeleg_1.CertStakeRegistrationDeleg(like);
        case CertificateType_1.CertificateType.StakeRegistration: return new CertStakeRegistration_1.CertStakeRegistration(like);
        case CertificateType_1.CertificateType.VoteRegistrationDeleg: return new CertVoteRegistrationDeleg_1.CertVoteRegistrationDeleg(like);
        case CertificateType_1.CertificateType.StakeVoteRegistrationDeleg: return new CertStakeVoteRegistrationDeleg_1.CertStakeVoteRegistrationDeleg(like);
        case CertificateType_1.CertificateType.AuthCommitteeHot: return new CertAuthCommitteeHot_1.CertAuthCommitteeHot(like);
        case CertificateType_1.CertificateType.ResignCommitteeCold: return new CertResignCommitteeCold_1.CertResignCommitteeCold(like);
        case CertificateType_1.CertificateType.RegistrationDrep: return new CertRegistrationDrep_1.CertRegistrationDrep(like);
        case CertificateType_1.CertificateType.UnRegistrationDrep: return new CertUnRegistrationDrep_1.CertUnRegistrationDrep(like);
        case CertificateType_1.CertificateType.UpdateDrep: return new CertUpdateDrep_1.CertUpdateDrep(like);
        case CertificateType_1.CertificateType.GenesisKeyDelegation: return new CertGenesisKeyDelegation_1.CertGenesisKeyDelegation(like);
        case CertificateType_1.CertificateType.MoveInstantRewards: return new MoveInstantRewardsCert_1.MoveInstantRewardsCert(like);
    }
}
exports.certificateFromCertificateLike = certificateFromCertificateLike;
