"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VotingProcedure = exports.IVotingProcedure = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var roDescr_1 = require("../utils/roDescr.js");
var Anchor_1 = require("./Anchor.js");
var Vote_1 = require("./Vote.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function IVotingProcedure(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && ((0, Vote_1.isVote)(stuff.vote) && (stuff.anchor === undefined ||
        (0, Anchor_1.isIAnchor)(stuff.anchor)));
}
exports.IVotingProcedure = IVotingProcedure;
var VotingProcedure = /** @class */ (function () {
    function VotingProcedure(_a, subCborRef) {
        var vote = _a.vote, anchor = _a.anchor;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            vote: __assign({ value: vote }, roDescr_1.roDescr),
            anchor: __assign({ value: anchor ? new Anchor_1.Anchor(anchor) : undefined }, roDescr_1.roDescr)
        });
    }
    VotingProcedure.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    VotingProcedure.prototype.toCborObj = function () {
        var _a, _b;
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            (0, Vote_1.voteToCborObj)(this.vote),
            (_b = (_a = this.anchor) === null || _a === void 0 ? void 0 : _a.toCborObj()) !== null && _b !== void 0 ? _b : new cbor_1.CborSimple(null)
        ]);
    };
    return VotingProcedure;
}());
exports.VotingProcedure = VotingProcedure;
