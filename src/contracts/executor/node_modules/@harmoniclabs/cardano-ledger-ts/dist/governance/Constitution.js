"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constitution = exports.isIConstitution = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var hashes_1 = require("../hashes/index.js");
var Anchor_1 = require("./Anchor.js");
var roDescr_1 = require("../utils/roDescr.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var maybeData_1 = require("../utils/maybeData.js");
function isIConstitution(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && ((0, Anchor_1.isIAnchor)(stuff.anchor) &&
        (stuff.scriptHash === undefined || (0, hashes_1.canBeHash28)(stuff.scriptHash)));
}
exports.isIConstitution = isIConstitution;
var Constitution = /** @class */ (function () {
    function Constitution(_a, subCborRef) {
        var anchor = _a.anchor, scriptHash = _a.scriptHash;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            anchor: __assign({ value: new Anchor_1.Anchor(anchor) }, roDescr_1.roDescr),
            scriptHash: __assign({ value: (0, hashes_1.canBeHash28)(scriptHash) ? new hashes_1.Hash28(scriptHash) : undefined }, roDescr_1.roDescr)
        });
    }
    Constitution.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    Constitution.prototype.toCborObj = function () {
        var _a, _b;
        return new cbor_1.CborArray([
            this.anchor.toCborObj(),
            (_b = (_a = this.scriptHash) === null || _a === void 0 ? void 0 : _a.toCborObj()) !== null && _b !== void 0 ? _b : new cbor_1.CborSimple(null)
        ]);
    };
    Constitution.prototype.toData = function (v) {
        var _a;
        v = "v3"; // only one for constitution so far
        return new plutus_data_1.DataConstr(0, [
            (0, maybeData_1.maybeData)((_a = this.scriptHash) === null || _a === void 0 ? void 0 : _a.toData(v))
        ]);
    };
    return Constitution;
}());
exports.Constitution = Constitution;
