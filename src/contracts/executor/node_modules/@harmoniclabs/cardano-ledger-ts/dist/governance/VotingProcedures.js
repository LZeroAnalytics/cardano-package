"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VotingProcedures = exports.isIVotingProceduresEntry = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var roDescr_1 = require("../utils/roDescr.js");
var Voter_1 = require("./Voter.js");
var VotingProcedure_1 = require("./VotingProcedure.js");
var TxOutRef_1 = require("../tx/body/output/TxOutRef.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
function isIVotingProceduresEntry(stuff) {
    if (!(0, obj_utils_1.isObject)(stuff))
        return false;
    return ((0, Voter_1.isIVoter)(stuff.voter) &&
        Array.isArray(stuff.votes) &&
        stuff.votes.every(function (elem) {
            return ((0, obj_utils_1.isObject)(elem) &&
                (0, TxOutRef_1.isITxOutRef)(elem.govActionId) &&
                (0, VotingProcedure_1.IVotingProcedure)(elem.vote));
        }));
}
exports.isIVotingProceduresEntry = isIVotingProceduresEntry;
var VotingProcedures = /** @class */ (function () {
    function VotingProcedures(procedures, subCborRef) {
        this.subCborRef = subCborRef;
        Object.defineProperty(this, "procedures", __assign({ value: procedures.map(function (_a) {
                var voter = _a.voter, votes = _a.votes;
                return ({
                    voter: new Voter_1.Voter(voter),
                    votes: votes.map(function (_a) {
                        var govActionId = _a.govActionId, vote = _a.vote;
                        return ({
                            govActionId: new TxOutRef_1.TxOutRef(govActionId),
                            vote: new VotingProcedure_1.VotingProcedure(vote)
                        });
                    })
                });
            }) }, roDescr_1.roDescr));
    }
    VotingProcedures.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    VotingProcedures.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return new cbor_1.CborMap(this.procedures.map(function (_a) {
            var voter = _a.voter, votes = _a.votes;
            return ({
                k: voter.toCborObj(),
                v: new cbor_1.CborMap(votes.map(function (_a) {
                    var govActionId = _a.govActionId, vote = _a.vote;
                    return ({
                        k: govActionId.toCborObj(),
                        v: new VotingProcedure_1.VotingProcedure(vote).toCborObj()
                    });
                }))
            });
        }));
    };
    return VotingProcedures;
}());
exports.VotingProcedures = VotingProcedures;
