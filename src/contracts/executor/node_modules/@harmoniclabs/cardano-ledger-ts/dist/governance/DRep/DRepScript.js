"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DRepScript = exports.isIDRepScript = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var hashes_1 = require("../../hashes/index.js");
var roDescr_1 = require("../../utils/roDescr.js");
var DRepType_1 = require("./DRepType.js");
var credentials_1 = require("../../credentials/index.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var defaultToDataVersion_1 = require("../../toData/defaultToDataVersion.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
function isIDRepScript(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (0, hashes_1.canBeHash28)(stuff.hash);
}
exports.isIDRepScript = isIDRepScript;
var DRepScript = /** @class */ (function () {
    function DRepScript(_a, subCborRef) {
        var hash = _a.hash;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            drepType: __assign({ value: DRepType_1.DRepType.Script }, roDescr_1.roDescr),
            hash: __assign({ value: new credentials_1.ValidatorHash(hash) }, roDescr_1.roDescr)
        });
    }
    DRepScript.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        if (version === "v1" || version === "v2")
            throw new Error("DRep only supported after v3");
        return new plutus_data_1.DataConstr(0, // PDRep.DRep
        [credentials_1.Credential.script(this.hash).toData(version)]);
    };
    DRepScript.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    DRepScript.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.drepType),
            this.hash.toCborObj()
        ]);
    };
    DRepScript.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === DRepType_1.DRepType.Script))
            throw new Error("Invalid cbor for 'DRepScript'");
        return new DRepScript({
            hash: hashes_1.Hash28.fromCborObj(cbor.array[1])
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    DRepScript.prototype.toJSON = function () { return this.toJson(); };
    DRepScript.prototype.toJson = function () {
        return {
            drepType: (0, DRepType_1.drepTypeToString)(this.drepType),
            hash: this.hash.toString()
        };
    };
    return DRepScript;
}());
exports.DRepScript = DRepScript;
