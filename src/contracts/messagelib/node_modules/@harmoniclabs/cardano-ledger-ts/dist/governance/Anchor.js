"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Anchor = exports.isIAnchor = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var hashes_1 = require("../hashes/index.js");
var roDescr_1 = require("../utils/roDescr.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var getSubCborRef_1 = require("../utils/getSubCborRef.js");
function isIAnchor(stuff) {
    return (0, obj_utils_1.isObject)(stuff) && (typeof stuff.url === "string" &&
        stuff.url.length <= 128 &&
        (0, hashes_1.canBeHash32)(stuff.anchorDataHash));
}
exports.isIAnchor = isIAnchor;
var Anchor = /** @class */ (function () {
    function Anchor(_a, subCborRef) {
        var url = _a.url, anchorDataHash = _a.anchorDataHash;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            url: __assign({ value: String(url) }, roDescr_1.roDescr),
            anchorDataHash: __assign({ value: new hashes_1.Hash32(anchorDataHash) }, roDescr_1.roDescr)
        });
    }
    Anchor.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    Anchor.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            new cbor_1.CborText(this.url),
            this.anchorDataHash.toCborObj()
        ]);
    };
    Anchor.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 2 &&
            cbor.array[0] instanceof cbor_1.CborText))
            throw new Error("invalid cbor for Anchor");
        return new Anchor({
            url: cbor.array[0].text,
            anchorDataHash: hashes_1.Hash32.fromCborObj(cbor.array[1])
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    Anchor.prototype.toJSON = function () { return this.toJson(); };
    Anchor.prototype.toJson = function () {
        return {
            url: this.url,
            anchorDataHash: this.anchorDataHash.toString()
        };
    };
    return Anchor;
}());
exports.Anchor = Anchor;
