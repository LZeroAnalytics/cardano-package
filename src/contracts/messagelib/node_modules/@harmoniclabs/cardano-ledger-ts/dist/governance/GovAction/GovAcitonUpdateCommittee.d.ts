import { CborArray, CborPositiveRational, CborString, SubCborRef, ToCbor } from "@harmoniclabs/cbor";
import { Epoch } from "../../ledger/index.js";
import { Rational } from "../../ledger/protocol/Rational.js";
import { ITxOutRef, TxOutRef } from "../../tx/index.js";
import { IGovAction } from "./IGovAction.js";
import { GovActionType } from "./GovActionType.js";
import { Credential } from "../../credentials/index.js";
import { DataConstr, ToData } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface INewCommitteeEntry {
    coldCredential: Credential;
    epoch: Epoch;
}
export declare function isINewCommitteeEntry(stuff: any): stuff is INewCommitteeEntry;
export interface INewCommitteeEntryBI {
    coldCredential: Credential;
    epoch: bigint;
}
export interface IGovActionUpdateCommittee {
    govActionId?: ITxOutRef | undefined;
    toRemove: Credential[];
    toAdd: INewCommitteeEntry[];
    threshold: Rational;
}
export declare function isIGovActionUpdateCommittee(stuff: any): stuff is IGovActionUpdateCommittee;
export declare class GovActionUpdateCommittee implements IGovAction, IGovActionUpdateCommittee, ToCbor, ToData {
    readonly subCborRef?: SubCborRef | undefined;
    readonly govActionType: GovActionType.UpdateCommittee;
    readonly govActionId: TxOutRef | undefined;
    readonly toRemove: Credential[];
    readonly toAdd: INewCommitteeEntryBI[];
    readonly threshold: CborPositiveRational;
    constructor({ govActionId, toRemove, toAdd, threshold }: IGovActionUpdateCommittee, subCborRef?: SubCborRef | undefined);
    toCbor(): CborString;
    toCborObj(): CborArray;
    toData(v?: ToDataVersion): DataConstr;
}
