"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxOutRef = exports.UTxO = exports.isIUTxO = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var InvalidCborFormatError_1 = require("../../../utils/InvalidCborFormatError.js");
var TxOut_1 = require("./TxOut.js");
var TxOutRef_1 = require("./TxOutRef.js");
Object.defineProperty(exports, "TxOutRef", { enumerable: true, get: function () { return TxOutRef_1.TxOutRef; } });
var getSubCborRef_1 = require("../../../utils/getSubCborRef.js");
function isIUTxO(stuff) {
    return ((0, obj_utils_1.isObject)(stuff) &&
        (0, obj_utils_1.hasOwn)(stuff, "utxoRef") && (0, TxOutRef_1.isITxOutRef)(stuff.utxoRef) &&
        (0, obj_utils_1.hasOwn)(stuff, "resolved") && (0, TxOut_1.isITxOut)(stuff.resolved));
}
exports.isIUTxO = isIUTxO;
var UTxO = /** @class */ (function () {
    function UTxO(_a, subCborRef) {
        var utxoRef = _a.utxoRef, resolved = _a.resolved;
        this.subCborRef = subCborRef;
        (0, obj_utils_1.defineReadOnlyProperty)(this, "utxoRef", utxoRef instanceof TxOutRef_1.TxOutRef ? utxoRef : new TxOutRef_1.TxOutRef(utxoRef));
        (0, obj_utils_1.defineReadOnlyProperty)(this, "resolved", resolved instanceof TxOut_1.TxOut ? resolved : new TxOut_1.TxOut(resolved));
    }
    UTxO.prototype.clone = function () {
        return new UTxO(this);
    };
    UTxO.prototype.toData = function (version) {
        return new plutus_data_1.DataConstr(0, // PTxInInfo only constructor
        [
            this.utxoRef.toData(version),
            this.resolved.toData(version) // PTxOut based on specified version
        ]);
    };
    UTxO.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    UTxO.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            this.utxoRef.toCborObj(),
            this.resolved.toCborObj()
        ]);
    };
    UTxO.fromCbor = function (cStr) {
        return UTxO.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    UTxO.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("UTxO");
        var _a = __read(cObj.array, 2), ref = _a[0], res = _a[1];
        var utxoRef;
        var resolved;
        if (ref === undefined)
            throw new InvalidCborFormatError_1.InvalidCborFormatError("UTxO");
        if (res === undefined)
            throw new InvalidCborFormatError_1.InvalidCborFormatError("UTxO", "if you are trying to parse only a TxOutRef instead (<hex>#<index>) you should use `TxOutRef.fromCborObj`");
        utxoRef = TxOutRef_1.TxOutRef.fromCborObj(ref);
        resolved = TxOut_1.TxOut.fromCborObj(res);
        return new UTxO({
            utxoRef: utxoRef,
            resolved: resolved
        }, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    UTxO.prototype.toJSON = function () { return this.toJson(); };
    UTxO.prototype.toJson = function () {
        return {
            utxoRef: this.utxoRef.toJson(),
            resolved: this.resolved.toJson()
        };
    };
    UTxO.sort = function (a, b) {
        return TxOutRef_1.TxOutRef.sort(a.utxoRef, b.utxoRef);
    };
    return UTxO;
}());
exports.UTxO = UTxO;
