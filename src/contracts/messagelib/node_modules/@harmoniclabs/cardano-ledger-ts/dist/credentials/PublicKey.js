"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicKey = void 0;
var crypto_1 = require("@harmoniclabs/crypto");
var Hash32_1 = require("../hashes/Hash32/Hash32.js");
var PubKeyHash_1 = require("./PubKeyHash.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var PublicKey = /** @class */ (function (_super) {
    __extends(PublicKey, _super);
    function PublicKey(pubKey, subCborRef) {
        var _this = _super.call(this, pubKey) || this;
        _this.subCborRef = subCborRef;
        var _hash = undefined;
        (0, obj_utils_1.definePropertyIfNotPresent)(_this, "hash", {
            get: function () {
                if (_hash !== undefined && _hash instanceof PubKeyHash_1.PubKeyHash)
                    return _hash.clone();
                _hash = new PubKeyHash_1.PubKeyHash(new Uint8Array((0, crypto_1.blake2b_224)(_this.toBuffer())));
                return _hash.clone();
            },
            set: function () { },
            configurable: false,
            enumerable: true
        });
        return _this;
    }
    PublicKey.fromCbor = function (cStr) {
        return new PublicKey(Hash32_1.Hash32.fromCbor(cStr).toBuffer());
    };
    PublicKey.fromCborObj = function (cObj) {
        return new PublicKey(Hash32_1.Hash32.fromCborObj(cObj).toBuffer());
    };
    return PublicKey;
}(Hash32_1.Hash32));
exports.PublicKey = PublicKey;
