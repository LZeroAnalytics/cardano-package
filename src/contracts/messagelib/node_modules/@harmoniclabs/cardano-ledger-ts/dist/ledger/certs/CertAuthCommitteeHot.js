"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertAuthCommitteeHot = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var credentials_1 = require("../../credentials/index.js");
var roDescr_1 = require("../../utils/roDescr.js");
var CertificateType_1 = require("./CertificateType.js");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var defaultToDataVersion_1 = require("../../toData/defaultToDataVersion.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var CertAuthCommitteeHot = /** @class */ (function () {
    function CertAuthCommitteeHot(_a, subCborRef) {
        var coldCredential = _a.coldCredential, hotCredential = _a.hotCredential;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            certType: __assign({ value: CertificateType_1.CertificateType.AuthCommitteeHot }, roDescr_1.roDescr),
            coldCredential: __assign({ value: coldCredential }, roDescr_1.roDescr),
            hotCredential: __assign({ value: hotCredential }, roDescr_1.roDescr),
        });
    }
    CertAuthCommitteeHot.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        if (version === "v1" || version === "v2")
            throw new Error("CertAuthCommiteeHot only allowed after v3");
        return new plutus_data_1.DataConstr(9, // PCertificate.CommitteeHotAuthorization
        [
            // cold
            this.coldCredential.toData(version),
            // hot
            this.hotCredential.toData(version)
        ]);
    };
    CertAuthCommitteeHot.prototype.getRequiredSigners = function () {
        return [this.coldCredential.hash.clone()];
    };
    CertAuthCommitteeHot.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    CertAuthCommitteeHot.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.certType),
            this.coldCredential.toCborObj(),
            this.hotCredential.toCborObj()
        ]);
    };
    CertAuthCommitteeHot.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 3 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === CertificateType_1.CertificateType.AuthCommitteeHot))
            throw new Error("Invalid cbor for 'CertAuthCommitteeHot'");
        return new CertAuthCommitteeHot({
            coldCredential: credentials_1.Credential.fromCborObj(cbor.array[1]),
            hotCredential: credentials_1.Credential.fromCborObj(cbor.array[2])
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    CertAuthCommitteeHot.prototype.toJSON = function () { return this.toJson(); };
    CertAuthCommitteeHot.prototype.toJson = function () {
        return {
            certType: (0, CertificateType_1.certTypeToString)(this.certType),
            coldCredential: this.coldCredential.toJson(),
            hotCredential: this.hotCredential.toJson()
        };
    };
    return CertAuthCommitteeHot;
}());
exports.CertAuthCommitteeHot = CertAuthCommitteeHot;
