"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertPoolRetirement = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var roDescr_1 = require("../../utils/roDescr.js");
var CertificateType_1 = require("./CertificateType.js");
var hashes_1 = require("../../hashes/index.js");
var ints_1 = require("../../utils/ints.js");
var plutus_data_1 = require("@harmoniclabs/plutus-data");
var defaultToDataVersion_1 = require("../../toData/defaultToDataVersion.js");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var CertPoolRetirement = /** @class */ (function () {
    function CertPoolRetirement(_a, subCborRef) {
        var poolHash = _a.poolHash, epoch = _a.epoch;
        this.subCborRef = subCborRef;
        Object.defineProperties(this, {
            certType: __assign({ value: CertificateType_1.CertificateType.PoolRetirement }, roDescr_1.roDescr),
            poolHash: __assign({ value: new hashes_1.Hash28(poolHash) }, roDescr_1.roDescr),
            epoch: __assign({ value: (0, ints_1.forceBigUInt)(epoch) }, roDescr_1.roDescr)
        });
    }
    CertPoolRetirement.prototype.toData = function (version) {
        version = (0, defaultToDataVersion_1.definitelyToDataVersion)(version);
        var fields = [
            this.poolHash.toData(version),
            new plutus_data_1.DataI(this.epoch)
        ];
        if (version === "v1" || version === "v2")
            return new plutus_data_1.DataConstr(4, // PDCert.PoolRetire
            fields);
        return new plutus_data_1.DataConstr(8, // PCertificate.PoolRetire
        fields);
    };
    CertPoolRetirement.prototype.getRequiredSigners = function () {
        return [this.poolHash.clone()];
    };
    CertPoolRetirement.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    CertPoolRetirement.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.certType),
            this.poolHash.toCborObj(),
            new cbor_1.CborUInt(this.epoch)
        ]);
    };
    CertPoolRetirement.fromCborObj = function (cbor) {
        if (!(cbor instanceof cbor_1.CborArray &&
            cbor.array.length >= 3 &&
            cbor.array[0] instanceof cbor_1.CborUInt &&
            Number(cbor.array[0].num) === CertificateType_1.CertificateType.PoolRetirement &&
            cbor.array[2] instanceof cbor_1.CborUInt))
            throw new Error("Invalid cbor for 'CertPoolRetirement'");
        return new CertPoolRetirement({
            poolHash: hashes_1.Hash28.fromCborObj(cbor.array[1]),
            epoch: cbor.array[2].num
        }, (0, getSubCborRef_1.getSubCborRef)(cbor));
    };
    CertPoolRetirement.prototype.toJSON = function () { return this.toJson(); };
    CertPoolRetirement.prototype.toJson = function () {
        return {
            certType: (0, CertificateType_1.certTypeToString)(this.certType),
            poolHash: this.poolHash.toString(),
            epoch: this.epoch.toString()
        };
    };
    return CertPoolRetirement;
}());
exports.CertPoolRetirement = CertPoolRetirement;
