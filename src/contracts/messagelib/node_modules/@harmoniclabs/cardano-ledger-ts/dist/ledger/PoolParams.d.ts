import { Coin } from "./Coin.js";
import { PubKeyHash } from "../credentials/PubKeyHash.js";
import { CanBeHash32, Hash32 } from "../hashes/Hash32/Hash32.js";
import { PoolKeyHash } from "../hashes/Hash28/PoolKeyHash.js";
import { VRFKeyHash } from "../hashes/Hash32/VRFKeyHash.js";
import { CborPositiveRational, CborObj } from "@harmoniclabs/cbor";
import { CanBeHash28 } from "../hashes/index.js";
import { PoolRelay } from "./PoolRelay.js";
import { Rational } from "./protocol/Rational.js";
import { StakeAddress } from "./StakeAddress.js";
export interface IPoolParamsMetadata {
    poolMetadataUrl: string;
    hash: CanBeHash32;
}
export declare function isIPoolParamsMetadata(stuff: any): stuff is IPoolParamsMetadata;
export interface ITypedPoolParamsMetadata {
    poolMetadataUrl: string;
    hash: Hash32;
}
export declare function typedPoolParamsMetadata({ poolMetadataUrl, hash }: IPoolParamsMetadata): ITypedPoolParamsMetadata;
export interface IPoolParams {
    operator: CanBeHash28;
    vrfKeyHash: CanBeHash32;
    pledge: Coin;
    cost: Coin;
    margin: Rational;
    rewardAccount: StakeAddress | CanBeHash28;
    owners: CanBeHash28[];
    relays: PoolRelay[];
    metadata?: IPoolParamsMetadata;
}
export interface ITypedPoolParams {
    operator: PoolKeyHash;
    vrfKeyHash: VRFKeyHash;
    pledge: bigint;
    cost: bigint;
    margin: CborPositiveRational;
    rewardAccount: StakeAddress;
    owners: PubKeyHash[];
    relays: PoolRelay[];
    metadata?: ITypedPoolParamsMetadata;
}
export declare class PoolParams implements ITypedPoolParams {
    readonly operator: PoolKeyHash;
    readonly vrfKeyHash: VRFKeyHash;
    readonly pledge: bigint;
    readonly cost: bigint;
    readonly margin: CborPositiveRational;
    readonly rewardAccount: StakeAddress;
    readonly owners: PubKeyHash[];
    readonly relays: PoolRelay[];
    readonly metadata?: ITypedPoolParamsMetadata;
    constructor(params: IPoolParams);
    toCborObjArray(): CborObj[];
    static fromCborObjArray([_operator, _vrfKeyHash, _pledge, _cost, _margin, _rewAccount, _owners, _relays, _metadata]: CborObj[]): PoolParams;
    toJSON(): {
        operator: string;
        vrfKeyHash: string;
        pledge: string;
        cost: string;
        margin: number;
        rewardAccount: StakeAddress<import("./StakeAddress.js").StakeAddressType>;
        owners: string[];
        relays: ({
            type: string;
            port: number | undefined;
            ipv4: string | undefined;
            ipv6: string | undefined;
            dnsName?: undefined;
        } | {
            type: string;
            port: number | undefined;
            dnsName: string;
            ipv4?: undefined;
            ipv6?: undefined;
        } | {
            type: string;
            dnsName: string;
            port?: undefined;
            ipv4?: undefined;
            ipv6?: undefined;
        })[];
        metadata: {
            poolMetadataUrl: string;
            hash: string;
        } | undefined;
    };
    toJson(): {
        operator: string;
        vrfKeyHash: string;
        pledge: string;
        cost: string;
        margin: number;
        rewardAccount: StakeAddress<import("./StakeAddress.js").StakeAddressType>;
        owners: string[];
        relays: ({
            type: string;
            port: number | undefined;
            ipv4: string | undefined;
            ipv6: string | undefined;
            dnsName?: undefined;
        } | {
            type: string;
            port: number | undefined;
            dnsName: string;
            ipv4?: undefined;
            ipv6?: undefined;
        } | {
            type: string;
            dnsName: string;
            port?: undefined;
            ipv4?: undefined;
            ipv6?: undefined;
        })[];
        metadata: {
            poolMetadataUrl: string;
            hash: string;
        } | undefined;
    };
}
