import { ToCbor, CborObj, CborString, CanBeCborString, SubCborRef } from "@harmoniclabs/cbor";
import { byte } from "@harmoniclabs/crypto";
import { ToData, Data } from "@harmoniclabs/plutus-data";
import { Credential, StakeCredentials } from "../credentials/index.js";
import { NetworkT } from "./Network.js";
import { XPrv } from "@harmoniclabs/bip32_ed25519";
import { ToDataVersion } from "../toData/defaultToDataVersion.js";
export type AddressStr = `${"addr1" | "addr_test1"}${string}`;
export declare function isAddressStr(stuff: any): stuff is AddressStr;
export type AddressType = "base" | "pointer" | "enterprise" | "bootstrap" | "unknown";
/**
 * shelley specification in cardano-ledger; page 113
 */
export declare class Address implements ToData, ToCbor {
    readonly subCborRef?: SubCborRef | undefined;
    readonly network: NetworkT;
    readonly paymentCreds: Credential;
    readonly stakeCreds?: StakeCredentials;
    readonly type: AddressType;
    static mainnet(paymentCreds: Credential, stakeCreds?: StakeCredentials, type?: AddressType): Address;
    static testnet(paymentCreds: Credential, stakeCreds?: StakeCredentials, type?: AddressType): Address;
    constructor(network: NetworkT, paymentCreds: Credential, stakeCreds?: StakeCredentials, type?: AddressType, subCborRef?: SubCborRef | undefined);
    clone(): Address;
    static get fake(): Address;
    toData(version?: ToDataVersion): Data;
    static fromData(data: Data, network?: NetworkT): Address;
    toBytes(): byte[];
    static fromBytes(bs: byte[] | string | Uint8Array, subCborRef?: SubCborRef): Address;
    toBuffer(): Uint8Array;
    static fromBuffer(buff: Uint8Array | string, subCborRef?: SubCborRef): Address;
    /**
     * gets the standard address for single address wallets
     *
     * payment key at path "m/1852'/1815'/0'/0/0"
     * stake key at path   "m/1852'/1815'/0'/2/0"
    */
    static fromXPrv(xprv: XPrv, network?: NetworkT): Address;
    /**
     * generates an `XPrv` from entropy and calls `Addres.fromXPrv`
     *
     * gets the standard address for single address wallets
     *
     * payment key at path "m/1852'/1815'/0'/0/0"
     * stake key at path   "m/1852'/1815'/0'/2/0"
    */
    static fromEntropy(entropy: Uint8Array | string, network?: NetworkT): Address;
    toCborObj(): CborObj;
    static fromCborObj(buff: CborObj): Address;
    toCbor(): CborString;
    static fromCbor(cbor: CanBeCborString): Address;
    toString(): AddressStr;
    static fromBech32(addr: AddressStr): Address;
    static fromString(addr: string): Address;
    toJSON(): `addr1${string}` | `addr_test1${string}`;
    toJson(): `addr1${string}` | `addr_test1${string}`;
}
