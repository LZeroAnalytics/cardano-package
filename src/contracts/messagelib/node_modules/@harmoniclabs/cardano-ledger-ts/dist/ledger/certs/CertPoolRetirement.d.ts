import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { Epoch } from "../Epoch.js";
import { CanBeHash28, Hash28 } from "../../hashes/index.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface ICertPoolRetirement {
    poolHash: CanBeHash28;
    epoch: Epoch;
}
export declare class CertPoolRetirement implements ICert, ICertPoolRetirement {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.PoolRetirement;
    readonly poolHash: Hash28;
    readonly epoch: Epoch;
    constructor({ poolHash, epoch }: ICertPoolRetirement, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertPoolRetirement;
    toJSON(): {
        certType: "PoolRetirement";
        poolHash: string;
        epoch: string;
    };
    toJson(): {
        certType: "PoolRetirement";
        poolHash: string;
        epoch: string;
    };
}
