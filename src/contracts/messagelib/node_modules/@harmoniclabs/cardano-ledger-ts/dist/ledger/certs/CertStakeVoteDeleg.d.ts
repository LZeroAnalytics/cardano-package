import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { Credential } from "../../credentials/index.js";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { DRepLike } from "../../governance/DRep/DRepLike.js";
import { DRep } from "../../governance/DRep/DRep.js";
import { CanBeHash28, Hash28 } from "../../hashes/index.js";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
export interface ICertStakeVoteDeleg {
    stakeCredential: Credential;
    poolKeyHash: CanBeHash28;
    drep: DRepLike;
}
export declare class CertStakeVoteDeleg implements ICert, ICertStakeVoteDeleg {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.StakeVoteDeleg;
    readonly stakeCredential: Credential;
    readonly poolKeyHash: Hash28;
    readonly drep: DRep;
    constructor({ stakeCredential, poolKeyHash, drep }: ICertStakeVoteDeleg, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertStakeVoteDeleg;
    toJSON(): {
        certType: "StakeVoteDeleg";
        stakeCredential: {
            credentialType: string;
            hash: string;
        };
        poolKeyHash: string;
        drep: {
            drepType: string;
        };
    };
    toJson(): {
        certType: "StakeVoteDeleg";
        stakeCredential: {
            credentialType: string;
            hash: string;
        };
        poolKeyHash: string;
        drep: {
            drepType: string;
        };
    };
}
