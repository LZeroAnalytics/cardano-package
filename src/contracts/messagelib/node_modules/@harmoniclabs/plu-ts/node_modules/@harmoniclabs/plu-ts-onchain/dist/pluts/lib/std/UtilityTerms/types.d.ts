import type { PType } from "../../../PType/index.js";
import type { PInt, PBool, PByteString, PString, PList } from "../../../PTypes/index.js";
import type { Term } from "../../../Term/index.js";
import type { TermBS } from "./TermBS.js";
import type { TermBool } from "./TermBool.js";
import type { TermInt } from "./TermInt.js";
import type { TermList } from "./TermList.js";
import type { TermStr } from "./TermStr.js";
export type PTypeWithUtility = PInt | PBool | PByteString | PString | PList<PType>;
export type UtilityFromPType<PT extends PTypeWithUtility> = PT extends PInt ? TermInt : PT extends PBool ? TermBool : PT extends PByteString ? TermBS : PT extends PString ? TermStr : PT extends PList<infer PElemsT extends PType> ? TermList<PElemsT> : never;
export type UtitlityFromTerm<UtilityTerm extends Term<PTypeWithUtility>> = UtilityTerm extends Term<infer UtilityPType extends PTypeWithUtility> ? UtilityFromPType<UtilityPType> : never;
/**
 * @deprecated use `UtilityTermOf` instead
 */
export type TryUtitlityFromPType<PT extends PType> = PT extends infer UtilityPType extends PTypeWithUtility ? UtilityFromPType<UtilityPType> : Term<PT>;
export type TryUtitlityFromTerm<UtilityTerm extends Term<PType>> = UtilityTerm extends Term<infer UtilityPType extends PTypeWithUtility> ? UtilityFromPType<UtilityPType> : UtilityTerm;
