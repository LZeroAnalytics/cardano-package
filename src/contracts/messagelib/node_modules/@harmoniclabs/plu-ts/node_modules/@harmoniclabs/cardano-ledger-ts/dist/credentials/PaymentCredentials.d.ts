import { ToCbor, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { ToData, Data } from "@harmoniclabs/plutus-data";
import { Hash28 } from "../hashes/Hash28/Hash28.js";
import { PubKeyHash } from "./PubKeyHash.js";
export declare class ValidatorHash extends Hash28 {
}
export type PaymentCredentialsType = "pubKey" | "script";
export declare class PaymentCredentials<T extends PaymentCredentialsType = PaymentCredentialsType> implements ToCbor, ToData, Cloneable<PaymentCredentials<T>> {
    readonly type: T;
    readonly hash: T extends "pubKey" ? PubKeyHash : ValidatorHash;
    constructor(type: T, hash: Hash28);
    clone(): PaymentCredentials<T>;
    static get fake(): PaymentCredentials;
    toData(): Data;
    static pubKey(hash: Uint8Array | Hash28 | string): PaymentCredentials<"pubKey">;
    static script(hash: Uint8Array | Hash28 | string): PaymentCredentials<"script">;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): PaymentCredentials;
    static fromCborObj(cObj: CborObj): PaymentCredentials;
}
