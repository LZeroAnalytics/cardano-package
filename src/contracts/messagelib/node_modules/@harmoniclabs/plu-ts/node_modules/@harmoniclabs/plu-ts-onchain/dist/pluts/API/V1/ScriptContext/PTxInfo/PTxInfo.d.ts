export declare const PTxInfo: import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
    PTxInfo: {
        inputs: [import("../../../../type_system/types.js").PrimType.List, import("../../../../type_system/types.js").StructT<{
            PTxInInfo: {
                utxoRef: import("../../../../type_system/types.js").StructT<{
                    PTxOutRef: {
                        id: import("../../../../type_system/types.js").StructT<{
                            PTxId: {
                                txId: [import("../../../../type_system/types.js").PrimType.BS];
                            };
                        }, import("../../../../type_system/types.js").Methods>;
                        index: [import("../../../../type_system/types.js").PrimType.Int];
                    };
                }, import("../../../../type_system/types.js").Methods>;
                resolved: import("../../../../type_system/types.js").StructT<{
                    PTxOut: {
                        address: import("../../../../type_system/types.js").StructT<{
                            PAddress: {
                                credential: import("../../../../type_system/types.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                        };
                                    }, {}>, import("../../../../index.js").PByteString>> & {
                                        $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                            };
                                        }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                                    };
                                }>;
                                stakingCredential: import("../../../../type_system/types.js").StructT<{
                                    Just: {
                                        val: import("../../../../type_system/types.js").StructT<{
                                            PStakingHash: {
                                                _0: import("../../../../type_system/types.js").StructT<{
                                                    PPubKeyCredential: {
                                                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                    };
                                                    PScriptCredential: {
                                                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                    };
                                                }, {
                                                    hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                        PPubKeyCredential: {
                                                            pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                        };
                                                        PScriptCredential: {
                                                            valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                        };
                                                    }, {}>, import("../../../../index.js").PByteString>> & {
                                                        $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                            PPubKeyCredential: {
                                                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                            };
                                                            PScriptCredential: {
                                                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                            };
                                                        }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                                                    };
                                                }>;
                                            };
                                            PStakingPtr: {
                                                _0: [import("../../../../type_system/types.js").PrimType.Int];
                                                _1: [import("../../../../type_system/types.js").PrimType.Int];
                                                _2: [import("../../../../type_system/types.js").PrimType.Int];
                                            };
                                        }, import("../../../../type_system/types.js").Methods>;
                                    };
                                    Nothing: {};
                                }, import("../../../../type_system/types.js").Methods>;
                            };
                        }, import("../../../../type_system/types.js").Methods>;
                        value: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.Int]], {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }]]], {
                            policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }]], {
                            amountOf: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, {
                                policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>;
                                };
                            }>>, any>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>>> & {
                                $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, {
                                    policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                            };
                                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                            };
                                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                            };
                                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                            };
                                        }>>>;
                                    };
                                }>>, any>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>> & {
                                    $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>> & {
                                        $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                };
                            };
                            lovelaces: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, {
                                policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>;
                                };
                            }>>, any>, import("../../../../index.js").PInt>> & {
                                $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, {
                                    policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                            };
                                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                        };
                                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                        };
                                    }>>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                            };
                                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                            };
                                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                            };
                                        }>>>;
                                    };
                                }>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }];
                        datumHash: import("../../../../type_system/types.js").StructT<{
                            Just: {
                                val: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                            Nothing: {};
                        }, import("../../../../type_system/types.js").Methods>;
                    };
                }, import("../../../../type_system/types.js").Methods>;
            };
        }, import("../../../../type_system/types.js").Methods>];
        outputs: [import("../../../../type_system/types.js").PrimType.List, import("../../../../type_system/types.js").StructT<{
            PTxOut: {
                address: import("../../../../type_system/types.js").StructT<{
                    PAddress: {
                        credential: import("../../../../type_system/types.js").StructT<{
                            PPubKeyCredential: {
                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                            PScriptCredential: {
                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                        }, {
                            hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                PPubKeyCredential: {
                                    pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                                PScriptCredential: {
                                    valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                            }, {}>, import("../../../../index.js").PByteString>> & {
                                $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                            };
                        }>;
                        stakingCredential: import("../../../../type_system/types.js").StructT<{
                            Just: {
                                val: import("../../../../type_system/types.js").StructT<{
                                    PStakingHash: {
                                        _0: import("../../../../type_system/types.js").StructT<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                            };
                                        }, {
                                            hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                PPubKeyCredential: {
                                                    pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                };
                                                PScriptCredential: {
                                                    valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                };
                                            }, {}>, import("../../../../index.js").PByteString>> & {
                                                $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                    PPubKeyCredential: {
                                                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                    };
                                                    PScriptCredential: {
                                                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                                    };
                                                }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                                            };
                                        }>;
                                    };
                                    PStakingPtr: {
                                        _0: [import("../../../../type_system/types.js").PrimType.Int];
                                        _1: [import("../../../../type_system/types.js").PrimType.Int];
                                        _2: [import("../../../../type_system/types.js").PrimType.Int];
                                    };
                                }, import("../../../../type_system/types.js").Methods>;
                            };
                            Nothing: {};
                        }, import("../../../../type_system/types.js").Methods>;
                    };
                }, import("../../../../type_system/types.js").Methods>;
                value: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.Int]], {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }]]], {
                    policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>;
                    };
                }]], {
                    amountOf: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, {
                        policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>;
                        };
                    }>>, any>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>>> & {
                        $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, {
                            policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }>>, any>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>> & {
                            $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>> & {
                                $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        };
                    };
                    lovelaces: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, {
                        policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>;
                        };
                    }>>, any>, import("../../../../index.js").PInt>> & {
                        $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, {
                            policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                };
                                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                                    };
                                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }];
                datumHash: import("../../../../type_system/types.js").StructT<{
                    Just: {
                        val: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                    };
                    Nothing: {};
                }, import("../../../../type_system/types.js").Methods>;
            };
        }, import("../../../../type_system/types.js").Methods>];
        fee: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.Int]], {
            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
            };
            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
            };
        }]]], {
            policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
            };
            assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>;
            };
        }]], {
            amountOf: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, {
                policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>;
                };
            }>>, any>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>>> & {
                $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, {
                    policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>;
                    };
                }>>, any>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>> & {
                    $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>> & {
                        $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                };
            };
            lovelaces: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, {
                policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>;
                };
            }>>, any>, import("../../../../index.js").PInt>> & {
                $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, {
                    policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>;
                    };
                }>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
            };
        }];
        mint: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.Int]], {
            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
            };
            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
            };
        }]]], {
            policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
            };
            assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>> & {
                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>;
            };
        }]], {
            amountOf: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, {
                policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>;
                };
            }>>, any>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>>> & {
                $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, {
                    policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>;
                    };
                }>>, any>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>>> & {
                    $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>> & {
                        $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                };
            };
            lovelaces: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                };
            }>>>, {
                policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                };
                assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>> & {
                    $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>;
                };
            }>>, any>, import("../../../../index.js").PInt>> & {
                $: (input: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                    tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                    };
                }>>>, {
                    policy: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                    };
                    assets: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                        tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                        };
                        quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                            $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                        };
                    }>>>> & {
                        $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PList<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, {
                            tokenName: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>>;
                            };
                            quantity: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>, import("../../../../index.js").PInt>> & {
                                $: (someInput: import("../../../../index.js").PappArg<import("../../../../index.js").PAlias<import("../../../../index.js").PPair<import("../../../../index.js").PAlias<import("../../../../index.js").PByteString, import("../../../../type_system/types.js").Methods>, import("../../../../index.js").PInt>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
                            };
                        }>>>;
                    };
                }>>, any>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PInt>;
            };
        }];
        dCertificates: [import("../../../../type_system/types.js").PrimType.List, import("../../../../type_system/types.js").StructT<{
            KeyRegistration: {
                stakeKey: import("../../../../type_system/types.js").StructT<{
                    PStakingHash: {
                        _0: import("../../../../type_system/types.js").StructT<{
                            PPubKeyCredential: {
                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                            PScriptCredential: {
                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                        }, {
                            hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                PPubKeyCredential: {
                                    pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                                PScriptCredential: {
                                    valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                            }, {}>, import("../../../../index.js").PByteString>> & {
                                $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                            };
                        }>;
                    };
                    PStakingPtr: {
                        _0: [import("../../../../type_system/types.js").PrimType.Int];
                        _1: [import("../../../../type_system/types.js").PrimType.Int];
                        _2: [import("../../../../type_system/types.js").PrimType.Int];
                    };
                }, import("../../../../type_system/types.js").Methods>;
            };
            KeyDeRegistration: {
                stakeKey: import("../../../../type_system/types.js").StructT<{
                    PStakingHash: {
                        _0: import("../../../../type_system/types.js").StructT<{
                            PPubKeyCredential: {
                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                            PScriptCredential: {
                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                        }, {
                            hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                PPubKeyCredential: {
                                    pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                                PScriptCredential: {
                                    valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                            }, {}>, import("../../../../index.js").PByteString>> & {
                                $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                            };
                        }>;
                    };
                    PStakingPtr: {
                        _0: [import("../../../../type_system/types.js").PrimType.Int];
                        _1: [import("../../../../type_system/types.js").PrimType.Int];
                        _2: [import("../../../../type_system/types.js").PrimType.Int];
                    };
                }, import("../../../../type_system/types.js").Methods>;
            };
            KeyDelegation: {
                delegator: import("../../../../type_system/types.js").StructT<{
                    PStakingHash: {
                        _0: import("../../../../type_system/types.js").StructT<{
                            PPubKeyCredential: {
                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                            PScriptCredential: {
                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                        }, {
                            hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                PPubKeyCredential: {
                                    pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                                PScriptCredential: {
                                    valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                };
                            }, {}>, import("../../../../index.js").PByteString>> & {
                                $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                                    };
                                }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                            };
                        }>;
                    };
                    PStakingPtr: {
                        _0: [import("../../../../type_system/types.js").PrimType.Int];
                        _1: [import("../../../../type_system/types.js").PrimType.Int];
                        _2: [import("../../../../type_system/types.js").PrimType.Int];
                    };
                }, import("../../../../type_system/types.js").Methods>;
                poolKeyHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
            };
            PoolRegistration: {
                poolId: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                poolVFR: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
            };
            PoolRetire: {
                poolId: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                epoch: [import("../../../../type_system/types.js").PrimType.Int];
            };
            Genesis: {};
            MoveInstantRewards: {};
        }, import("../../../../type_system/types.js").Methods>];
        withdrawals: [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Pair, import("../../../../type_system/types.js").StructT<{
            PStakingHash: {
                _0: import("../../../../type_system/types.js").StructT<{
                    PPubKeyCredential: {
                        pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                    };
                    PScriptCredential: {
                        valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                    };
                }, {
                    hash: import("../../../../index.js").Term<import("../../../../index.js").PLam<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                        PPubKeyCredential: {
                            pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                        };
                        PScriptCredential: {
                            valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                        };
                    }, {}>, import("../../../../index.js").PByteString>> & {
                        $: (input: import("../../../../index.js").PappArg<import("../../../../PTypes/PStruct/pstruct.js").PStruct<{
                            PPubKeyCredential: {
                                pkh: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                            PScriptCredential: {
                                valHash: [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods];
                            };
                        }, {}>>) => import("../../../../index.js").UtilityTermOf<import("../../../../index.js").PByteString>;
                    };
                }>;
            };
            PStakingPtr: {
                _0: [import("../../../../type_system/types.js").PrimType.Int];
                _1: [import("../../../../type_system/types.js").PrimType.Int];
                _2: [import("../../../../type_system/types.js").PrimType.Int];
            };
        }, import("../../../../type_system/types.js").Methods>, [import("../../../../type_system/types.js").PrimType.Int]]];
        interval: import("../../../../type_system/types.js").StructT<{
            PInterval: {
                from: import("../../../../type_system/types.js").StructT<{
                    PLowerBound: {
                        bound: import("../../../../type_system/types.js").StructT<{
                            PNegInf: {};
                            PFinite: {
                                _0: [import("../../../../type_system/types.js").PrimType.Int];
                            };
                            PPosInf: {};
                        }, import("../../../../type_system/types.js").Methods>;
                        inclusive: [import("../../../../type_system/types.js").PrimType.Bool];
                    };
                }, import("../../../../type_system/types.js").Methods>;
                to: import("../../../../type_system/types.js").StructT<{
                    PUpperBound: {
                        bound: import("../../../../type_system/types.js").StructT<{
                            PNegInf: {};
                            PFinite: {
                                _0: [import("../../../../type_system/types.js").PrimType.Int];
                            };
                            PPosInf: {};
                        }, import("../../../../type_system/types.js").Methods>;
                        inclusive: [import("../../../../type_system/types.js").PrimType.Bool];
                    };
                }, import("../../../../type_system/types.js").Methods>;
            };
        }, import("../../../../type_system/types.js").Methods>;
        signatories: [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods]];
        datums: [import("../../../../type_system/types.js").PrimType.List, [import("../../../../type_system/types.js").PrimType.Pair, [import("../../../../type_system/types.js").PrimType.Alias, [import("../../../../type_system/types.js").PrimType.BS], import("../../../../type_system/types.js").Methods], [import("../../../../type_system/types.js").PrimType.Data]]];
        id: import("../../../../type_system/types.js").StructT<{
            PTxId: {
                txId: [import("../../../../type_system/types.js").PrimType.BS];
            };
        }, import("../../../../type_system/types.js").Methods>;
    };
}, import("../../../../type_system/types.js").Methods>;
