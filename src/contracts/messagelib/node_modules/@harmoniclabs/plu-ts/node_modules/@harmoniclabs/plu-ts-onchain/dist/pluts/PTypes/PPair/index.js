"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PPair = void 0;
var PType_1 = require("../../PType/index.js");
var PDataRepresentable_1 = require("../../PType/PDataRepresentable.js");
/*
Class static side 'typeof PPair' incorrectly extends base class static side 'typeof PDataRepresentable'.
  The types returned by 'fromData(...)' are incompatible between these types.
    Type 'Term<PPair<PData, PData>>' is not assignable to type 'Term<PDataRepresentable>'.
      Type 'PDataRepresentable' is missing the following properties from type 'PPair<PData, PData>': _a, _bts(2417)
Type instantiation is excessively deep and possibly infinite.
*/
// @ts-ignore
var PPair = /** @class */ (function (_super) {
    __extends(PPair, _super);
    function PPair(a, b) {
        if (a === void 0) { a = new PType_1.PType; }
        if (b === void 0) { b = new PType_1.PType; }
        var _this = _super.call(this) || this;
        _this._a = a;
        _this._b = b;
        return _this;
    }
    return PPair;
}(PDataRepresentable_1.PDataRepresentable));
exports.PPair = PPair;
