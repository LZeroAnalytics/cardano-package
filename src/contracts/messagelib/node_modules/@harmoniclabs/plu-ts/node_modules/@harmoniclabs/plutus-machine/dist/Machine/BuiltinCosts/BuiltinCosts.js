"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.costModelV2ToBuiltinCosts = exports.costModelV1ToBuiltinCosts = void 0;
var uplc_1 = require("@harmoniclabs/uplc");
var costFunctions_1 = require("./costFunctions.js");
var biguint_1 = require("@harmoniclabs/biguint");
var cardano_costmodels_ts_1 = require("@harmoniclabs/cardano-costmodels-ts");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var assert_1 = require("../../utils/assert.js");
function costModelV1ToBuiltinCosts(costmdls) {
    return costModelV2ToBuiltinCosts((0, cardano_costmodels_ts_1.costModelV1ToFakeV2)(costmdls));
}
exports.costModelV1ToBuiltinCosts = costModelV1ToBuiltinCosts;
function costModelV2ToBuiltinCosts(costmdls) {
    var costs = (0, cardano_costmodels_ts_1.toCostModelV2)(costmdls);
    (0, assert_1.assert)((0, cardano_costmodels_ts_1.isCostModelsV2)(costs), "invalid cost models passed");
    var cache = {};
    return function (tag) {
        if ((0, obj_utils_1.hasOwn)(cache, tag))
            return cache[tag];
        function readonly(costs) {
            var result = {};
            (0, obj_utils_1.defineReadOnlyProperty)(result, "mem", costs.mem);
            (0, obj_utils_1.defineReadOnlyProperty)(result, "cpu", costs.cpu);
            // save in cache
            (0, obj_utils_1.defineReadOnlyProperty)(cache, tag, result);
            return result;
        }
        switch (tag) {
            case uplc_1.UPLCBuiltinTag.addInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMax((0, biguint_1.forceBigUInt)(costs["addInteger-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["addInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InMax((0, biguint_1.forceBigUInt)(costs["addInteger-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["addInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.subtractInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMax((0, biguint_1.forceBigUInt)(costs["subtractInteger-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["subtractInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InMax((0, biguint_1.forceBigUInt)(costs["subtractInteger-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["subtractInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.multiplyInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InBothAdd((0, biguint_1.forceBigUInt)(costs["multiplyInteger-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["multiplyInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd((0, biguint_1.forceBigUInt)(costs["multiplyInteger-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["multiplyInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.divideInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InBothSub((0, biguint_1.forceBigUInt)(costs["divideInteger-cpu-arguments-model-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["divideInteger-cpu-arguments-model-arguments-slope"]), (0, biguint_1.forceBigUInt)(costs["divideInteger-cpu-arguments-constant"])),
                    mem: new costFunctions_1.Linear2InBothSub((0, biguint_1.forceBigUInt)(costs["divideInteger-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["divideInteger-memory-arguments-slope"]), (0, biguint_1.forceBigUInt)(costs["divideInteger-memory-arguments-minimum"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.quotientInteger:
                return readonly({
                    cpu: new costFunctions_1.XGtEqOrConst((0, biguint_1.forceBigUInt)(costs["quotientInteger-cpu-arguments-constant"]), new costFunctions_1.Linear2InBothMult((0, biguint_1.forceBigUInt)(costs["quotientInteger-cpu-arguments-model-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["quotientInteger-cpu-arguments-model-arguments-slope"]))),
                    mem: new costFunctions_1.Linear2InBothSub((0, biguint_1.forceBigUInt)(costs["quotientInteger-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["quotientInteger-memory-arguments-slope"]), (0, biguint_1.forceBigUInt)(costs["quotientInteger-memory-arguments-minimum"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.remainderInteger:
                return readonly({
                    cpu: new costFunctions_1.XGtEqOrConst((0, biguint_1.forceBigUInt)(costs["remainderInteger-cpu-arguments-constant"]), new costFunctions_1.Linear2InBothMult((0, biguint_1.forceBigUInt)(costs["remainderInteger-cpu-arguments-model-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["remainderInteger-cpu-arguments-model-arguments-slope"]))),
                    mem: new costFunctions_1.Linear2InBothSub((0, biguint_1.forceBigUInt)(costs["remainderInteger-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["remainderInteger-memory-arguments-slope"]), (0, biguint_1.forceBigUInt)(costs["remainderInteger-memory-arguments-minimum"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.modInteger:
                return readonly({
                    cpu: new costFunctions_1.XGtEqOrConst((0, biguint_1.forceBigUInt)(costs["modInteger-cpu-arguments-constant"]), new costFunctions_1.Linear2InBothMult((0, biguint_1.forceBigUInt)(costs["modInteger-cpu-arguments-model-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["modInteger-cpu-arguments-model-arguments-slope"]))),
                    mem: new costFunctions_1.Linear2InBothSub((0, biguint_1.forceBigUInt)(costs["modInteger-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["modInteger-memory-arguments-slope"]), (0, biguint_1.forceBigUInt)(costs["modInteger-memory-arguments-minimum"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin((0, biguint_1.forceBigUInt)(costs["equalsInteger-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["equalsInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["equalsInteger-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin((0, biguint_1.forceBigUInt)(costs["lessThanInteger-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["lessThanInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["lessThanInteger-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanEqualInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin((0, biguint_1.forceBigUInt)(costs["lessThanEqualsInteger-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["lessThanEqualsInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["lessThanEqualsInteger-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.appendByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InBothAdd((0, biguint_1.forceBigUInt)(costs["appendByteString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["appendByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd((0, biguint_1.forceBigUInt)(costs["appendByteString-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["appendByteString-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.consByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InY((0, biguint_1.forceBigUInt)(costs["consByteString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["consByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd((0, biguint_1.forceBigUInt)(costs["consByteString-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["consByteString-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.sliceByteString:
                return readonly({
                    mem: new costFunctions_1.Linear3InZ((0, biguint_1.forceBigUInt)(costs["sliceByteString-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["sliceByteString-memory-arguments-slope"])),
                    cpu: new costFunctions_1.Linear3InZ((0, biguint_1.forceBigUInt)(costs["sliceByteString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["sliceByteString-cpu-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.lengthOfByteString:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["lengthOfByteString-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["lengthOfByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.indexByteString:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["indexByteString-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["indexByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsByteString:
                return readonly({
                    cpu: new costFunctions_1.LinearOnEqualXY((0, biguint_1.forceBigUInt)(costs["equalsByteString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["equalsByteString-cpu-arguments-slope"]), (0, biguint_1.forceBigUInt)(costs["equalsByteString-cpu-arguments-constant"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["equalsByteString-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin((0, biguint_1.forceBigUInt)(costs["lessThanByteString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["lessThanByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["lessThanByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanEqualsByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin((0, biguint_1.forceBigUInt)(costs["lessThanEqualsByteString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["lessThanEqualsByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["lessThanEqualsByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.sha2_256:
                return readonly({
                    cpu: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["sha2_256-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["sha2_256-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["sha2_256-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.sha3_256:
                return readonly({
                    cpu: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["sha3_256-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["sha3_256-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["sha3_256-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.blake2b_256:
                return readonly({
                    cpu: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["blake2b_256-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["blake2b_256-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["blake2b_256-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.verifyEd25519Signature:
                return readonly({
                    cpu: new costFunctions_1.Linear3InZ((0, biguint_1.forceBigUInt)(costs["verifyEd25519Signature-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["verifyEd25519Signature-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["verifyEd25519Signature-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.appendString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InBothAdd((0, biguint_1.forceBigUInt)(costs["appendString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["appendString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd((0, biguint_1.forceBigUInt)(costs["appendString-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["appendString-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsString:
                return readonly({
                    cpu: new costFunctions_1.LinearOnEqualXY((0, biguint_1.forceBigUInt)(costs["equalsString-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["equalsString-cpu-arguments-slope"]), (0, biguint_1.forceBigUInt)(costs["equalsString-cpu-arguments-constant"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["equalsString-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.encodeUtf8:
                return readonly({
                    cpu: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["encodeUtf8-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["encodeUtf8-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["encodeUtf8-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["encodeUtf8-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.decodeUtf8:
                return readonly({
                    cpu: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["decodeUtf8-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["decodeUtf8-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["decodeUtf8-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["decodeUtf8-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.ifThenElse:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["ifThenElse-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["ifThenElse-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.chooseUnit:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["chooseUnit-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["chooseUnit-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.trace:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["trace-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["trace-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.fstPair:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["fstPair-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["fstPair-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.sndPair:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["sndPair-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["sndPair-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.chooseList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["chooseList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["chooseList-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkCons:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkCons-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkCons-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.headList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["headList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["headList-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.tailList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["tailList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["tailList-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.nullList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["nullList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["nullList-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.chooseData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["chooseData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["chooseData-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.constrData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["constrData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["constrData-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.mapData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mapData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mapData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.listData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["listData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["listData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.iData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["iData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["iData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["bData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["bData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unConstrData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unConstrData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unConstrData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unMapData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unMapData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unMapData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unListData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unListData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unListData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unIData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unIData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unIData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unBData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unBData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["unBData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsData:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin((0, biguint_1.forceBigUInt)(costs["equalsData-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["equalsData-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["equalsData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkPairData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkPairData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkPairData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkNilData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkNilData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkNilData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkNilPairData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkNilPairData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["mkNilPairData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.serialiseData:
                return readonly({
                    cpu: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["serialiseData-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["serialiseData-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear1((0, biguint_1.forceBigUInt)(costs["serialiseData-memory-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["serialiseData-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.verifyEcdsaSecp256k1Signature:
                return readonly({
                    cpu: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["verifyEcdsaSecp256k1Signature-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["verifyEcdsaSecp256k1Signature-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.verifySchnorrSecp256k1Signature:
                return readonly({
                    cpu: new costFunctions_1.Linear3InY((0, biguint_1.forceBigUInt)(costs["verifySchnorrSecp256k1Signature-cpu-arguments-intercept"]), (0, biguint_1.forceBigUInt)(costs["verifySchnorrSecp256k1Signature-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost((0, biguint_1.forceBigUInt)(costs["verifySchnorrSecp256k1Signature-memory-arguments"]))
                });
                break;
        }
        throw new Error("unmatched builtin cost");
    };
}
exports.costModelV2ToBuiltinCosts = costModelV2ToBuiltinCosts;
