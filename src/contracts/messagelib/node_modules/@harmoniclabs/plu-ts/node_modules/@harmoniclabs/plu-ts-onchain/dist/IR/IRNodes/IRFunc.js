"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IRFunc = void 0;
var crypto_1 = require("@harmoniclabs/crypto");
var BasePlutsError_1 = require("../../utils/BasePlutsError.js");
var concatUint8Arr_1 = require("../utils/concatUint8Arr.js");
var isIRTerm_1 = require("../utils/isIRTerm.js");
var positiveIntAsBytes_1 = require("../utils/positiveIntAsBytes.js");
var isIRParentTerm_1 = require("../utils/isIRParentTerm.js");
var _modifyChildFromTo_1 = require("../toUPLC/_internal/_modifyChildFromTo.js");
var IRFunc = /** @class */ (function () {
    function IRFunc(arity, body, func_name) {
        var _this = this;
        if (!Number.isSafeInteger(arity) && arity >= 1)
            throw new BasePlutsError_1.BasePlutsError("invalid arity for 'IRFunc'");
        if (!(0, isIRTerm_1.isIRTerm)(body))
            throw new Error("IRFunc body argument was not an IRTerm");
        Object.defineProperties(this, {
            arity: {
                value: arity,
                writable: false,
                enumerable: true,
                configurable: false
            },
            meta: {
                value: {
                    name: typeof func_name === "string" ? func_name : (void 0)
                },
                writable: true,
                enumerable: true,
                configurable: false
            }
        });
        var _body = body;
        _body.parent = this;
        var hash = undefined;
        Object.defineProperty(this, "hash", {
            get: function () {
                if (!(hash instanceof Uint8Array)) {
                    hash = (0, crypto_1.blake2b_128)((0, concatUint8Arr_1.concatUint8Arr)(IRFunc.tag, (0, positiveIntAsBytes_1.positiveIntAsBytes)(_this.arity), _body.hash));
                }
                return hash.slice();
            },
            set: function () { },
            enumerable: true,
            configurable: false
        });
        Object.defineProperty(this, "markHashAsInvalid", {
            value: function () {
                var _a;
                hash = undefined;
                (_a = _this.parent) === null || _a === void 0 ? void 0 : _a.markHashAsInvalid();
            },
            writable: false,
            enumerable: false,
            configurable: false
        });
        Object.defineProperty(this, "body", {
            get: function () { return _body; },
            set: function (newBody) {
                if (!(0, isIRTerm_1.isIRTerm)(newBody)) {
                    throw new BasePlutsError_1.BasePlutsError("invalid IRTerm to be a function body");
                }
                _this.markHashAsInvalid();
                _body = newBody;
                _body.parent = _this;
            },
            enumerable: true,
            configurable: false
        });
        var _parent = undefined;
        Object.defineProperty(this, "parent", {
            get: function () { return _parent; },
            set: function (newParent) {
                if (!( // assert
                // new parent value is different than current
                _parent !== newParent && (
                // and the new parent value is valid
                newParent === undefined ||
                    (0, isIRParentTerm_1.isIRParentTerm)(newParent))))
                    return;
                // keep reference
                var oldParent = _parent;
                // change parent
                _parent = newParent;
                // if has old parent
                if (oldParent !== undefined && (0, isIRParentTerm_1.isIRParentTerm)(oldParent)) {
                    // change reference to a clone for safety
                    (0, _modifyChildFromTo_1._modifyChildFromTo)(oldParent, _this, _this.clone());
                }
            },
            enumerable: true,
            configurable: false
        });
        Object.defineProperty(this, "clone", {
            value: function () {
                return new IRFunc(_this.arity, body.clone());
            },
            writable: false,
            enumerable: true,
            configurable: false
        });
    }
    Object.defineProperty(IRFunc.prototype, "name", {
        get: function () { return this.meta.name; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(IRFunc, "tag", {
        get: function () { return new Uint8Array([1]); },
        enumerable: false,
        configurable: true
    });
    IRFunc.prototype.toJson = function () {
        return {
            type: "IRFunc",
            arity: this.arity,
            body: this.body.toJson()
        };
    };
    return IRFunc;
}());
exports.IRFunc = IRFunc;
