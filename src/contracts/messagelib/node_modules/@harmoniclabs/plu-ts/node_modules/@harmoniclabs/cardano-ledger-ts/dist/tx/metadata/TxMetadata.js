"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMetadata = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var assert_1 = require("../../utils/assert.js");
var TxMetadatum_1 = require("./TxMetadatum.js");
var TxMetadata = /** @class */ (function () {
    function TxMetadata(metadata) {
        var _metadata = {};
        Object.keys(metadata)
            .forEach(function (k) {
            return (0, obj_utils_1.defineReadOnlyProperty)(_metadata, BigInt(k).toString(), (function () {
                var v = metadata[k];
                (0, assert_1.assert)((0, TxMetadatum_1.isTxMetadatum)(v), "metatdatum with label " + k + " was not instace of 'TxMetadatum'");
                return v;
            })());
        });
        (0, obj_utils_1.defineReadOnlyProperty)(this, "metadata", _metadata);
    }
    TxMetadata.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMetadata.prototype.toCborObj = function () {
        var _this = this;
        return new cbor_1.CborMap(Object.keys(this.metadata).map(function (labelStr) {
            return {
                k: new cbor_1.CborUInt(BigInt(labelStr)),
                v: _this.metadata[labelStr].toCborObj()
            };
        }));
    };
    TxMetadata.fromCbor = function (cStr) {
        return TxMetadata.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr)));
    };
    TxMetadata.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborMap))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("TxMetadata");
        var meta = {};
        var len = cObj.map.length;
        for (var i = 0; i < len; i++) {
            var _a = cObj.map[i], k = _a.k, v = _a.v;
            if (!(k instanceof cbor_1.CborUInt))
                throw new InvalidCborFormatError_1.InvalidCborFormatError("TxMetadata");
            (0, obj_utils_1.defineReadOnlyProperty)(meta, k.num.toString(), (0, TxMetadatum_1.txMetadatumFromCborObj)(v));
        }
        return new TxMetadata(meta);
    };
    TxMetadata.prototype.toJson = function () {
        var e_1, _a;
        var json = {};
        var ks = Object.keys(this.metadata);
        try {
            for (var ks_1 = __values(ks), ks_1_1 = ks_1.next(); !ks_1_1.done; ks_1_1 = ks_1.next()) {
                var k = ks_1_1.value;
                (0, obj_utils_1.defineReadOnlyProperty)(json, k, this.metadata[k].toJson());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (ks_1_1 && !ks_1_1.done && (_a = ks_1.return)) _a.call(ks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return json;
    };
    return TxMetadata;
}());
exports.TxMetadata = TxMetadata;
