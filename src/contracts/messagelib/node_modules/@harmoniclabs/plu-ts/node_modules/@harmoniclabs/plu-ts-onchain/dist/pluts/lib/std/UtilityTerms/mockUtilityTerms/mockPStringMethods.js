"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockPStringMethods = exports.makeMockTermStr = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var mockPByteStringMethods_1 = require("./mockPByteStringMethods.js");
var makeMockUtilityTerm_1 = require("./makeMockUtilityTerm.js");
var type_system_1 = require("../../../../type_system/index.js");
var makeMockTerm_1 = require("./makeMockTerm.js");
var mockPBoolMethods_1 = require("./mockPBoolMethods.js");
var getterOnly = {
    set: function () { },
    configurable: false,
    enumerable: true
};
function makeMockTermStr() {
    return mockPStringMethods((0, makeMockTerm_1.makeMockTerm)(type_system_1.str));
}
exports.makeMockTermStr = makeMockTermStr;
function mockPStringMethods(term) {
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "utf8Encoded", __assign({ get: function () { return (0, mockPByteStringMethods_1.makeMockTermBs)(); } }, getterOnly));
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pconcat", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.str, type_system_1.str)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "concat", function (other) { return makeMockTermStr(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "peq", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.str, type_system_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "eq", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    return term;
}
exports.mockPStringMethods = mockPStringMethods;
