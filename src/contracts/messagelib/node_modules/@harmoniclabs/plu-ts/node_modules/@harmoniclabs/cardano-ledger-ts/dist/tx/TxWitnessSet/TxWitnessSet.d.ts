import { ToCbor, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { Data } from "@harmoniclabs/plutus-data";
import { Hash28 } from "../../hashes/index.js";
import { Script, ScriptType } from "../../script/index.js";
import { ToJson } from "../../utils/ToJson.js";
import { BootstrapWitness } from "./BootstrapWitness.js";
import { TxRedeemer } from "./TxRedeemer.js";
import { VKeyWitness } from "./VKeyWitness/index.js";
export interface ITxWitnessSet {
    vkeyWitnesses?: VKeyWitness[];
    nativeScripts?: Script<ScriptType.NativeScript>[];
    bootstrapWitnesses?: BootstrapWitness[];
    plutusV1Scripts?: Script<ScriptType.PlutusV1>[];
    datums?: Data[];
    redeemers?: TxRedeemer[];
    plutusV2Scripts?: Script<ScriptType.PlutusV2>[];
}
export declare function isITxWitnessSet(set: object): set is ITxWitnessSet;
export declare class TxWitnessSet implements ITxWitnessSet, ToCbor, ToJson {
    readonly vkeyWitnesses?: VKeyWitness[];
    readonly nativeScripts?: Script<ScriptType.NativeScript>[];
    readonly bootstrapWitnesses?: BootstrapWitness[];
    readonly plutusV1Scripts?: Script<ScriptType.PlutusV1>[];
    readonly datums?: Data[];
    readonly redeemers?: TxRedeemer[];
    readonly plutusV2Scripts?: Script<ScriptType.PlutusV2>[];
    readonly addVKeyWitness: (vkeyWit: VKeyWitness) => void;
    readonly isComplete: boolean;
    constructor(witnesses: ITxWitnessSet, allRequiredSigners?: Hash28[] | undefined);
    toJson(): {
        vkeyWitnesses: {
            vkey: string;
            signature: string;
        }[] | undefined;
        nativeScripts: (import("../../script/index.js").ScriptSignature | import("../../script/index.js").ScriptAll | import("../../script/index.js").ScriptAny | import("../../script/index.js").ScriptAtLeast | import("../../script/index.js").ScriptAfter | import("../../script/index.js").ScriptBefore | {
            type: ScriptType.NativeScript;
            description: string;
            cborHex: string;
        })[] | undefined;
        bootstrapWitnesses: {
            pubKey: string;
            signature: string;
            chainCode: string;
            attributes: string;
        }[] | undefined;
        plutusV1Scripts: (import("../../script/index.js").ScriptSignature | import("../../script/index.js").ScriptAll | import("../../script/index.js").ScriptAny | import("../../script/index.js").ScriptAtLeast | import("../../script/index.js").ScriptAfter | import("../../script/index.js").ScriptBefore | {
            type: ScriptType.PlutusV1;
            description: string;
            cborHex: string;
        })[] | undefined;
        datums: any[] | undefined;
        redeemers: {
            tag: "Spend" | "Mint" | "Cert" | "Withdraw";
            index: number;
            execUnits: {
                steps: string;
                memory: string;
            };
            data: any;
        }[] | undefined;
        plutusV2Scripts: (import("../../script/index.js").ScriptSignature | import("../../script/index.js").ScriptAll | import("../../script/index.js").ScriptAny | import("../../script/index.js").ScriptAtLeast | import("../../script/index.js").ScriptAfter | import("../../script/index.js").ScriptBefore | {
            type: ScriptType.PlutusV2;
            description: string;
            cborHex: string;
        })[] | undefined;
    };
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): TxWitnessSet;
    static fromCborObj(cObj: CborObj): TxWitnessSet;
}
