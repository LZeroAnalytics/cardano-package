"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWellFormedGenericType = exports.isWellFormedType = exports.isGenericStructType = exports.isStructType = exports.isGenericStructDefinition = exports.isStructDefinition = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var isPrimTypeTag_1 = require("./isPrimTypeTag.js");
var isTaggedAsAlias_1 = require("./isTaggedAsAlias.js");
var isTypePAram_1 = require("./isTypePAram.js");
var utils_1 = require("../utils.js");
function getIsStructDefWithTermTypeCheck(termTypeCheck) {
    return function (def) {
        if (!(0, obj_utils_1.isObject)(def))
            return false;
        var ctorsNames = Object.keys(def);
        // required at least one constructor
        if (ctorsNames.length <= 0)
            return false;
        if (!ctorsNames.every(
        // all constructor names
        function (ctorName) {
            // cannot be empty
            return ctorName.length > 0 &&
                // no white spaces
                ctorName.replace(/\s/g, '') === ctorName &&
                // cannot start with a number
                Number.isNaN(parseFloat(ctorName[0]));
        }))
            return false;
        var _loop_1 = function (i) {
            var thisCtorFields = def[ctorsNames[i]];
            var thisCtorFieldsNames = Object.keys(thisCtorFields);
            if (!thisCtorFieldsNames.every(function (field) {
                return termTypeCheck(thisCtorFields[field]);
            }))
                return { value: false };
        };
        for (var i = 0; i < ctorsNames.length; i++) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return true;
    };
}
exports.isStructDefinition = getIsStructDefWithTermTypeCheck(isWellFormedType);
exports.isGenericStructDefinition = getIsStructDefWithTermTypeCheck(isWellFormedGenericType);
function isStructType(t) {
    return (Array.isArray(t) &&
        t.length >= 2 &&
        t[0] === "struct" /* PrimType.Struct */ &&
        (0, exports.isStructDefinition)(t[1]));
}
exports.isStructType = isStructType;
function isGenericStructType(t) {
    return (Array.isArray(t) &&
        t.length >= 2 &&
        t[0] === "struct" /* PrimType.Struct */ &&
        (0, exports.isGenericStructDefinition)(t[1]));
}
exports.isGenericStructType = isGenericStructType;
function isWellFormedType(t) {
    if ((0, isTaggedAsAlias_1.isTaggedAsAlias)(t))
        return isWellFormedType(t[1]);
    if (!(Array.isArray(t) &&
        t.length > 0))
        return false;
    if ((0, isTypePAram_1.isTypeParam)(t))
        return false;
    if (!((0, isPrimTypeTag_1.isPrimTypeTag)(t[0])))
        return false;
    // just base type
    if (t.length === 1)
        return true;
    if (t[0] === "delayed" /* PrimType.Delayed */ ||
        t[0] === "asData" /* PrimType.AsData */ ||
        t[0] === "list" /* PrimType.List */ ||
        // ??
        t[0] === "alias" /* PrimType.Alias */)
        return t.length >= 2 && isWellFormedType(t[1]);
    if (t[0] === "struct" /* PrimType.Struct */) {
        return t.length >= 2 && (0, exports.isStructDefinition)(t[1]);
    }
    if (t[0] === "lam" /* PrimType.Lambda */ ||
        t[0] === "pair" /* PrimType.Pair */)
        return (t.length === 3 &&
            isWellFormedType(t[1]) &&
            isWellFormedType(t[2]));
    return false;
}
exports.isWellFormedType = isWellFormedType;
function isWellFormedGenericType(t) {
    if ((0, isTaggedAsAlias_1.isTaggedAsAlias)(t))
        return isWellFormedGenericType(t[1]);
    if (!(Array.isArray(t) &&
        t.length > 0))
        return false;
    if ((0, isTypePAram_1.isTypeParam)(t))
        return true;
    if (!((0, isPrimTypeTag_1.isPrimTypeTag)(t[0])))
        return false;
    // just base type
    if (t.length === 1)
        return true;
    if (t[0] === "delayed" /* PrimType.Delayed */ ||
        t[0] === "asData" /* PrimType.AsData */ ||
        t[0] === "list" /* PrimType.List */ ||
        // ??
        t[0] === "alias" /* PrimType.Alias */)
        return t.length >= 2 && isWellFormedGenericType(t[1]);
    if (t[0] === "struct" /* PrimType.Struct */) {
        return t.length >= 2 && (0, exports.isGenericStructDefinition)(t[1]);
    }
    if (t[0] === "lam" /* PrimType.Lambda */ ||
        t[0] === "pair" /* PrimType.Pair */) {
        var fst = isWellFormedGenericType(t[1]);
        var snd = isWellFormedGenericType(t[2]);
        if (!fst) {
            console.log("fst", (0, utils_1.termTypeToString)(t[1]));
        }
        if (!snd) {
            console.log("snd", (0, utils_1.termTypeToString)(t[2]));
        }
        return (t.length === 3 &&
            fst &&
            snd);
    }
    return false;
}
exports.isWellFormedGenericType = isWellFormedGenericType;
