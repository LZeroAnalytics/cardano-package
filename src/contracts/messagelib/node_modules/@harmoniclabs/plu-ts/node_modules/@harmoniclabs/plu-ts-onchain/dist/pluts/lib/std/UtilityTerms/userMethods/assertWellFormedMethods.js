"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertWellFormedMethods = exports.isWellFormedMethods = void 0;
/**
 * checks thatevery method name does not have an equivalent that starts with "p"
 * (added by convention to indicate the term rather than the funciton)
 *
 * @example
 * ```ts
 * const notOk: Methods = {
 *      foo: pfn([ int ], bool)( ... ),
 *      bar: pfn([ int ], bool)( ... ),
 *      // ERROR: 'pfoo' is used to indicate the term counterpart of 'foo'
 *      pfoo: pfn([ int ], bool)( ... )
 * }
 * const ok: Methods = {
 *      foo: pfn([ int ], bool)( ... ),
 *      bar: pfn([ int ], bool)( ... ),
 *      // no problem
 *      // this will generate 'prop' and 'pprop'
 *      // where 'prop' is the funciton and 'pprop' is the term
 *      prop: pfn([ int ], bool)( ... )
 * }
 * ```
 */
function isWellFormedMethods(methods) {
    var e_1, _a;
    var names = Object.keys(methods);
    var pnames = [];
    try {
        for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {
            var name_1 = names_1_1.value;
            if (name_1.length === 0)
                continue;
            if (name_1[0] === "p") {
                pnames.push(name_1.slice(1));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return !pnames.some(function (pname) { return names.includes(pname); });
}
exports.isWellFormedMethods = isWellFormedMethods;
function assertWellFormedMethods(methods) {
    if (!isWellFormedMethods(methods))
        throw new Error("methods are not well formed");
}
exports.assertWellFormedMethods = assertWellFormedMethods;
