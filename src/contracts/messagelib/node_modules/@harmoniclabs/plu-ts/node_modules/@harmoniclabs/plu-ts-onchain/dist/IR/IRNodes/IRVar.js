"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IRVar = void 0;
var crypto_1 = require("@harmoniclabs/crypto");
var BasePlutsError_1 = require("../../utils/BasePlutsError.js");
var concatUint8Arr_1 = require("../utils/concatUint8Arr.js");
var positiveIntAsBytes_1 = require("../utils/positiveIntAsBytes.js");
var isIRParentTerm_1 = require("../utils/isIRParentTerm.js");
var _modifyChildFromTo_1 = require("../toUPLC/_internal/_modifyChildFromTo.js");
var IRVar = /** @class */ (function () {
    function IRVar(DeBruijn) {
        var _this = this;
        DeBruijn = typeof DeBruijn === "number" ? DeBruijn : Number(DeBruijn);
        Object.defineProperty(this, "meta", {
            value: {},
            writable: false,
            enumerable: true,
            configurable: false
        });
        var hash = undefined;
        Object.defineProperty(this, "hash", {
            get: function () {
                if (!(hash instanceof Uint8Array)) {
                    hash = getVarHashAtDbn(_this.dbn);
                }
                return hash.slice();
            },
            set: function () { },
            enumerable: true,
            configurable: false
        });
        Object.defineProperty(this, "markHashAsInvalid", {
            value: function () {
                var _a;
                hash = undefined;
                (_a = _this.parent) === null || _a === void 0 ? void 0 : _a.markHashAsInvalid();
            },
            writable: false,
            enumerable: false,
            configurable: false
        });
        var e = Error();
        var _dbn;
        Object.defineProperty(this, "dbn", {
            get: function () { return _dbn; },
            set: function (newDbn) {
                if (!(Number.isSafeInteger(newDbn) && newDbn >= 0)) {
                    // console.log( e.stack );
                    throw new BasePlutsError_1.BasePlutsError("invalid index for an `IRVar` instance; new DeBruijn was: " + newDbn);
                }
                if (newDbn === _dbn)
                    return; // everything ok
                _this.markHashAsInvalid();
                _dbn = newDbn;
            },
            enumerable: true,
            configurable: false
        });
        this.dbn = DeBruijn; // call set
        var _parent = undefined;
        Object.defineProperty(this, "parent", {
            get: function () { return _parent; },
            set: function (newParent) {
                if (!( // assert
                // new parent value is different than current
                _parent !== newParent && (
                // and the new parent value is valid
                newParent === undefined ||
                    (0, isIRParentTerm_1.isIRParentTerm)(newParent))))
                    return;
                // keep reference
                var oldParent = _parent;
                // change parent
                _parent = newParent;
                // if has old parent
                if (oldParent !== undefined && (0, isIRParentTerm_1.isIRParentTerm)(oldParent)) {
                    // change reference to a clone for safety
                    (0, _modifyChildFromTo_1._modifyChildFromTo)(oldParent, _this, _this.clone());
                }
            },
            enumerable: true,
            configurable: false
        });
    }
    Object.defineProperty(IRVar, "tag", {
        get: function () { return new Uint8Array([0]); },
        enumerable: false,
        configurable: true
    });
    IRVar.prototype.clone = function () {
        return new IRVar(this.dbn);
    };
    IRVar.prototype.toJson = function () {
        return {
            type: "IRVar",
            dbn: this.dbn
        };
    };
    return IRVar;
}());
exports.IRVar = IRVar;
var bdnVarHashCache = [];
function getVarHashAtDbn(dbn) {
    while ((bdnVarHashCache.length - 1) < dbn) {
        bdnVarHashCache.push((0, crypto_1.blake2b_128)((0, concatUint8Arr_1.concatUint8Arr)(IRVar.tag, (0, positiveIntAsBytes_1.positiveIntAsBytes)(bdnVarHashCache.length))));
    }
    return bdnVarHashCache[dbn];
}
