"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.costModelToMachineCosts = exports.defaultV3MachineCosts = exports.defaultV2MachineCosts = exports.defaultV1MachineCosts = void 0;
var cardano_costmodels_ts_1 = require("@harmoniclabs/cardano-costmodels-ts");
var ExBudget_1 = require("./ExBudget.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
;
exports.defaultV1MachineCosts = Object.freeze({
    startup: new ExBudget_1.ExBudget({ mem: 100, cpu: 100 }),
    var: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    constant: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    lam: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    delay: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    force: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    apply: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    builtinNode: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    constr: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    case: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
});
exports.defaultV2MachineCosts = Object.freeze({
    startup: new ExBudget_1.ExBudget({ mem: 100, cpu: 100 }),
    var: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    constant: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    lam: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    delay: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    force: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    apply: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    builtinNode: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    constr: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    case: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
});
exports.defaultV3MachineCosts = Object.freeze({
    startup: new ExBudget_1.ExBudget({ mem: 100, cpu: 100 }),
    var: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    constant: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    lam: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    delay: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    force: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    apply: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    builtinNode: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    constr: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
    case: new ExBudget_1.ExBudget({ mem: 100, cpu: 16000 }),
});
function costModelToMachineCosts(costMdls) {
    var costs = 
    // always check latest version first
    (0, cardano_costmodels_ts_1.isCostModelsV3)(costMdls) ? (0, cardano_costmodels_ts_1.toCostModelV3)(__assign({}, costMdls)) :
        (0, cardano_costmodels_ts_1.isCostModelsV2)(costMdls) ? (0, cardano_costmodels_ts_1.costModelV2ToFakeV3)(__assign({}, costMdls)) :
            (0, cardano_costmodels_ts_1.costModelV1ToFakeV3)(__assign({}, costMdls));
    var result = {};
    function add(k, cpuKey, memKey) {
        var val = new ExBudget_1.ExBudget({
            mem: BigInt(costs[memKey]),
            cpu: BigInt(costs[cpuKey])
        });
        (0, obj_utils_1.definePropertyIfNotPresent)(result, k, {
            get: function () { return val.clone(); },
            set: function () { },
            enumerable: true,
            configurable: false
        });
    }
    add("startup", "cekStartupCost-exBudgetCPU", "cekStartupCost-exBudgetMemory");
    add("var", "cekVarCost-exBudgetCPU", "cekVarCost-exBudgetMemory");
    add("constant", "cekConstCost-exBudgetCPU", "cekConstCost-exBudgetMemory");
    add("lam", "cekLamCost-exBudgetCPU", "cekLamCost-exBudgetMemory");
    add("delay", "cekDelayCost-exBudgetCPU", "cekDelayCost-exBudgetMemory");
    add("force", "cekForceCost-exBudgetCPU", "cekForceCost-exBudgetMemory");
    add("apply", "cekApplyCost-exBudgetCPU", "cekApplyCost-exBudgetMemory");
    add("builtinNode", "cekBuiltinCost-exBudgetCPU", "cekBuiltinCost-exBudgetMemory");
    add("constr", "cekConstrCost-exBudgetCPU", "cekConstrCost-exBudgetMemory");
    add("case", "cekCaseCost-exBudgetCPU", "cekCaseCost-exBudgetMemory");
    return result;
}
exports.costModelToMachineCosts = costModelToMachineCosts;
