import { UPLCBuiltinTag } from "@harmoniclabs/uplc";
import { BuiltinCostsOf } from "../Machine/BuiltinCosts/BuiltinCosts.js";
import { ExBudget } from "../Machine/ExBudget.js";
import { PartialBuiltin } from "./PartialBuiltin.js";
import { CEKError } from "../CEKValue/CEKError.js";
import { CEKConst } from "../CEKValue/CEKConst.js";
import { CEKValue } from "../CEKValue/CEKValue.js";
export declare function haskellQuot(a: bigint, b: bigint): bigint | undefined;
export declare function haskellRem(a: bigint, b: bigint): bigint | undefined;
export declare function haskellDiv(a: bigint, b: bigint): bigint | undefined;
export declare function haskellMod(a: bigint, b: bigint): bigint | undefined;
type ConstOrErr = CEKConst | CEKError;
export declare class BnCEK {
    readonly getBuiltinCostFunc: <Tag extends UPLCBuiltinTag>(tag: Tag) => BuiltinCostsOf<Tag>;
    readonly logs: string[];
    /**
     * **reference** to the budget of the actual machine
    **/
    readonly machineBudget: ExBudget;
    constructor(getBuiltinCostFunc: <Tag extends UPLCBuiltinTag>(tag: Tag) => BuiltinCostsOf<Tag>, machineBudget: ExBudget, logs: string[]);
    eval(bn: PartialBuiltin): ConstOrErr;
    addInteger(_a: CEKValue, _b: CEKValue): ConstOrErr;
    subtractInteger(_a: CEKValue, _b: CEKValue): ConstOrErr;
    multiplyInteger(_a: CEKValue, _b: CEKValue): ConstOrErr;
    divideInteger(_a: CEKValue, _b: CEKValue): ConstOrErr;
    quotientInteger(_a: CEKValue, _b: CEKValue): ConstOrErr;
    remainderInteger(_a: CEKValue, _b: CEKValue): ConstOrErr;
    modInteger(_a: CEKValue, _b: CEKValue): ConstOrErr;
    equalsInteger(a: CEKValue, b: CEKValue): ConstOrErr;
    lessThanInteger(a: CEKValue, b: CEKValue): ConstOrErr;
    lessThanEqualInteger(a: CEKValue, b: CEKValue): ConstOrErr;
    appendByteString(a: CEKValue, b: CEKValue): ConstOrErr;
    consByteString(a: CEKValue, b: CEKValue): ConstOrErr;
    sliceByteString(fromIdx: CEKValue, ofLength: CEKValue, bs: CEKValue): ConstOrErr;
    lengthOfByteString(bs: CEKValue): ConstOrErr;
    indexByteString(bs: CEKValue, idx: CEKValue): ConstOrErr;
    equalsByteString(a: CEKValue, b: CEKValue): ConstOrErr;
    lessThanByteString(a: CEKValue, b: CEKValue): ConstOrErr;
    lessThanEqualsByteString(a: CEKValue, b: CEKValue): ConstOrErr;
    sha2_256(stuff: CEKValue): ConstOrErr;
    sha3_256(stuff: CEKValue): ConstOrErr;
    blake2b_256(stuff: CEKValue): ConstOrErr;
    verifyEd25519Signature(key: CEKValue, message: CEKValue, signature: CEKValue): ConstOrErr;
    appendString(a: CEKValue, b: CEKValue): ConstOrErr;
    equalsString(a: CEKValue, b: CEKValue): ConstOrErr;
    encodeUtf8(a: CEKValue): ConstOrErr;
    decodeUtf8(a: CEKValue): ConstOrErr;
    ifThenElse(condition: CEKValue, caseTrue: ConstOrErr, caseFalse: ConstOrErr): ConstOrErr;
    chooseUnit(unit: CEKValue, b: CEKValue): CEKValue;
    trace(msg: CEKValue, result: CEKValue): CEKValue;
    fstPair(pair: CEKValue): ConstOrErr;
    sndPair(pair: CEKValue): ConstOrErr;
    chooseList(list: CEKValue, whateverA: CEKValue, whateverB: CEKValue): CEKValue;
    mkCons(elem: CEKValue, list: CEKValue): CEKConst | CEKError;
    headList(list: CEKValue): ConstOrErr;
    tailList(list: CEKValue): ConstOrErr;
    nullList(list: CEKValue): ConstOrErr;
    chooseData(data: CEKValue, constr: CEKValue, map: CEKValue, list: CEKValue, int: CEKValue, bs: CEKValue): ConstOrErr;
    constrData(idx: CEKValue, fields: CEKValue): ConstOrErr;
    mapData(listOfPair: CEKValue): ConstOrErr;
    listData(listOfData: CEKValue): ConstOrErr;
    iData(int: CEKValue): ConstOrErr;
    bData(bs: CEKValue): ConstOrErr;
    unConstrData(data: CEKValue): ConstOrErr;
    unMapData(data: CEKValue): ConstOrErr;
    unListData(data: CEKValue): ConstOrErr;
    unIData(data: CEKValue): ConstOrErr;
    unBData(data: CEKValue): ConstOrErr;
    equalsData(a: CEKValue, b: CEKValue): ConstOrErr;
    mkPairData(a: CEKValue, b: CEKValue): ConstOrErr;
    mkNilData(unit: CEKValue): ConstOrErr;
    mkNilPairData(unit: CEKValue): ConstOrErr;
    serialiseData(data: CEKValue): ConstOrErr;
    verifyEcdsaSecp256k1Signature(a: CEKValue, b: CEKValue, c: CEKValue): ConstOrErr;
    verifySchnorrSecp256k1Signature(a: CEKValue, b: CEKValue, c: CEKValue): ConstOrErr;
    bls12_381_G1_add(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G1_neg(a: CEKValue): ConstOrErr;
    bls12_381_G1_scalarMul(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G1_equal(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G1_hashToGroup(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G1_compress(a: CEKValue): ConstOrErr;
    bls12_381_G1_uncompress(a: CEKValue): ConstOrErr;
    bls12_381_G2_add(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G2_neg(a: CEKValue): ConstOrErr;
    bls12_381_G2_scalarMul(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G2_equal(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G2_hashToGroup(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_G2_compress(a: CEKValue): ConstOrErr;
    bls12_381_G2_uncompress(a: CEKValue): ConstOrErr;
    bls12_381_millerLoop(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_mulMlResult(a: CEKValue, b: CEKValue): ConstOrErr;
    bls12_381_finalVerify(a: CEKValue, b: CEKValue): ConstOrErr;
    keccak_256(a: CEKValue): ConstOrErr;
    blake2b_224(a: CEKValue): ConstOrErr;
    integerToByteString(a: CEKValue, b: CEKValue, c: CEKValue): ConstOrErr;
    byteStringToInteger(a: CEKValue, b: CEKValue): ConstOrErr;
    andByteString(a: CEKValue, b: CEKValue, c: CEKValue): ConstOrErr;
    orByteString(a: CEKValue, b: CEKValue, c: CEKValue): ConstOrErr;
    xorByteString(a: CEKValue, b: CEKValue, c: CEKValue): ConstOrErr;
    complementByteString(_bs: CEKValue): ConstOrErr;
    readBit(_bs: CEKValue, _i: CEKValue): ConstOrErr;
    writeBits(_bs: CEKValue, _idxs: CEKValue, _bit: CEKValue): ConstOrErr;
    replicateByte(_len: CEKValue, _byte: CEKValue): ConstOrErr;
    shiftByteString(_bs: CEKValue, _k: CEKValue): ConstOrErr;
    rotateByteString(_bs: CEKValue, _k: CEKValue): ConstOrErr;
    countSetBits(_bs: CEKValue): ConstOrErr;
    findFirstSetBit(_bs: CEKValue): ConstOrErr;
    ripemd_160(_bs: CEKValue): ConstOrErr;
}
export {};
