"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CEKSteps = exports.ReturnStep = exports.ComputeStep = void 0;
var ComputeStep = /** @class */ (function () {
    function ComputeStep(term, env) {
        this._term = term;
        this._env = env;
    }
    Object.defineProperty(ComputeStep.prototype, "term", {
        get: function () { return this._term; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComputeStep.prototype, "env", {
        get: function () { return this._env; },
        enumerable: false,
        configurable: true
    });
    ComputeStep.prototype.clone = function () {
        return new ComputeStep(this._term.clone(), this._env.clone());
    };
    return ComputeStep;
}());
exports.ComputeStep = ComputeStep;
var ReturnStep = /** @class */ (function () {
    function ReturnStep(value) {
        this._value = value;
    }
    Object.defineProperty(ReturnStep.prototype, "value", {
        get: function () { return this._value; },
        enumerable: false,
        configurable: true
    });
    ReturnStep.prototype.clone = function () {
        return new ReturnStep(this.value.clone());
    };
    return ReturnStep;
}());
exports.ReturnStep = ReturnStep;
var CEKSteps = /** @class */ (function () {
    function CEKSteps() {
        this._steps = [];
    }
    CEKSteps.prototype.push = function (step) {
        this._steps.push(step);
    };
    CEKSteps.prototype.pop = function () {
        return this._steps.pop();
    };
    CEKSteps.prototype.top = function () {
        if (this._steps.length === 0)
            return undefined;
        return this._steps[this._steps.length - 1];
    };
    CEKSteps.prototype._clear = function () {
        this._steps.length = 0;
    };
    Object.defineProperty(CEKSteps.prototype, "topIsReturn", {
        get: function () {
            return this._steps[this._steps.length - 1] instanceof ReturnStep;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CEKSteps.prototype, "topIsCompute", {
        get: function () {
            return this._steps[this._steps.length - 1] instanceof ComputeStep;
        },
        enumerable: false,
        configurable: true
    });
    return CEKSteps;
}());
exports.CEKSteps = CEKSteps;
