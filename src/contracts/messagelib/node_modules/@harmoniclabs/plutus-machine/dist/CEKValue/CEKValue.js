"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eqCEKValue = exports.isCEKValue = void 0;
var uplc_1 = require("@harmoniclabs/uplc");
var PartialBuiltin_1 = require("../BnCEK/PartialBuiltin.js");
var CEKDelay_1 = require("./CEKDelay.js");
var CEKLambda_1 = require("./CEKLambda.js");
var CEKEnv_1 = require("../CEKEnv.js");
var CEKConst_1 = require("./CEKConst.js");
var CEKError_1 = require("./CEKError.js");
var CEKConstr_1 = require("./CEKConstr.js");
function isCEKValue(stuff) {
    return (stuff instanceof CEKConst_1.CEKConst ||
        stuff instanceof CEKDelay_1.CEKDelay ||
        stuff instanceof CEKLambda_1.CEKLambda ||
        stuff instanceof CEKConstr_1.CEKConstr ||
        stuff instanceof PartialBuiltin_1.PartialBuiltin ||
        stuff instanceof CEKError_1.CEKError);
}
exports.isCEKValue = isCEKValue;
function eqCEKValue(a, b) {
    if (a instanceof CEKError_1.CEKError)
        return b instanceof CEKError_1.CEKError;
    if (a instanceof CEKConst_1.CEKConst && b instanceof CEKConst_1.CEKConst) {
        return ((0, uplc_1.constTypeEq)(a.type, b.type) &&
            (0, uplc_1.canConstValueBeOfConstType)(a.value, a.type) &&
            (0, uplc_1.canConstValueBeOfConstType)(b.value, b.type) &&
            (function () {
                try {
                    return (0, uplc_1.eqConstValue)(a.value, b.value);
                }
                catch (e) {
                    if (e instanceof RangeError)
                        return false;
                    throw e;
                }
            })());
    }
    if (a instanceof CEKDelay_1.CEKDelay && b instanceof CEKDelay_1.CEKDelay)
        return (CEKEnv_1.CEKEnv.eq(a.env, b.env) &&
            (0, uplc_1.eqUPLCTerm)(a.delayedTerm, b.delayedTerm));
    if (a instanceof CEKLambda_1.CEKLambda && b instanceof CEKLambda_1.CEKLambda)
        return (CEKEnv_1.CEKEnv.eq(a.env, b.env) &&
            (0, uplc_1.eqUPLCTerm)(a.body, b.body));
    if (a instanceof CEKConstr_1.CEKConstr && b instanceof CEKConstr_1.CEKConstr)
        return (a.tag === b.tag &&
            a.values.length === b.values.length &&
            a.values.every(function (v, i) { return eqCEKValue(v, b.values[i]); }));
    if (a instanceof PartialBuiltin_1.PartialBuiltin && b instanceof PartialBuiltin_1.PartialBuiltin)
        return (a.tag === b.tag &&
            a.nMissingArgs === b.nMissingArgs &&
            a.args.every(function (arg, i) { return eqCEKValue(arg, b.args[i]); }));
    return false;
}
exports.eqCEKValue = eqCEKValue;
