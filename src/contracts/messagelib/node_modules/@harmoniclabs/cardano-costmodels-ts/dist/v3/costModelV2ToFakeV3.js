"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.costModelV2ToFakeV3 = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var a_lot_1 = require("../common/a_lot.js");
var v2_1 = require("../v2/index.js");
var defaultV3Costs_1 = require("./defaultV3Costs.js");
var newV3Keys_1 = require("./newV3Keys.js");
function costModelV2ToFakeV3(costmdlsV2) {
    var e_1, _a, e_2, _b;
    var costs = __assign({}, (0, v2_1.toCostModelV2)(costmdlsV2));
    var costKeys = Object.keys(costs);
    try {
        for (var costKeys_1 = __values(costKeys), costKeys_1_1 = costKeys_1.next(); !costKeys_1_1.done; costKeys_1_1 = costKeys_1.next()) {
            var k = costKeys_1_1.value;
            if (k.startsWith("divideInteger") ||
                k.startsWith("modInteger") ||
                k.startsWith("quotientInteger") ||
                k.startsWith("remainderInteger")) {
                delete costs[k];
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (costKeys_1_1 && !costKeys_1_1.done && (_a = costKeys_1.return)) _a.call(costKeys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    costs["divideInteger-cpu-arguments-constant"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-constant"];
    costs["divideInteger-cpu-arguments-model-arguments-c00"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-model-arguments-c00"];
    costs["divideInteger-cpu-arguments-model-arguments-c01"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-model-arguments-c01"];
    costs["divideInteger-cpu-arguments-model-arguments-c02"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-model-arguments-c02"];
    costs["divideInteger-cpu-arguments-model-arguments-c10"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-model-arguments-c10"];
    costs["divideInteger-cpu-arguments-model-arguments-c11"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-model-arguments-c11"];
    costs["divideInteger-cpu-arguments-model-arguments-c20"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-model-arguments-c20"];
    costs["divideInteger-cpu-arguments-model-arguments-minimum"] = defaultV3Costs_1.defaultV3Costs["divideInteger-cpu-arguments-model-arguments-minimum"];
    costs["modInteger-cpu-arguments-constant"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-constant"];
    costs["modInteger-cpu-arguments-model-arguments-c00"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-model-arguments-c00"];
    costs["modInteger-cpu-arguments-model-arguments-c01"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-model-arguments-c01"];
    costs["modInteger-cpu-arguments-model-arguments-c02"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-model-arguments-c02"];
    costs["modInteger-cpu-arguments-model-arguments-c10"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-model-arguments-c10"];
    costs["modInteger-cpu-arguments-model-arguments-c11"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-model-arguments-c11"];
    costs["modInteger-cpu-arguments-model-arguments-c20"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-model-arguments-c20"];
    costs["modInteger-cpu-arguments-model-arguments-minimum"] = defaultV3Costs_1.defaultV3Costs["modInteger-cpu-arguments-model-arguments-minimum"];
    costs["modInteger-memory-arguments-intercept"] = defaultV3Costs_1.defaultV3Costs["modInteger-memory-arguments-intercept"];
    costs["modInteger-memory-arguments-slope"] = defaultV3Costs_1.defaultV3Costs["modInteger-memory-arguments-slope"];
    costs["quotientInteger-cpu-arguments-constant"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-constant"];
    costs["quotientInteger-cpu-arguments-model-arguments-c00"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-model-arguments-c00"];
    costs["quotientInteger-cpu-arguments-model-arguments-c01"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-model-arguments-c01"];
    costs["quotientInteger-cpu-arguments-model-arguments-c02"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-model-arguments-c02"];
    costs["quotientInteger-cpu-arguments-model-arguments-c10"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-model-arguments-c10"];
    costs["quotientInteger-cpu-arguments-model-arguments-c11"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-model-arguments-c11"];
    costs["quotientInteger-cpu-arguments-model-arguments-c20"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-model-arguments-c20"];
    costs["quotientInteger-cpu-arguments-model-arguments-minimum"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-cpu-arguments-model-arguments-minimum"];
    costs["quotientInteger-memory-arguments-intercept"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-memory-arguments-intercept"];
    costs["quotientInteger-memory-arguments-minimum"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-memory-arguments-minimum"];
    costs["quotientInteger-memory-arguments-slope"] = defaultV3Costs_1.defaultV3Costs["quotientInteger-memory-arguments-slope"];
    costs["remainderInteger-cpu-arguments-constant"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-constant"];
    costs["remainderInteger-cpu-arguments-model-arguments-c00"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-model-arguments-c00"];
    costs["remainderInteger-cpu-arguments-model-arguments-c01"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-model-arguments-c01"];
    costs["remainderInteger-cpu-arguments-model-arguments-c02"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-model-arguments-c02"];
    costs["remainderInteger-cpu-arguments-model-arguments-c10"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-model-arguments-c10"];
    costs["remainderInteger-cpu-arguments-model-arguments-c11"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-model-arguments-c11"];
    costs["remainderInteger-cpu-arguments-model-arguments-c20"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-model-arguments-c20"];
    costs["remainderInteger-cpu-arguments-model-arguments-minimum"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-cpu-arguments-model-arguments-minimum"];
    costs["remainderInteger-memory-arguments-intercept"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-memory-arguments-intercept"];
    costs["remainderInteger-memory-arguments-slope"] = defaultV3Costs_1.defaultV3Costs["remainderInteger-memory-arguments-slope"];
    var realNewKeys = newV3Keys_1.newV3Keys.filter(function (k) { return !(k.startsWith("divideInteger") ||
        k.startsWith("modInteger") ||
        k.startsWith("quotientInteger") ||
        k.startsWith("remainderInteger")); });
    try {
        for (var realNewKeys_1 = __values(realNewKeys), realNewKeys_1_1 = realNewKeys_1.next(); !realNewKeys_1_1.done; realNewKeys_1_1 = realNewKeys_1.next()) {
            var key = realNewKeys_1_1.value;
            (0, obj_utils_1.defineReadOnlyProperty)(costs, key, a_lot_1.a_lot);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (realNewKeys_1_1 && !realNewKeys_1_1.done && (_b = realNewKeys_1.return)) _b.call(realNewKeys_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    // makeItALot("cekConstrCost-exBudgetCPU");
    // makeItALot("cekConstrCost-exBudgetMemory");
    // makeItALot("cekCaseCost-exBudgetCPU");
    // makeItALot("cekCaseCost-exBudgetMemory");
    // makeItALot("bls12_381_G1_add-cpu-arguments");
    // makeItALot("bls12_381_G1_add-memory-arguments");
    // makeItALot("bls12_381_G1_compress-cpu-arguments");
    // makeItALot("bls12_381_G1_compress-memory-arguments");
    // makeItALot("bls12_381_G1_equal-cpu-arguments");
    // makeItALot("bls12_381_G1_equal-memory-arguments");
    // makeItALot("bls12_381_G1_hashToGroup-cpu-arguments-intercept");
    // makeItALot("bls12_381_G1_hashToGroup-cpu-arguments-slope");
    // makeItALot("bls12_381_G1_hashToGroup-memory-arguments");
    // makeItALot("bls12_381_G1_neg-cpu-arguments");
    // makeItALot("bls12_381_G1_neg-memory-arguments");
    // makeItALot("bls12_381_G1_scalarMul-cpu-arguments-intercept");
    // makeItALot("bls12_381_G1_scalarMul-cpu-arguments-slope");
    // makeItALot("bls12_381_G1_scalarMul-memory-arguments");
    // makeItALot("bls12_381_G1_uncompress-cpu-arguments");
    // makeItALot("bls12_381_G1_uncompress-memory-arguments");
    // makeItALot("bls12_381_G2_add-cpu-arguments");
    // makeItALot("bls12_381_G2_add-memory-arguments");
    // makeItALot("bls12_381_G2_compress-cpu-arguments");
    // makeItALot("bls12_381_G2_compress-memory-arguments");
    // makeItALot("bls12_381_G2_equal-cpu-arguments");
    // makeItALot("bls12_381_G2_equal-memory-arguments");
    // makeItALot("bls12_381_G2_hashToGroup-cpu-arguments-intercept");
    // makeItALot("bls12_381_G2_hashToGroup-cpu-arguments-slope");
    // makeItALot("bls12_381_G2_hashToGroup-memory-arguments");
    // makeItALot("bls12_381_G2_neg-cpu-arguments");
    // makeItALot("bls12_381_G2_neg-memory-arguments");
    // makeItALot("bls12_381_G2_scalarMul-cpu-arguments-intercept");
    // makeItALot("bls12_381_G2_scalarMul-cpu-arguments-slope");
    // makeItALot("bls12_381_G2_scalarMul-memory-arguments");
    // makeItALot("bls12_381_G2_uncompress-cpu-arguments");
    // makeItALot("bls12_381_G2_uncompress-memory-arguments");
    // makeItALot("bls12_381_finalVerify-cpu-arguments");
    // makeItALot("bls12_381_finalVerify-memory-arguments");
    // makeItALot("bls12_381_millerLoop-cpu-arguments");
    // makeItALot("bls12_381_millerLoop-memory-arguments");
    // makeItALot("bls12_381_mulMlResult-cpu-arguments");
    // makeItALot("bls12_381_mulMlResult-memory-arguments");
    // makeItALot("keccak_256-cpu-arguments-intercept");
    // makeItALot("keccak_256-cpu-arguments-slope");
    // makeItALot("keccak_256-memory-arguments");
    // makeItALot("blake2b_224-cpu-arguments-intercept");
    // makeItALot("blake2b_224-cpu-arguments-slope");
    // makeItALot("blake2b_224-memory-arguments");
    // makeItALot("integerToByteString-cpu-arguments-c0");
    // makeItALot("integerToByteString-cpu-arguments-c1");
    // makeItALot("integerToByteString-cpu-arguments-c2");
    // makeItALot("integerToByteString-memory-arguments-intercept");
    // makeItALot("integerToByteString-memory-arguments-slope");
    // makeItALot("byteStringToInteger-cpu-arguments-c0");
    // makeItALot("byteStringToInteger-cpu-arguments-c1");
    // makeItALot("byteStringToInteger-cpu-arguments-c2");
    // makeItALot("byteStringToInteger-memory-arguments-intercept");
    // makeItALot("byteStringToInteger-memory-arguments-slope");
    return __assign(__assign({}, defaultV3Costs_1.defaultV3Costs), costs);
}
exports.costModelV2ToFakeV3 = costModelV2ToFakeV3;
