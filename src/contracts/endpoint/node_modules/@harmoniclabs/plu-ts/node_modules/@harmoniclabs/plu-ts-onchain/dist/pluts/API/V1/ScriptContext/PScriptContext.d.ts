export declare const PScriptContext: import("../../../PTypes/PStruct/pstruct.js").PStruct<{
    PScriptContext: {
        tx: import("../../../index.js").StructT<{
            PTxInfo: {
                inputs: [import("../../../index.js").PrimType.List, import("../../../index.js").StructT<{
                    PTxInInfo: {
                        utxoRef: import("../../../index.js").StructT<{
                            PTxOutRef: {
                                id: import("../../../index.js").StructT<{
                                    PTxId: {
                                        txId: [import("../../../index.js").PrimType.BS];
                                    };
                                }, import("../../../index.js").Methods>;
                                index: [import("../../../index.js").PrimType.Int];
                            };
                        }, import("../../../index.js").Methods>;
                        resolved: import("../../../index.js").StructT<{
                            PTxOut: {
                                address: import("../../../index.js").StructT<{
                                    PAddress: {
                                        credential: import("../../../index.js").StructT<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {
                                            hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                PPubKeyCredential: {
                                                    pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                };
                                                PScriptCredential: {
                                                    valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                };
                                            }, {}>, import("../../../index.js").PByteString>> & {
                                                $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                    PPubKeyCredential: {
                                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                    };
                                                    PScriptCredential: {
                                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                    };
                                                }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                            };
                                        }>;
                                        stakingCredential: import("../../../index.js").StructT<{
                                            Just: {
                                                val: import("../../../index.js").StructT<{
                                                    PStakingHash: {
                                                        _0: import("../../../index.js").StructT<{
                                                            PPubKeyCredential: {
                                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                            };
                                                            PScriptCredential: {
                                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                            };
                                                        }, {
                                                            hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                                PPubKeyCredential: {
                                                                    pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                                };
                                                                PScriptCredential: {
                                                                    valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                                };
                                                            }, {}>, import("../../../index.js").PByteString>> & {
                                                                $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                                    PPubKeyCredential: {
                                                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                                    };
                                                                    PScriptCredential: {
                                                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                                    };
                                                                }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                                            };
                                                        }>;
                                                    };
                                                    PStakingPtr: {
                                                        _0: [import("../../../index.js").PrimType.Int];
                                                        _1: [import("../../../index.js").PrimType.Int];
                                                        _2: [import("../../../index.js").PrimType.Int];
                                                    };
                                                }, import("../../../index.js").Methods>;
                                            };
                                            Nothing: {};
                                        }, import("../../../index.js").Methods>;
                                    };
                                }, import("../../../index.js").Methods>;
                                value: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.Int]], {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }]]], {
                                    policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>;
                                    };
                                }]], {
                                    amountOf: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, {
                                        policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>;
                                        };
                                    }>>, any>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, {
                                            policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                    };
                                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                    };
                                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                    };
                                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                    };
                                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                    };
                                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                    };
                                                }>>>;
                                            };
                                        }>>, any>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>> & {
                                            $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>> & {
                                                $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        };
                                    };
                                    lovelaces: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, {
                                        policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>;
                                        };
                                    }>>, any>, import("../../../index.js").PInt>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, {
                                            policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                    };
                                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                    };
                                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                };
                                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                };
                                            }>>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                    };
                                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                    };
                                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                                    };
                                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                                    };
                                                }>>>;
                                            };
                                        }>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }];
                                datumHash: import("../../../index.js").StructT<{
                                    Just: {
                                        val: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    Nothing: {};
                                }, import("../../../index.js").Methods>;
                            };
                        }, import("../../../index.js").Methods>;
                    };
                }, import("../../../index.js").Methods>];
                outputs: [import("../../../index.js").PrimType.List, import("../../../index.js").StructT<{
                    PTxOut: {
                        address: import("../../../index.js").StructT<{
                            PAddress: {
                                credential: import("../../../index.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                    }, {}>, import("../../../index.js").PByteString>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                    };
                                }>;
                                stakingCredential: import("../../../index.js").StructT<{
                                    Just: {
                                        val: import("../../../index.js").StructT<{
                                            PStakingHash: {
                                                _0: import("../../../index.js").StructT<{
                                                    PPubKeyCredential: {
                                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                    };
                                                    PScriptCredential: {
                                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                    };
                                                }, {
                                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                        PPubKeyCredential: {
                                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                        };
                                                        PScriptCredential: {
                                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                        };
                                                    }, {}>, import("../../../index.js").PByteString>> & {
                                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                                            PPubKeyCredential: {
                                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                            };
                                                            PScriptCredential: {
                                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                                            };
                                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                                    };
                                                }>;
                                            };
                                            PStakingPtr: {
                                                _0: [import("../../../index.js").PrimType.Int];
                                                _1: [import("../../../index.js").PrimType.Int];
                                                _2: [import("../../../index.js").PrimType.Int];
                                            };
                                        }, import("../../../index.js").Methods>;
                                    };
                                    Nothing: {};
                                }, import("../../../index.js").Methods>;
                            };
                        }, import("../../../index.js").Methods>;
                        value: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.Int]], {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }]]], {
                            policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }]], {
                            amountOf: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, {
                                policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>;
                                };
                            }>>, any>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>>> & {
                                $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, {
                                    policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>;
                                    };
                                }>>, any>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>> & {
                                    $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                };
                            };
                            lovelaces: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, {
                                policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>;
                                };
                            }>>, any>, import("../../../index.js").PInt>> & {
                                $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, {
                                    policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                        };
                                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                        };
                                    }>>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                            };
                                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                            };
                                        }>>>;
                                    };
                                }>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }];
                        datumHash: import("../../../index.js").StructT<{
                            Just: {
                                val: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                            };
                            Nothing: {};
                        }, import("../../../index.js").Methods>;
                    };
                }, import("../../../index.js").Methods>];
                fee: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.Int]], {
                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                    };
                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                    };
                }]]], {
                    policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                    };
                    assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>;
                    };
                }]], {
                    amountOf: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, {
                        policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>;
                        };
                    }>>, any>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>>> & {
                        $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, {
                            policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }>>, any>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>> & {
                            $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>> & {
                                $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        };
                    };
                    lovelaces: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, {
                        policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>;
                        };
                    }>>, any>, import("../../../index.js").PInt>> & {
                        $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, {
                            policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                    };
                }];
                mint: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.Int]], {
                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                    };
                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                    };
                }]]], {
                    policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                    };
                    assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>> & {
                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>;
                    };
                }]], {
                    amountOf: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, {
                        policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>;
                        };
                    }>>, any>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>>> & {
                        $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, {
                            policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }>>, any>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>>> & {
                            $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>> & {
                                $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        };
                    };
                    lovelaces: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                        tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                        };
                    }>>>, {
                        policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                        };
                        assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>> & {
                            $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>;
                        };
                    }>>, any>, import("../../../index.js").PInt>> & {
                        $: (input: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                            tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                            };
                        }>>>, {
                            policy: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                            };
                            assets: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>, any>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                };
                                quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                    $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                };
                            }>>>> & {
                                $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PList<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, {
                                    tokenName: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>>;
                                    };
                                    quantity: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>, import("../../../index.js").PInt>> & {
                                        $: (someInput: import("../../../index.js").PappArg<import("../../../index.js").PAlias<import("../../../index.js").PPair<import("../../../index.js").PAlias<import("../../../index.js").PByteString, import("../../../index.js").Methods>, import("../../../index.js").PInt>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                                    };
                                }>>>;
                            };
                        }>>, any>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PInt>;
                    };
                }];
                dCertificates: [import("../../../index.js").PrimType.List, import("../../../index.js").StructT<{
                    KeyRegistration: {
                        stakeKey: import("../../../index.js").StructT<{
                            PStakingHash: {
                                _0: import("../../../index.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                    }, {}>, import("../../../index.js").PByteString>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                    };
                                }>;
                            };
                            PStakingPtr: {
                                _0: [import("../../../index.js").PrimType.Int];
                                _1: [import("../../../index.js").PrimType.Int];
                                _2: [import("../../../index.js").PrimType.Int];
                            };
                        }, import("../../../index.js").Methods>;
                    };
                    KeyDeRegistration: {
                        stakeKey: import("../../../index.js").StructT<{
                            PStakingHash: {
                                _0: import("../../../index.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                    }, {}>, import("../../../index.js").PByteString>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                    };
                                }>;
                            };
                            PStakingPtr: {
                                _0: [import("../../../index.js").PrimType.Int];
                                _1: [import("../../../index.js").PrimType.Int];
                                _2: [import("../../../index.js").PrimType.Int];
                            };
                        }, import("../../../index.js").Methods>;
                    };
                    KeyDelegation: {
                        delegator: import("../../../index.js").StructT<{
                            PStakingHash: {
                                _0: import("../../../index.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                    }, {}>, import("../../../index.js").PByteString>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                    };
                                }>;
                            };
                            PStakingPtr: {
                                _0: [import("../../../index.js").PrimType.Int];
                                _1: [import("../../../index.js").PrimType.Int];
                                _2: [import("../../../index.js").PrimType.Int];
                            };
                        }, import("../../../index.js").Methods>;
                        poolKeyHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                    };
                    PoolRegistration: {
                        poolId: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                        poolVFR: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                    };
                    PoolRetire: {
                        poolId: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                        epoch: [import("../../../index.js").PrimType.Int];
                    };
                    Genesis: {};
                    MoveInstantRewards: {};
                }, import("../../../index.js").Methods>];
                withdrawals: [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Pair, import("../../../index.js").StructT<{
                    PStakingHash: {
                        _0: import("../../../index.js").StructT<{
                            PPubKeyCredential: {
                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                            };
                            PScriptCredential: {
                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                            };
                        }, {
                            hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                PPubKeyCredential: {
                                    pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                };
                                PScriptCredential: {
                                    valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                };
                            }, {}>, import("../../../index.js").PByteString>> & {
                                $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                            };
                        }>;
                    };
                    PStakingPtr: {
                        _0: [import("../../../index.js").PrimType.Int];
                        _1: [import("../../../index.js").PrimType.Int];
                        _2: [import("../../../index.js").PrimType.Int];
                    };
                }, import("../../../index.js").Methods>, [import("../../../index.js").PrimType.Int]]];
                interval: import("../../../index.js").StructT<{
                    PInterval: {
                        from: import("../../../index.js").StructT<{
                            PLowerBound: {
                                bound: import("../../../index.js").StructT<{
                                    PNegInf: {};
                                    PFinite: {
                                        _0: [import("../../../index.js").PrimType.Int];
                                    };
                                    PPosInf: {};
                                }, import("../../../index.js").Methods>;
                                inclusive: [import("../../../index.js").PrimType.Bool];
                            };
                        }, import("../../../index.js").Methods>;
                        to: import("../../../index.js").StructT<{
                            PUpperBound: {
                                bound: import("../../../index.js").StructT<{
                                    PNegInf: {};
                                    PFinite: {
                                        _0: [import("../../../index.js").PrimType.Int];
                                    };
                                    PPosInf: {};
                                }, import("../../../index.js").Methods>;
                                inclusive: [import("../../../index.js").PrimType.Bool];
                            };
                        }, import("../../../index.js").Methods>;
                    };
                }, import("../../../index.js").Methods>;
                signatories: [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods]];
                datums: [import("../../../index.js").PrimType.List, [import("../../../index.js").PrimType.Pair, [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods], [import("../../../index.js").PrimType.Data]]];
                id: import("../../../index.js").StructT<{
                    PTxId: {
                        txId: [import("../../../index.js").PrimType.BS];
                    };
                }, import("../../../index.js").Methods>;
            };
        }, import("../../../index.js").Methods>;
        purpose: import("../../../index.js").StructT<{
            Minting: {
                currencySym: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
            };
            Spending: {
                utxoRef: import("../../../index.js").StructT<{
                    PTxOutRef: {
                        id: import("../../../index.js").StructT<{
                            PTxId: {
                                txId: [import("../../../index.js").PrimType.BS];
                            };
                        }, import("../../../index.js").Methods>;
                        index: [import("../../../index.js").PrimType.Int];
                    };
                }, import("../../../index.js").Methods>;
            };
            Rewarding: {
                stakeCredential: import("../../../index.js").StructT<{
                    PStakingHash: {
                        _0: import("../../../index.js").StructT<{
                            PPubKeyCredential: {
                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                            };
                            PScriptCredential: {
                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                            };
                        }, {
                            hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                PPubKeyCredential: {
                                    pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                };
                                PScriptCredential: {
                                    valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                };
                            }, {}>, import("../../../index.js").PByteString>> & {
                                $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                            };
                        }>;
                    };
                    PStakingPtr: {
                        _0: [import("../../../index.js").PrimType.Int];
                        _1: [import("../../../index.js").PrimType.Int];
                        _2: [import("../../../index.js").PrimType.Int];
                    };
                }, import("../../../index.js").Methods>;
            };
            Certifying: {
                dCert: import("../../../index.js").StructT<{
                    KeyRegistration: {
                        stakeKey: import("../../../index.js").StructT<{
                            PStakingHash: {
                                _0: import("../../../index.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                    }, {}>, import("../../../index.js").PByteString>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                    };
                                }>;
                            };
                            PStakingPtr: {
                                _0: [import("../../../index.js").PrimType.Int];
                                _1: [import("../../../index.js").PrimType.Int];
                                _2: [import("../../../index.js").PrimType.Int];
                            };
                        }, import("../../../index.js").Methods>;
                    };
                    KeyDeRegistration: {
                        stakeKey: import("../../../index.js").StructT<{
                            PStakingHash: {
                                _0: import("../../../index.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                    }, {}>, import("../../../index.js").PByteString>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                    };
                                }>;
                            };
                            PStakingPtr: {
                                _0: [import("../../../index.js").PrimType.Int];
                                _1: [import("../../../index.js").PrimType.Int];
                                _2: [import("../../../index.js").PrimType.Int];
                            };
                        }, import("../../../index.js").Methods>;
                    };
                    KeyDelegation: {
                        delegator: import("../../../index.js").StructT<{
                            PStakingHash: {
                                _0: import("../../../index.js").StructT<{
                                    PPubKeyCredential: {
                                        pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                    PScriptCredential: {
                                        valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                    };
                                }, {
                                    hash: import("../../../index.js").Term<import("../../../index.js").PLam<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                        PPubKeyCredential: {
                                            pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                        PScriptCredential: {
                                            valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                        };
                                    }, {}>, import("../../../index.js").PByteString>> & {
                                        $: (input: import("../../../index.js").PappArg<import("../../../PTypes/PStruct/pstruct.js").PStruct<{
                                            PPubKeyCredential: {
                                                pkh: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                            PScriptCredential: {
                                                valHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                                            };
                                        }, {}>>) => import("../../../index.js").UtilityTermOf<import("../../../index.js").PByteString>;
                                    };
                                }>;
                            };
                            PStakingPtr: {
                                _0: [import("../../../index.js").PrimType.Int];
                                _1: [import("../../../index.js").PrimType.Int];
                                _2: [import("../../../index.js").PrimType.Int];
                            };
                        }, import("../../../index.js").Methods>;
                        poolKeyHash: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                    };
                    PoolRegistration: {
                        poolId: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                        poolVFR: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                    };
                    PoolRetire: {
                        poolId: [import("../../../index.js").PrimType.Alias, [import("../../../index.js").PrimType.BS], import("../../../index.js").Methods];
                        epoch: [import("../../../index.js").PrimType.Int];
                    };
                    Genesis: {};
                    MoveInstantRewards: {};
                }, import("../../../index.js").Methods>;
            };
        }, import("../../../index.js").Methods>;
    };
}, import("../../../index.js").Methods>;
