"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExBudget = void 0;
var biguint_1 = require("@harmoniclabs/biguint");
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var ExBudget = /** @class */ (function () {
    function ExBudget(args_or_cpu, mem) {
        var _cpu;
        var _mem;
        if (typeof args_or_cpu === "object") {
            _cpu = (0, biguint_1.forceBigUInt)(args_or_cpu.cpu);
            _mem = (0, biguint_1.forceBigUInt)(args_or_cpu.mem);
        }
        else {
            _cpu = (0, biguint_1.forceBigUInt)(args_or_cpu);
            if (mem === undefined) {
                throw new Error('missing "mem" paramter while cosntructing "ExBudget" instance');
            }
            _mem = (0, biguint_1.forceBigUInt)(mem);
        }
        (0, obj_utils_1.definePropertyIfNotPresent)(this, "cpu", {
            get: function () { return _cpu; },
            set: function () {
                var _whatever = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    _whatever[_i] = arguments[_i];
                }
            },
            enumerable: true,
            configurable: false
        });
        (0, obj_utils_1.definePropertyIfNotPresent)(this, "mem", {
            get: function () { return _mem; },
            set: function () {
                var _whatever = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    _whatever[_i] = arguments[_i];
                }
            },
            enumerable: true,
            configurable: false
        });
        (0, obj_utils_1.defineReadOnlyProperty)(this, "add", function (other) {
            _cpu = _cpu + (0, biguint_1.forceBigUInt)(other.cpu);
            _mem = _mem + (0, biguint_1.forceBigUInt)(other.mem);
        });
        (0, obj_utils_1.defineReadOnlyProperty)(this, "sub", function (other) {
            _cpu = _cpu - (0, biguint_1.forceBigUInt)(other.cpu);
            _mem = _mem - (0, biguint_1.forceBigUInt)(other.mem);
        });
    }
    ExBudget.add = function (a, b) {
        return new ExBudget(a.cpu + b.cpu, a.mem + b.mem);
    };
    ExBudget.sub = function (a, b) {
        var cpu = a.cpu - b.cpu;
        var mem = a.mem - b.mem;
        return new ExBudget(cpu, mem);
    };
    Object.defineProperty(ExBudget, "default", {
        get: function () {
            return new ExBudget(10000000000, // cpu
            14000000 // mem
            );
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExBudget, "maxCborSize", {
        get: function () {
            var max_uint64 = (BigInt(1) << BigInt(64)) - BigInt(1);
            return new ExBudget(max_uint64, // cpu
            max_uint64 // mem
            );
        },
        enumerable: false,
        configurable: true
    });
    ExBudget.prototype.clone = function () {
        return new ExBudget(this.cpu, this.mem);
    };
    ExBudget.prototype.toCbor = function () {
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    ExBudget.prototype.toCborObj = function () {
        return new cbor_1.CborArray([
            new cbor_1.CborUInt(this.mem),
            new cbor_1.CborUInt(this.cpu)
        ]);
    };
    ExBudget.fromCbor = function (cStr) {
        return ExBudget.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr)));
    };
    ExBudget.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray &&
            cObj.array[0] instanceof cbor_1.CborUInt &&
            cObj.array[1] instanceof cbor_1.CborUInt))
            throw new Error("Invalid CBOR format for \"ExBudget\"");
        return new ExBudget({
            mem: cObj.array[0].num,
            cpu: cObj.array[1].num,
        });
    };
    ExBudget.prototype.toJson = function () {
        return {
            steps: this.cpu.toString(),
            memory: this.mem.toString()
        };
    };
    ExBudget.fromJson = function (stuff) {
        return new ExBudget({
            mem: stuff.memory,
            cpu: stuff.steps,
        });
    };
    ExBudget.isJson = function (stuff) {
        return ((0, obj_utils_1.isObject)(stuff) &&
            typeof stuff.memory === "number" &&
            typeof stuff.steps === "number");
    };
    return ExBudget;
}());
exports.ExBudget = ExBudget;
