import { TxBody } from "../body/TxBody.js";
import { ToCbor, CborString, CborArray, CanBeCborString, CborObj } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { Data, DataConstr } from "@harmoniclabs/plutus-data";
import { ExBudget } from "@harmoniclabs/plutus-machine";
import { ToJson } from "../../utils/ToJson.js";
import { CanBeUInteger } from "../../utils/ints.js";
export declare enum TxRedeemerTag {
    Spend = 0,
    Mint = 1,
    Cert = 2,
    Withdraw = 3
}
export declare function txRdmrTagToString(tag: TxRedeemerTag): string;
export type TxRedeemerTagStr<Tag extends TxRedeemerTag> = Tag extends TxRedeemerTag.Spend ? "Spend" : Tag extends TxRedeemerTag.Mint ? "Mint" : Tag extends TxRedeemerTag.Cert ? "Cert" : Tag extends TxRedeemerTag.Withdraw ? "Withdraw" : never;
export declare function txRedeemerTagToString<Tag extends TxRedeemerTag>(tag: Tag): TxRedeemerTagStr<Tag>;
export interface ITxRedeemer {
    tag: TxRedeemerTag;
    index: CanBeUInteger;
    data: Data;
    execUnits: ExBudget;
}
export declare class TxRedeemer implements ITxRedeemer, ToCbor, Cloneable<TxRedeemer>, ToJson {
    readonly tag: TxRedeemerTag;
    /**
     * index of the input the redeemer corresponds to
    **/
    readonly index: number;
    /**
     * the actual value of the redeemer
    **/
    readonly data: Data;
    execUnits: ExBudget;
    constructor(redeemer: ITxRedeemer);
    clone(): TxRedeemer;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCbor(cStr: CanBeCborString): TxRedeemer;
    static fromCborObj(cObj: CborObj): TxRedeemer;
    toJson(): {
        tag: "Spend" | "Mint" | "Cert" | "Withdraw";
        index: number;
        execUnits: {
            steps: string;
            memory: string;
        };
        data: any;
    };
    toSpendingPurposeData(tx: TxBody): DataConstr;
}
