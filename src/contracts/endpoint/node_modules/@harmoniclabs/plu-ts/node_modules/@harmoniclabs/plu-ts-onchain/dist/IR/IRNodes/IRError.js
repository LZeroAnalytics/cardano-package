"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IRError = void 0;
var crypto_1 = require("@harmoniclabs/crypto");
var isIRParentTerm_1 = require("../utils/isIRParentTerm.js");
var _modifyChildFromTo_1 = require("../toUPLC/_internal/_modifyChildFromTo.js");
var irErrorBitTag = new Uint8Array([7]);
var errorHash = (0, crypto_1.blake2b_128)(irErrorBitTag.slice());
var IRError = /** @class */ (function () {
    function IRError(msg, addInfos) {
        var _this = this;
        this.msg = msg;
        this.addInfos = addInfos !== null && addInfos !== void 0 ? addInfos : {};
        Object.defineProperty(this, "meta", {
            value: {},
            writable: false,
            enumerable: true,
            configurable: false
        });
        var _parent = undefined;
        Object.defineProperty(this, "parent", {
            get: function () { return _parent; },
            set: function (newParent) {
                if (!( // assert
                // new parent value is different than current
                _parent !== newParent && (
                // and the new parent value is valid
                newParent === undefined ||
                    (0, isIRParentTerm_1.isIRParentTerm)(newParent))))
                    return;
                // keep reference
                var oldParent = _parent;
                // change parent
                _parent = newParent;
                // if has old parent
                if (oldParent !== undefined && (0, isIRParentTerm_1.isIRParentTerm)(oldParent)) {
                    // change reference to a clone for safety
                    (0, _modifyChildFromTo_1._modifyChildFromTo)(oldParent, _this, _this.clone());
                }
            },
            enumerable: true,
            configurable: false
        });
        Object.defineProperty(this, "hash", {
            get: function () { return errorHash.slice(); },
            set: function () { },
            enumerable: true,
            configurable: false,
        });
        Object.defineProperty(this, "markHashAsInvalid", {
            value: function () { throw new Error("IRError.markHashAsInvalid was called but error doesn't have childs"); },
            writable: false,
            enumerable: true,
            configurable: false
        });
    }
    Object.defineProperty(IRError, "tag", {
        get: function () { return irErrorBitTag.slice(); },
        enumerable: false,
        configurable: true
    });
    IRError.prototype.clone = function () {
        return new IRError();
    };
    IRError.prototype.toJson = function () {
        return {
            type: "IRError"
        };
    };
    return IRError;
}());
exports.IRError = IRError;
;
