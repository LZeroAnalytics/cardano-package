import { ToCbor, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { ToData, DataConstr } from "@harmoniclabs/plutus-data";
import { Hash28 } from "../hashes/Hash28/Hash28.js";
import { CanBeUInteger } from "../utils/ints.js";
import { StakeKeyHash } from "./StakeKeyHash.js";
export declare class StakeValidatorHash extends Hash28 {
}
export type StakeCredentialsType = "stakeKey" | "script" | "pointer";
export type StakeHash<T extends StakeCredentialsType> = T extends "stakeKey" ? StakeKeyHash : T extends "script" ? StakeValidatorHash : T extends "pointer" ? [CanBeUInteger, CanBeUInteger, CanBeUInteger] : never;
export declare class StakeCredentials<T extends StakeCredentialsType = StakeCredentialsType> implements ToCbor, ToData {
    readonly type: T;
    readonly hash: StakeHash<T>;
    constructor(type: T, hash: StakeHash<T>);
    clone(): StakeCredentials<T>;
    toData(): DataConstr;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cObj: CanBeCborString): StakeCredentials;
    static fromCborObj(cObj: CborObj): StakeCredentials;
    toJson(): {
        type: string;
        hash: string;
        pointer?: undefined;
    } | {
        type: string;
        pointer: string[];
        hash?: undefined;
    };
}
