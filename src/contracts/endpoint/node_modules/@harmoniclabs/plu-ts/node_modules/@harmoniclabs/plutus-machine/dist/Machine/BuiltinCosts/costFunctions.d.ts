type PossibleNArgs = 1 | 2 | 3 | 6;
type CostFuncNToArgs<N extends PossibleNArgs> = N extends 1 ? [x: bigint] : N extends 2 ? [x: bigint, y: bigint] : N extends 3 ? [x: bigint, y: bigint, z: bigint] : N extends 6 ? [a: bigint, b: bigint, c: bigint, d: bigint, e: bigint, f: bigint] : never;
export interface CostFunc<NArgs extends PossibleNArgs> {
    at: (...args: CostFuncNToArgs<NArgs>) => bigint;
}
export interface ConstantCostFunc {
    const: bigint;
}
export interface LinearCostFunc<N extends PossibleNArgs> extends CostFunc<N> {
    quote: bigint;
    slope: bigint;
}
export interface Minimum {
    min: bigint;
}
export declare class FixedCost implements CostFunc<1 | 2 | 3 | 6>, ConstantCostFunc {
    readonly const: bigint;
    constructor(constant: bigint);
    at(...xs: bigint[]): bigint;
}
declare class BaseLinear {
    readonly quote: bigint;
    readonly slope: bigint;
    constructor(quote: bigint, slope: bigint);
}
export declare class Linear1 extends BaseLinear implements LinearCostFunc<1> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint): bigint;
}
export declare class Linear2InX extends BaseLinear implements LinearCostFunc<2> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class Linear2InY extends BaseLinear implements LinearCostFunc<2> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class Linear2InBothAdd extends BaseLinear implements LinearCostFunc<2> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class Linear2InBothSub extends BaseLinear implements LinearCostFunc<2>, Minimum {
    readonly min: bigint;
    constructor(quote: bigint, slope: bigint, min: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class Linear2InBothMult extends BaseLinear implements LinearCostFunc<2> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class Linear2InMin extends BaseLinear implements LinearCostFunc<2> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class Linear2InMax extends BaseLinear implements LinearCostFunc<2> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class LinearOnEqualXY extends BaseLinear implements LinearCostFunc<2>, ConstantCostFunc {
    readonly const: bigint;
    constructor(quote: bigint, slope: bigint, constant: bigint);
    at(x: bigint, y: bigint): bigint;
}
export declare class YGtEqOrConst<CostF extends CostFunc<2>> implements CostFunc<2>, ConstantCostFunc {
    readonly const: bigint;
    readonly f: CostF;
    constructor(constant: bigint, f: CostF);
    at(x: bigint, y: bigint): bigint;
}
export declare class XGtEqOrConst<CostF extends CostFunc<2>> implements CostFunc<2>, ConstantCostFunc {
    readonly const: bigint;
    readonly f: CostF;
    constructor(constant: bigint, f: CostF);
    at(x: bigint, y: bigint): bigint;
}
export declare class LinearInAll3 extends BaseLinear implements LinearCostFunc<3> {
    constructor(quote: bigint, slope: bigint, constant: bigint);
    at(x: bigint, y: bigint, z: bigint): bigint;
}
export declare class Linear3InX extends BaseLinear implements LinearCostFunc<3> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint, z: bigint): bigint;
}
export declare class Linear3InY extends BaseLinear implements LinearCostFunc<3> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint, z: bigint): bigint;
}
export declare class Linear3InZ extends BaseLinear implements LinearCostFunc<3> {
    constructor(quote: bigint, slope: bigint);
    at(x: bigint, y: bigint, z: bigint): bigint;
}
export type OneArg = FixedCost | Linear1;
export type TwoArgs = FixedCost | Linear2InX | Linear2InY | Linear2InBothAdd | Linear2InBothSub | Linear2InBothMult | Linear2InMin | Linear2InMax | LinearOnEqualXY | YGtEqOrConst<CostFunc<2>> | XGtEqOrConst<CostFunc<2>>;
export type ThreeArgs = FixedCost | LinearInAll3 | Linear3InX | Linear3InY | Linear3InZ;
export type SixArgs = FixedCost;
export type CostFunction = OneArg | TwoArgs | ThreeArgs | SixArgs;
export {};
