import type { Epoch } from "../Epoch.js";
import type { Coin } from "../Coin.js";
import { CborPositiveRational, CborObj, CborMap } from "@harmoniclabs/cbor";
import { CanBeUInteger } from "../../utils/ints.js";
import { CostModels } from "@harmoniclabs/cardano-costmodels-ts";
import { ExBudget, ExBudgetJson } from "@harmoniclabs/plutus-machine";
export interface ProtocolParamters {
    txFeePerByte: CanBeUInteger;
    txFeeFixed: CanBeUInteger;
    maxBlockBodySize: CanBeUInteger;
    maxTxSize: CanBeUInteger;
    maxBlockHeaderSize: CanBeUInteger;
    stakeAddressDeposit: Coin;
    stakePoolDeposit: Coin;
    poolRetireMaxEpoch: Epoch;
    stakePoolTargetNum: CanBeUInteger;
    poolPledgeInfluence: CborPositiveRational | number;
    monetaryExpansion: CborPositiveRational | number;
    treasuryCut: CborPositiveRational | number;
    protocolVersion: [CanBeUInteger, CanBeUInteger] | {
        major: number;
        minor: number;
    };
    minPoolCost: Coin;
    utxoCostPerByte: Coin;
    costModels: CostModels;
    executionUnitPrices: [
        mem_price: CborPositiveRational,
        step_price: CborPositiveRational
    ] | {
        priceMemory: number;
        priceSteps: number;
    };
    maxTxExecutionUnits: ExBudget | ExBudgetJson;
    maxBlockExecutionUnits: ExBudget | ExBudgetJson;
    maxValueSize: CanBeUInteger;
    collateralPercentage: CanBeUInteger;
    maxCollateralInputs: CanBeUInteger;
}
export declare function isProtocolParameters(something: any): something is ProtocolParamters;
export declare function isPartialProtocolParameters(something: object): something is Partial<ProtocolParamters>;
export declare function partialProtocolParametersToCborObj(pps: Partial<ProtocolParamters>): CborMap;
export declare function partialProtocolParametersFromCborObj(cObj: CborObj): Partial<ProtocolParamters>;
export declare const defaultProtocolParameters: ProtocolParamters;
export declare function partialProtocolParamsToJson(pp: Partial<ProtocolParamters>): {
    poolPledgeInfluence: number | undefined;
    monetaryExpansion: number | undefined;
    treasuryCut: number | undefined;
    costModels: {
        PlutusScriptV1: {};
        PlutusScriptV2: {};
    } | undefined;
    executionUnitPrices: {
        priceMemory: number;
        priceSteps: number;
    } | undefined;
    maxTxExecutionUnits: ExBudgetJson | {
        steps: string;
        memory: string;
    } | undefined;
    maxBlockExecutionUnits: ExBudgetJson | {
        steps: string;
        memory: string;
    } | undefined;
    txFeePerByte?: CanBeUInteger | undefined;
    txFeeFixed?: CanBeUInteger | undefined;
    maxBlockBodySize?: CanBeUInteger | undefined;
    maxTxSize?: CanBeUInteger | undefined;
    maxBlockHeaderSize?: CanBeUInteger | undefined;
    stakeAddressDeposit?: CanBeUInteger | undefined;
    stakePoolDeposit?: CanBeUInteger | undefined;
    poolRetireMaxEpoch?: CanBeUInteger | undefined;
    stakePoolTargetNum?: CanBeUInteger | undefined;
    protocolVersion?: [CanBeUInteger, CanBeUInteger] | {
        major: number;
        minor: number;
    } | undefined;
    minPoolCost?: CanBeUInteger | undefined;
    utxoCostPerByte?: CanBeUInteger | undefined;
    maxValueSize?: CanBeUInteger | undefined;
    collateralPercentage?: CanBeUInteger | undefined;
    maxCollateralInputs?: CanBeUInteger | undefined;
};
