"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockPIntMethods = exports.makeMockTermInt = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var type_system_1 = require("../../../../type_system/index.js");
var makeMockTerm_1 = require("./makeMockTerm.js");
var makeMockUtilityTerm_1 = require("./makeMockUtilityTerm.js");
var mockPBoolMethods_1 = require("./mockPBoolMethods.js");
var getterOnly = {
    set: function () { },
    configurable: false,
    enumerable: true
};
function makeMockTermInt() {
    return mockPIntMethods((0, makeMockTerm_1.makeMockTerm)(type_system_1.int));
}
exports.makeMockTermInt = makeMockTermInt;
function mockPIntMethods(term) {
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "padd", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.int)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "add", function (other) { return makeMockTermInt(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "psub", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.int)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "sub", function (other) { return makeMockTermInt(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pmult", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.int)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "mult", function (other) { return makeMockTermInt(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pdiv", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.int)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "div", function (other) { return makeMockTermInt(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pquot", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.int)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "quot", function (other) { return makeMockTermInt(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "premainder", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.int)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "remainder", function (other) { return makeMockTermInt(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pmod", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.int)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "mod", function (other) { return makeMockTermInt(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "peq", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "eq", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "plt", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "lt", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pltEq", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "ltEq", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pgt", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "gt", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    (0, obj_utils_1.definePropertyIfNotPresent)(term, "pgtEq", __assign({ get: function () { return (0, makeMockUtilityTerm_1.makeMockUtilityTerm)((0, type_system_1.lam)(type_system_1.int, type_system_1.bool)); } }, getterOnly));
    (0, obj_utils_1.defineReadOnlyProperty)(term, "gtEq", function (other) { return (0, mockPBoolMethods_1.makeMockTermBool)(); });
    return term;
}
exports.mockPIntMethods = mockPIntMethods;
