"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.costModelV2ToMachineCosts = exports.defaultV2MachineCosts = exports.defaultV1MachineCosts = void 0;
var biguint_1 = require("@harmoniclabs/biguint");
var cardano_costmodels_ts_1 = require("@harmoniclabs/cardano-costmodels-ts");
var ExBudget_1 = require("./ExBudget.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
;
exports.defaultV1MachineCosts = Object.freeze({
    startup: new ExBudget_1.ExBudget({ mem: 100, cpu: 100 }),
    var: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    constant: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    lam: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    delay: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    force: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    apply: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    builtinNode: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
});
exports.defaultV2MachineCosts = Object.freeze({
    startup: new ExBudget_1.ExBudget({ mem: 100, cpu: 100 }),
    var: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    constant: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    lam: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    delay: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    force: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    apply: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
    builtinNode: new ExBudget_1.ExBudget({ mem: 100, cpu: 23000 }),
});
function costModelV2ToMachineCosts(costsV2) {
    var costs = (0, cardano_costmodels_ts_1.toCostModelV2)(costsV2);
    var result = {};
    function add(k, cpuKey, memKey) {
        var val = new ExBudget_1.ExBudget({
            mem: (0, biguint_1.forceBigUInt)(costs[memKey]),
            cpu: (0, biguint_1.forceBigUInt)(costs[cpuKey])
        });
        (0, obj_utils_1.definePropertyIfNotPresent)(result, k, {
            get: function () { return val.clone(); },
            set: function () {
                var whatever = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    whatever[_i] = arguments[_i];
                }
            },
            enumerable: true,
            configurable: false
        });
    }
    add("startup", "cekStartupCost-exBudgetCPU", "cekStartupCost-exBudgetMemory");
    add("var", "cekVarCost-exBudgetCPU", "cekVarCost-exBudgetMemory");
    add("constant", "cekConstCost-exBudgetCPU", "cekConstCost-exBudgetMemory");
    add("lam", "cekLamCost-exBudgetCPU", "cekLamCost-exBudgetMemory");
    add("delay", "cekDelayCost-exBudgetCPU", "cekDelayCost-exBudgetMemory");
    add("force", "cekForceCost-exBudgetCPU", "cekForceCost-exBudgetMemory");
    add("apply", "cekApplyCost-exBudgetCPU", "cekApplyCost-exBudgetMemory");
    add("builtinNode", "cekBuiltinCost-exBudgetCPU", "cekBuiltinCost-exBudgetMemory");
    return result;
}
exports.costModelV2ToMachineCosts = costModelV2ToMachineCosts;
