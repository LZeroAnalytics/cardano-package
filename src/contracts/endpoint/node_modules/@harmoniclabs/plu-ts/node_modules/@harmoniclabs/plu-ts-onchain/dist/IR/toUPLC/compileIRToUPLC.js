"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileIRToUPLC = void 0;
var IRLetted_1 = require("../IRNodes/IRLetted.js");
var IRHoisted_1 = require("../IRNodes/IRHoisted.js");
var IRConst_1 = require("../IRNodes/IRConst.js");
var _irToUplc_1 = require("./_internal/_irToUplc.js");
var includesNode_1 = require("./_internal/includesNode.js");
var handleLetted_1 = require("./subRoutines/handleLetted/index.js");
var handleHoistedAndReturnRoot_1 = require("./subRoutines/handleHoistedAndReturnRoot/index.js");
var replaceNatives_1 = require("./subRoutines/replaceNatives/index.js");
var replaceClosedLettedWithHoisted_1 = require("./subRoutines/replaceClosedLettedWithHoisted.js");
function compileIRToUPLC(term) {
    // most of the time we are just compiling small
    // pre-execuded terms (hence constants)
    if (term instanceof IRConst_1.IRConst)
        return (0, _irToUplc_1._irToUplc)(term).term;
    ///////////////////////////////////////////////////////////////////////////////
    // ------------------------------------------------------------------------- //
    // --------------------------------- init  --------------------------------- //
    // ------------------------------------------------------------------------- //
    ///////////////////////////////////////////////////////////////////////////////
    // unwrap top level letted and hoisted;
    while (term instanceof IRLetted_1.IRLetted || term instanceof IRHoisted_1.IRHoisted) {
        // replace with value
        term = term instanceof IRLetted_1.IRLetted ? term.value : term.hoisted;
        // forget the parent; this is the new root
        term.parent = undefined;
    }
    // _makeAllNegativeNativesHoisted( term );
    ///////////////////////////////////////////////////////////////////////////////
    // ------------------------------------------------------------------------- //
    // ----------------------------- optimizations ----------------------------- //
    // ------------------------------------------------------------------------- //
    ///////////////////////////////////////////////////////////////////////////////
    // --------------------------- optimize natives  --------------------------- //
    // at constant -> head and tails
    // --------------------- optimize recursive functions  --------------------- //
    // avoid passing whole structs
    // take letted terms outside
    // ----------------------- optimize normal functions ----------------------- //
    // avoid passing whole structs
    // reorganize function arguments to take advantage of partial applicaiton
    ///////////////////////////////////////////////////////////////////////////////
    // ------------------------------------------------------------------------- //
    // ------------------------------ final steps ------------------------------ //
    // ------------------------------------------------------------------------- //
    ///////////////////////////////////////////////////////////////////////////////
    term = (0, replaceNatives_1.replaceNativesAndReturnRoot)(term);
    (0, replaceClosedLettedWithHoisted_1.replaceClosedLettedWithHoisted)(term);
    // handle letted before hoisted because the tree is smaller
    // and we also have less letted dependecies to handle
    (0, handleLetted_1.handleLetted)(term);
    term = (0, handleHoistedAndReturnRoot_1.handleHoistedAndReturnRoot)(term);
    // replaced hoisted terms might include new letted terms
    while ((0, includesNode_1.includesNode)(term, function (node) {
        return node instanceof IRLetted_1.IRLetted ||
            node instanceof IRHoisted_1.IRHoisted;
    })) {
        (0, handleLetted_1.handleLetted)(term);
        term = (0, handleHoistedAndReturnRoot_1.handleHoistedAndReturnRoot)(term);
    }
    ///////////////////////////////////////////////////////////////////////////////
    // ------------------------------------------------------------------------- //
    // --------------------------- translate to UPLC --------------------------- //
    // ------------------------------------------------------------------------- //
    ///////////////////////////////////////////////////////////////////////////////
    var srcmap = {};
    var uplc = (0, _irToUplc_1._irToUplc)(term, srcmap).term;
    // console.log( "srcmap", srcmap );
    return uplc;
}
exports.compileIRToUPLC = compileIRToUPLC;
