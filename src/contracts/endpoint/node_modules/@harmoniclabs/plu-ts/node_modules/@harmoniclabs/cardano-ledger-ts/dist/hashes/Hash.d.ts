import { ToCbor, CborString, CborObj, CanBeCborString } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { ToData, Data } from "@harmoniclabs/plutus-data";
export declare function canBeHashInstance(obj: any): boolean;
export declare class Hash implements Cloneable<Hash>, ToCbor, ToData {
    static isStrictInstance(bs: any): bs is Hash;
    protected get _bytes(): Uint8Array;
    protected get _str(): string;
    constructor(bs: string | Uint8Array);
    /**
     * @deprecated use `toString()` instead
     */
    get asString(): string;
    toString(): string;
    /**
     * @deprecated use `toBuffer()` instead
     */
    get asBytes(): Uint8Array;
    toBuffer(): Uint8Array;
    /**
     * @deprecated use `toBuffer()` instead
     */
    toBytes(): Uint8Array;
    clone(): Hash;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): Hash;
    static fromCborObj(cObj: CborObj): Hash;
    toData(): Data;
    static fromAscii(asciiStr: string): Hash;
    static toAscii(bStr: Hash): string;
    static isValidHexValue(str: string): boolean;
}
