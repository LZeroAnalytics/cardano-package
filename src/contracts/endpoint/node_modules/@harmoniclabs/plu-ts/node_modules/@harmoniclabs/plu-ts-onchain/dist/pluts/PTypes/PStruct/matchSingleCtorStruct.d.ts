import { Term } from "../../Term/index.js";
import { TermType } from "../../type_system/index.js";
import { PData } from "../PData/index.js";
import { PLam } from "../PFn/index.js";
import { PList } from "../PList.js";
export declare const getFields: Term<PLam<PData, PList<PData>>>;
export declare const matchSingleCtorStruct: (returnT: TermType) => Term<PLam<PData, PLam<PLam<PList<PData>, import("../../index.js").PType | import("./pstruct.js").PStruct<import("../../type_system/index.js").StructDefinition, import("../../type_system/index.js").Methods>>, import("../../index.js").PType | import("./pstruct.js").PStruct<import("../../type_system/index.js").StructDefinition, import("../../type_system/index.js").Methods>>>> & {
    $: (input: import("../../index.js").PappArg<PData>) => Term<PLam<PLam<PList<PData>, import("../../index.js").PType | import("./pstruct.js").PStruct<import("../../type_system/index.js").StructDefinition, import("../../type_system/index.js").Methods>>, import("../../index.js").PType | import("./pstruct.js").PStruct<import("../../type_system/index.js").StructDefinition, import("../../type_system/index.js").Methods>>> & {
        $: (input: import("../../index.js").PappArg<PLam<PList<PData>, import("../../index.js").PType | import("./pstruct.js").PStruct<import("../../type_system/index.js").StructDefinition, import("../../type_system/index.js").Methods>>>) => import("../../index.js").UtilityTermOf<import("../../index.js").PType | import("./pstruct.js").PStruct<import("../../type_system/index.js").StructDefinition, import("../../type_system/index.js").Methods>>;
    };
};
