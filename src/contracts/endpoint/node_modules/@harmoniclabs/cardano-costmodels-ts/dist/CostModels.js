"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.costModelsToJson = exports.costModelsToLanguageViewCbor = exports.costModelsFromCborObj = exports.costModelsFromCbor = exports.costModelsToCborObj = exports.isCostModels = void 0;
var ints_1 = require("./utils/ints.js");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var cbor_1 = require("@harmoniclabs/cbor");
var v1_1 = require("./v1/index.js");
var v2_1 = require("./v2/index.js");
var isCostModelsV3_1 = require("./v3/isCostModelsV3.js");
var toCostModelArrV3_1 = require("./v3/toCostModelArrV3.js");
var toCostModelV3_1 = require("./v3/toCostModelV3.js");
function isCostModels(something) {
    if (!(0, obj_utils_1.isObject)(something))
        return false;
    var hasV1, hasV2, hasV3;
    hasV1 = hasV2 = hasV3 = false;
    if ((0, obj_utils_1.hasOwn)(something, "PlutusScriptV1")) {
        hasV1 = true;
        if (!(0, v1_1.isCostModelsV1)(something.PlutusScriptV1))
            return false;
    }
    if ((0, obj_utils_1.hasOwn)(something, "PlutusScriptV2")) {
        hasV2 = true;
        if (!(0, v2_1.isCostModelsV2)(something.PlutusScriptV2))
            return false;
    }
    if ((0, obj_utils_1.hasOwn)(something, "PlutusScriptV3")) {
        hasV3 = true;
        if (!(0, isCostModelsV3_1.isCostModelsV3)(something.PlutusScriptV3))
            return false;
    }
    if (!(hasV1 || hasV2 || hasV3))
        return false;
    return true;
}
exports.isCostModels = isCostModels;
;
function costModelsToCborObj(costmdls) {
    var PlutusScriptV1 = costmdls.PlutusScriptV1, PlutusScriptV2 = costmdls.PlutusScriptV2, PlutusScriptV3 = costmdls.PlutusScriptV3;
    return new cbor_1.CborMap([
        PlutusScriptV1 === undefined ? undefined :
            {
                k: new cbor_1.CborUInt(0),
                v: new cbor_1.CborArray((0, v1_1.toCostModelArrV1)(PlutusScriptV1).map(ints_1.cborNumber))
            },
        PlutusScriptV2 === undefined ? undefined :
            {
                k: new cbor_1.CborUInt(1),
                v: new cbor_1.CborArray((0, v2_1.toCostModelArrV2)(PlutusScriptV2).map(ints_1.cborNumber))
            },
        PlutusScriptV3 === undefined ? undefined :
            {
                k: new cbor_1.CborUInt(2),
                v: new cbor_1.CborArray((0, toCostModelArrV3_1.toCostModelArrV3)(PlutusScriptV3).map(ints_1.cborNumber))
            }
    ].filter(function (elem) { return elem !== undefined; }));
}
exports.costModelsToCborObj = costModelsToCborObj;
function costModelsFromCbor(cStr) {
    return costModelsFromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr)));
}
exports.costModelsFromCbor = costModelsFromCbor;
function costModelsFromCborObj(cObj) {
    if (cObj === undefined || !(cObj instanceof cbor_1.CborMap))
        return {};
    var costs = {};
    cObj.map.forEach(function (_a) {
        var k = _a.k, v = _a.v;
        if (!(k instanceof cbor_1.CborUInt &&
            v instanceof cbor_1.CborArray &&
            v.array.every(function (n) { return n instanceof cbor_1.CborUInt; })))
            return; // ingore entry
        var plutusIdx = Number(k.num);
        if (plutusIdx === 0) {
            (0, obj_utils_1.defineReadOnlyProperty)(costs, "PlutusScriptV1", (0, v1_1.toCostModelV1)((v.array.map(function (n) { return n.num; }))));
        }
        else if (plutusIdx === 1) {
            (0, obj_utils_1.defineReadOnlyProperty)(costs, "PlutusScriptV2", (0, v2_1.toCostModelV2)((v.array.map(function (n) { return n.num; }))));
        }
        else if (plutusIdx === 2) {
            (0, obj_utils_1.defineReadOnlyProperty)(costs, "PlutusScriptV3", (0, toCostModelV3_1.toCostModelV3)((v.array.map(function (n) { return n.num; }))));
        }
    });
    return costs;
}
exports.costModelsFromCborObj = costModelsFromCborObj;
function costModelsToLanguageViewCbor(costmdls, opts) {
    var PlutusScriptV1 = costmdls.PlutusScriptV1, PlutusScriptV2 = costmdls.PlutusScriptV2, PlutusScriptV3 = costmdls.PlutusScriptV3;
    if (opts.mustHaveV1 === true && PlutusScriptV1 === undefined)
        throw new Error("missing required PlutusScriptV1");
    if (opts.mustHaveV2 === true && PlutusScriptV2 === undefined)
        throw new Error("missing required PlutusScriptV2");
    if (opts.mustHaveV3 === true && PlutusScriptV3 === undefined)
        throw new Error("missing required PlutusScriptV3");
    return cbor_1.Cbor.encode(new cbor_1.CborMap([
        opts.mustHaveV1 ?
            {
                // k: new CborUInt(0); but as bytes (...)
                // 
                // The language ID tag is also encoded twice. first as a uint then as
                // a bytestring. (our apologies)
                // Concretely, this means that the language version for V1 is encoded as
                // 4100 in hex.
                k: new cbor_1.CborBytes(Uint8Array.from([0])),
                /// plutus v1 language view is messed up, not my fault
                // 
                // the value of costmdls map at key 0 (in other words, the script_integrity_data)
                // is encoded as an indefinite length list and the result is encoded as a bytestring.
                // (our apologies)
                v: new cbor_1.CborBytes(cbor_1.Cbor.encode(new cbor_1.CborArray((0, v1_1.toCostModelArrV1)(PlutusScriptV1)
                    .map(ints_1.cborNumber), { indefinite: true })).toBuffer())
            } : undefined,
        opts.mustHaveV2 ?
            {
                k: new cbor_1.CborUInt(1),
                v: new cbor_1.CborArray((0, v2_1.toCostModelArrV2)(PlutusScriptV2).map(ints_1.cborNumber))
            } : undefined,
        opts.mustHaveV3 ?
            {
                k: new cbor_1.CborUInt(2),
                v: new cbor_1.CborArray((0, toCostModelArrV3_1.toCostModelArrV3)(PlutusScriptV3).map(ints_1.cborNumber))
            } : undefined
    ].filter(function (elem) { return elem !== undefined; })));
}
exports.costModelsToLanguageViewCbor = costModelsToLanguageViewCbor;
function costModelsToJson(costmdls) {
    var _pv1 = costmdls.PlutusScriptV1 === undefined ? undefined : (0, v1_1.toCostModelV1)(costmdls.PlutusScriptV1);
    var _pv2 = costmdls.PlutusScriptV2 === undefined ? undefined : (0, v2_1.toCostModelV2)(costmdls.PlutusScriptV2);
    var _pv3 = costmdls.PlutusScriptV3 === undefined ? undefined : (0, toCostModelV3_1.toCostModelV3)(costmdls.PlutusScriptV3);
    var pv1 = {};
    if (_pv1 !== undefined) {
        var ks = Object.keys(_pv1);
        var n = ks.length;
        for (var i = 0; i < n; i++) {
            (0, obj_utils_1.defineReadOnlyProperty)(pv1, ks[i], BigInt(_pv1[ks[i]]).toString());
        }
    }
    var pv2 = {};
    if (_pv2 !== undefined) {
        var ks = Object.keys(_pv2);
        var n = ks.length;
        for (var i = 0; i < n; i++) {
            (0, obj_utils_1.defineReadOnlyProperty)(pv2, ks[i], BigInt(_pv2[ks[i]]).toString());
        }
    }
    var pv3 = {};
    if (_pv3 !== undefined) {
        var ks = Object.keys(_pv3);
        var n = ks.length;
        for (var i = 0; i < n; i++) {
            var k = ks[i];
            (0, obj_utils_1.defineReadOnlyProperty)(pv3, k, BigInt(_pv3[k]).toString());
        }
    }
    return {
        PlutusScriptV1: pv1,
        PlutusScriptV2: pv2,
        PlutusScriptV3: pv3,
    };
}
exports.costModelsToJson = costModelsToJson;
