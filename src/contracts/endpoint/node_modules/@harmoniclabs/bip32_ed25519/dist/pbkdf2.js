"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pbkdf2 = void 0;
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var crypto_1 = require("@harmoniclabs/crypto");
function pbkdf2(password, salt, iterations, keylen) {
    checkParameters(iterations, keylen);
    password = toBuffer(password);
    salt = toBuffer(salt);
    var DK = new Uint8Array(keylen);
    var block1 = new Uint8Array(salt.length + 4);
    // salt.copy(block1, 0, 0, salt.length)
    block1.set(salt, 0);
    var destPos = 0;
    var hLen = 64; // sha512
    var l = Math.ceil(keylen / hLen);
    for (var i = 1; i <= l; i++) {
        (0, uint8array_utils_1.writeUInt32BE)(block1, i, salt.length);
        var T = (0, crypto_1.hmacSHA512)(password, block1);
        var U = T;
        for (var j = 1; j < iterations; j++) {
            U = (0, crypto_1.hmacSHA512)(password, U);
            for (var k = 0; k < hLen; k++)
                T[k] ^= U[k];
        }
        // T.copy(DK, destPos)
        DK.set(
        // only in the DK bound
        T.slice(0, DK.length - destPos), destPos);
        destPos += hLen;
    }
    return DK;
}
exports.pbkdf2 = pbkdf2;
var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs
function checkParameters(iterations, keylen) {
    if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number');
    }
    if (iterations < 0) {
        throw new TypeError('Bad iterations');
    }
    if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number');
    }
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        throw new TypeError('Bad key length');
    }
}
function toBuffer(thing) {
    if (thing instanceof Uint8Array) {
        return thing;
    }
    else if (typeof thing === 'string') {
        return (0, uint8array_utils_1.fromUtf8)(thing);
    }
    else if (ArrayBuffer.isView(thing)) {
        return new Uint8Array(thing.buffer);
    }
    else {
        throw new TypeError("cannot convert to buffer");
    }
}
