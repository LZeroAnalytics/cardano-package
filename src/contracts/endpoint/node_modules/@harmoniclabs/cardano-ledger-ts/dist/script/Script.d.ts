import { ToCbor, CborString, CborObj, CanBeCborString, SubCborRef } from "@harmoniclabs/cbor";
import { Hash28 } from "../hashes/index.js";
import { NativeScript } from "./NativeScript.js";
export declare enum ScriptType {
    NativeScript = "NativeScript",
    PlutusV1 = "PlutusScriptV1",
    PlutusV2 = "PlutusScriptV2",
    PlutusV3 = "PlutusScriptV3"
}
export declare const defaultScriptType = ScriptType.PlutusV3;
export type PlutusScriptType = ScriptType.PlutusV1 | ScriptType.PlutusV2 | ScriptType.PlutusV3 | "PlutusScriptV1" | "PlutusScriptV2" | "PlutusScriptV3";
export type LitteralScriptType = ScriptType | "NativeScript" | "PlutusScriptV1" | "PlutusScriptV2" | "PlutusScriptV3";
export interface PlutusScriptJsonFormat<T extends PlutusScriptType = PlutusScriptType> {
    type: T;
    description?: string;
    cborHex: string;
}
export declare class Script<T extends LitteralScriptType = LitteralScriptType> implements ToCbor {
    readonly subCborRef?: SubCborRef | undefined;
    readonly type: T;
    readonly bytes: Uint8Array;
    /**
     * format expected by `cardano-cli`
     *
     * for standard ledger format (as defined in CDDL) use `toCbor` method
    **/
    readonly cbor: T extends ScriptType.NativeScript ? never : CborString;
    readonly hash: Hash28;
    constructor(scriptType: T, bytes: Uint8Array | (T extends ScriptType.NativeScript ? NativeScript : PlutusScriptJsonFormat), subCborRef?: SubCborRef | undefined);
    clone(): Script<T>;
    toJSON(): import("./NativeScript.js").ScriptSignature | import("./NativeScript.js").ScriptAll | import("./NativeScript.js").ScriptAny | import("./NativeScript.js").ScriptAtLeast | import("./NativeScript.js").ScriptAfter | import("./NativeScript.js").ScriptBefore | {
        type: T;
        description: string;
        cborHex: string;
    };
    toJson(): import("./NativeScript.js").ScriptSignature | import("./NativeScript.js").ScriptAll | import("./NativeScript.js").ScriptAny | import("./NativeScript.js").ScriptAtLeast | import("./NativeScript.js").ScriptAfter | import("./NativeScript.js").ScriptBefore | {
        type: T;
        description: string;
        cborHex: string;
    };
    static fromJson(json: any & {
        type: string;
    }): Script;
    /**
     * format specified in the ledger CDDL
    **/
    toCbor(): CborString;
    /**
     * format specified in the ledger CDDL
    **/
    toCborObj(): CborObj;
    static fromCbor(cbor: CanBeCborString, defType?: ScriptType): Script;
    static fromCborObj(cObj: CborObj, defType?: ScriptType): Script;
}
