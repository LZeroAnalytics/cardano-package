"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxMetadatumText = exports.TxMetadatumBytes = exports.TxMetadatumInt = exports.TxMetadatumList = exports.TxMetadatumMap = exports.isTxMetadatum = exports.txMetadatumFromCborObj = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var assert_1 = require("../../utils/assert.js");
function txMetadatumFromCborObj(cObj) {
    if (cObj instanceof cbor_1.CborMap) {
        return new TxMetadatumMap(cObj.map.map(function (entry) { return ({
            k: txMetadatumFromCborObj(entry.k),
            v: txMetadatumFromCborObj(entry.v)
        }); }));
    }
    if (cObj instanceof cbor_1.CborArray) {
        return new TxMetadatumList(cObj.array.map(txMetadatumFromCborObj));
    }
    if (cObj instanceof cbor_1.CborUInt || cObj instanceof cbor_1.CborNegInt) {
        return new TxMetadatumInt(cObj.num);
    }
    if (cObj instanceof cbor_1.CborBytes) {
        return new TxMetadatumBytes(cObj.buffer);
    }
    if (cObj instanceof cbor_1.CborText) {
        return new TxMetadatumText(cObj.text);
    }
    throw new InvalidCborFormatError_1.InvalidCborFormatError("TxMetadatum");
}
exports.txMetadatumFromCborObj = txMetadatumFromCborObj;
function isTxMetadatum(something) {
    return (something instanceof TxMetadatumMap ||
        something instanceof TxMetadatumList ||
        something instanceof TxMetadatumInt ||
        something instanceof TxMetadatumBytes ||
        something instanceof TxMetadatumText);
}
exports.isTxMetadatum = isTxMetadatum;
function isTxMetadatumMapEntry(something) {
    return ((0, obj_utils_1.has_n_determined_keys)(something, 2, "k", "v") &&
        isTxMetadatum(something["k"]) &&
        isTxMetadatum(something["v"]));
}
var TxMetadatumMap = /** @class */ (function () {
    function TxMetadatumMap(map, subCborRef) {
        this.subCborRef = subCborRef;
        (0, assert_1.assert)(map.every(isTxMetadatumMapEntry), "invalid entries for TxMetadatumMap");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "map", Object.freeze(map));
    }
    TxMetadatumMap.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMetadatumMap.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return new cbor_1.CborMap(this.map.map(function (entry) {
            return {
                k: entry.k.toCborObj(),
                v: entry.v.toCborObj(),
            };
        }));
    };
    TxMetadatumMap.prototype.toJSON = function () { return this.toJson(); };
    TxMetadatumMap.prototype.toJson = function () {
        return this.map.map(function (entry) {
            return {
                k: entry.k.toJson(),
                v: entry.v.toJson(),
            };
        });
    };
    return TxMetadatumMap;
}());
exports.TxMetadatumMap = TxMetadatumMap;
var TxMetadatumList = /** @class */ (function () {
    function TxMetadatumList(map, subCborRef) {
        this.subCborRef = subCborRef;
        (0, assert_1.assert)(map.every(isTxMetadatum), "invalid entries for TxMetadatumList");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "list", Object.freeze(map));
    }
    TxMetadatumList.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMetadatumList.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return new cbor_1.CborArray(this.list.map(function (_) { return _.toCborObj(); }));
    };
    TxMetadatumList.prototype.toJSON = function () { return this.toJson(); };
    TxMetadatumList.prototype.toJson = function () {
        return this.list.map(function (_) { return _.toJson(); });
    };
    return TxMetadatumList;
}());
exports.TxMetadatumList = TxMetadatumList;
var TxMetadatumInt = /** @class */ (function () {
    function TxMetadatumInt(n, subCborRef) {
        this.subCborRef = subCborRef;
        (0, obj_utils_1.defineReadOnlyProperty)(this, "n", BigInt(n));
    }
    TxMetadatumInt.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMetadatumInt.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return this.n < BigInt(0) ? new cbor_1.CborNegInt(this.n) : new cbor_1.CborUInt(this.n);
    };
    TxMetadatumInt.prototype.toJSON = function () { return this.toJson(); };
    TxMetadatumInt.prototype.toJson = function () {
        return { int: this.n.toString() };
    };
    return TxMetadatumInt;
}());
exports.TxMetadatumInt = TxMetadatumInt;
var TxMetadatumBytes = /** @class */ (function () {
    function TxMetadatumBytes(bytes, subCborRef) {
        this.subCborRef = subCborRef;
        (0, obj_utils_1.defineReadOnlyProperty)(this, "bytes", (0, uint8array_utils_1.isUint8Array)(bytes) ? bytes : bytes.toBuffer());
    }
    TxMetadatumBytes.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMetadatumBytes.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        if (this.bytes.length > 64) {
            var chunks = [];
            for (var ptr = 0; ptr < this.bytes.length; ptr += 64) {
                chunks.push(new cbor_1.CborBytes(this.bytes.subarray(ptr, ptr + 64)));
            }
            return new cbor_1.CborArray(chunks);
        }
        return new cbor_1.CborBytes(this.bytes);
    };
    TxMetadatumBytes.prototype.toJSON = function () { return this.toJson(); };
    TxMetadatumBytes.prototype.toJson = function () {
        return { bytes: (0, uint8array_utils_1.toHex)(this.bytes) };
    };
    return TxMetadatumBytes;
}());
exports.TxMetadatumBytes = TxMetadatumBytes;
var TxMetadatumText = /** @class */ (function () {
    function TxMetadatumText(text, subCborRef) {
        this.subCborRef = subCborRef;
        (0, assert_1.assert)(typeof text === "string", "invalid text");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "text", text);
    }
    TxMetadatumText.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    TxMetadatumText.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        if (this.text.length > 64) {
            var chunks = [];
            for (var ptr = 0; ptr < this.text.length; ptr += 64) {
                chunks.push(new cbor_1.CborText(this.text.slice(ptr, ptr + 64)));
            }
            return new cbor_1.CborArray(chunks);
        }
        return new cbor_1.CborText(this.text);
    };
    TxMetadatumText.prototype.toJSON = function () { return this.toJson(); };
    TxMetadatumText.prototype.toJson = function () {
        return { text: this.text };
    };
    return TxMetadatumText;
}());
exports.TxMetadatumText = TxMetadatumText;
