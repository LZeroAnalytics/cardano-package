import { ToCbor, CborString, CanBeCborString, CborObj, SubCborRef } from "@harmoniclabs/cbor";
import { Cloneable } from "@harmoniclabs/cbor/dist/utils/Cloneable";
import { ToData, Data } from "@harmoniclabs/plutus-data";
import { ToJson } from "../../../utils/ToJson.js";
import { ITxOut, TxOut } from "./TxOut.js";
import { ITxOutRef, TxOutRef } from "./TxOutRef.js";
import { ToDataVersion } from "../../../toData/defaultToDataVersion.js";
export interface IUTxO {
    utxoRef: ITxOutRef;
    resolved: ITxOut;
}
export declare function isIUTxO(stuff: any): stuff is IUTxO;
export declare class UTxO implements IUTxO, ToData, ToJson, ToCbor, Cloneable<UTxO> {
    readonly subCborRef?: SubCborRef | undefined;
    readonly utxoRef: TxOutRef;
    readonly resolved: TxOut;
    constructor({ utxoRef, resolved }: IUTxO, subCborRef?: SubCborRef | undefined);
    clone(): UTxO;
    toData(version?: ToDataVersion): Data;
    toCbor(): CborString;
    toCborObj(): CborObj;
    static fromCbor(cStr: CanBeCborString): UTxO;
    static fromCborObj(cObj: CborObj): UTxO;
    toJSON(): {
        utxoRef: import("./TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../index.js").ValueJson;
            datum: any;
            refScript: import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").LitteralScriptType;
                description: string;
                cborHex: string;
            } | undefined;
        };
    };
    toJson(): {
        utxoRef: import("./TxOutRef.js").UTxORefJson;
        resolved: {
            address: `addr1${string}` | `addr_test1${string}`;
            value: import("../../../index.js").ValueJson;
            datum: any;
            refScript: import("../../../index.js").ScriptSignature | import("../../../index.js").ScriptAll | import("../../../index.js").ScriptAny | import("../../../index.js").ScriptAtLeast | import("../../../index.js").ScriptAfter | import("../../../index.js").ScriptBefore | {
                type: import("../../../index.js").LitteralScriptType;
                description: string;
                cborHex: string;
            } | undefined;
        };
    };
    static sort(a: IUTxO, b: IUTxO): number;
}
export { TxOutRef };
