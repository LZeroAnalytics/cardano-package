"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BootstrapWitness = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var Hash32_1 = require("../../hashes/Hash32/Hash32.js");
var Signature_1 = require("../../hashes/Signature/index.js");
var InvalidCborFormatError_1 = require("../../utils/InvalidCborFormatError.js");
var assert_1 = require("../../utils/assert.js");
var VKey_1 = require("./VKeyWitness/VKey.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var getSubCborRef_1 = require("../../utils/getSubCborRef.js");
var BootstrapWitness = /** @class */ (function () {
    function BootstrapWitness(pubKey, signature, chainCode, attributes, subCborRef) {
        this.subCborRef = subCborRef;
        (0, assert_1.assert)(pubKey instanceof Hash32_1.Hash32, "invalid 'pubKey' constructing 'BootstrapWitness'");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "pubKey", pubKey instanceof VKey_1.VKey ? pubKey : new VKey_1.VKey(pubKey));
        (0, assert_1.assert)(signature instanceof Signature_1.Signature, "invalid 'signature' constructing 'BootstrapWitness'");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "signature", signature);
        (0, assert_1.assert)(chainCode instanceof Hash32_1.Hash32, "invalid 'chainCode' constructing 'BootstrapWitness'");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "chainCode", chainCode);
        (0, assert_1.assert)((0, uint8array_utils_1.isUint8Array)(attributes), "invalid 'attributes' constructing 'BootstrapWitness'");
        (0, obj_utils_1.defineReadOnlyProperty)(this, "attributes", Uint8Array.from(attributes));
    }
    BootstrapWitness.prototype.clone = function () {
        return new BootstrapWitness(this.pubKey.clone(), this.signature.clone(), this.chainCode.clone(), this.attributes.slice());
    };
    BootstrapWitness.prototype.toCbor = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return new cbor_1.CborString(this.subCborRef.toBuffer());
        }
        return cbor_1.Cbor.encode(this.toCborObj());
    };
    BootstrapWitness.prototype.toCborObj = function () {
        if (this.subCborRef instanceof cbor_1.SubCborRef) {
            // TODO: validate cbor structure
            // we assume correctness here
            return cbor_1.Cbor.parse(this.subCborRef.toBuffer());
        }
        return new cbor_1.CborArray([
            this.pubKey.toCborObj(),
            this.signature.toCborObj(),
            this.chainCode.toCborObj(),
            new cbor_1.CborBytes(this.attributes)
        ]);
    };
    BootstrapWitness.fromCbor = function (cStr) {
        return BootstrapWitness.fromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cStr), { keepRef: true }));
    };
    BootstrapWitness.fromCborObj = function (cObj) {
        if (!(cObj instanceof cbor_1.CborArray &&
            cObj.array[3] instanceof cbor_1.CborBytes))
            throw new InvalidCborFormatError_1.InvalidCborFormatError("BootstrapWitness");
        return new BootstrapWitness(Hash32_1.Hash32.fromCborObj(cObj.array[0]), Signature_1.Signature.fromCborObj(cObj.array[1]), Hash32_1.Hash32.fromCborObj(cObj.array[2]), cObj.array[3].bytes, (0, getSubCborRef_1.getSubCborRef)(cObj));
    };
    BootstrapWitness.prototype.toJSON = function () { return this.toJson(); };
    BootstrapWitness.prototype.toJson = function () {
        this.chainCode;
        return {
            pubKey: this.pubKey.toString(),
            signature: this.signature.toString(),
            chainCode: this.chainCode.toString(),
            attributes: (0, uint8array_utils_1.toHex)(this.attributes)
        };
    };
    return BootstrapWitness;
}());
exports.BootstrapWitness = BootstrapWitness;
