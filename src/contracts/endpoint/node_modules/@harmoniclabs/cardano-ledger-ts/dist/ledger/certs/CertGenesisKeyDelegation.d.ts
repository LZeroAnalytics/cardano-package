import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { CanBeHash28, CanBeHash32, Hash28, Hash32 } from "../../hashes/index.js";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
/** @deprecated */
export interface ICertGenesisKeyDelegation {
    genesisHash: CanBeHash28;
    genesisDelegateHash: CanBeHash28;
    vrfKeyHash: CanBeHash32;
}
/** @deprecated */
export declare class CertGenesisKeyDelegation implements ICert, ICertGenesisKeyDelegation {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.GenesisKeyDelegation;
    readonly genesisHash: Hash28;
    readonly genesisDelegateHash: Hash28;
    readonly vrfKeyHash: Hash32;
    constructor({ genesisHash, genesisDelegateHash, vrfKeyHash }: ICertGenesisKeyDelegation, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertGenesisKeyDelegation;
    toJSON(): {
        certType: "GenesisKeyDelegation";
        genesisHash: string;
        genesisDelegateHash: string;
        vrfKeyHash: string;
    };
    toJson(): {
        certType: "GenesisKeyDelegation";
        genesisHash: string;
        genesisDelegateHash: string;
        vrfKeyHash: string;
    };
}
