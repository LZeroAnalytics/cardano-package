import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { Credential } from "../../credentials/index.js";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { Coin } from "../Coin.js";
import { Hash28 } from "../../hashes/index.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface ICertUnRegistrationDrep {
    drepCredential: Credential;
    coin: Coin;
}
export declare class CertUnRegistrationDrep implements ICert, ICertUnRegistrationDrep {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.UnRegistrationDrep;
    readonly drepCredential: Credential;
    /** refound */
    readonly coin: bigint;
    constructor({ drepCredential, coin }: ICertUnRegistrationDrep, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertUnRegistrationDrep;
    toJSON(): {
        certType: "UnRegistrationDrep";
        drepCredential: {
            credentialType: string;
            hash: string;
        };
        coin: string;
    };
    toJson(): {
        certType: "UnRegistrationDrep";
        drepCredential: {
            credentialType: string;
            hash: string;
        };
        coin: string;
    };
}
