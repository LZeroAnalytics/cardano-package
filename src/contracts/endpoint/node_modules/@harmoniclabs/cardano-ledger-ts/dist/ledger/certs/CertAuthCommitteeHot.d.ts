import { CborArray, CborObj, CborString, SubCborRef, ToCbor } from "@harmoniclabs/cbor";
import { Credential } from "../../credentials/index.js";
import { CertificateType } from "./CertificateType.js";
import { ICert } from "./ICert.js";
import { ToJson } from "../../utils/ToJson.js";
import { Hash28 } from "../../hashes/index.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface ICertAuthCommitteeHot {
    coldCredential: Credential;
    hotCredential: Credential;
}
export declare class CertAuthCommitteeHot implements ICert, ICertAuthCommitteeHot, ToCbor, ToJson {
    readonly subCborRef?: SubCborRef | undefined;
    readonly certType: CertificateType.AuthCommitteeHot;
    readonly coldCredential: Credential;
    readonly hotCredential: Credential;
    constructor({ coldCredential, hotCredential }: ICertAuthCommitteeHot, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    getRequiredSigners(): Hash28[];
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): CertAuthCommitteeHot;
    toJSON(): {
        certType: "AuthCommitteeHot";
        coldCredential: {
            credentialType: string;
            hash: string;
        };
        hotCredential: {
            credentialType: string;
            hash: string;
        };
    };
    toJson(): {
        certType: "AuthCommitteeHot";
        coldCredential: {
            credentialType: string;
            hash: string;
        };
        hotCredential: {
            credentialType: string;
            hash: string;
        };
    };
}
