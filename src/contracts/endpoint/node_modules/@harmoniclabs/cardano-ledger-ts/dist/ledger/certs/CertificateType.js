"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.certTypeToString = exports.isCertificateType = exports.CertificateType = void 0;
// number is important as it is included in serialization
var CertificateType;
(function (CertificateType) {
    CertificateType[CertificateType["StakeRegistration"] = 0] = "StakeRegistration";
    CertificateType[CertificateType["StakeDeRegistration"] = 1] = "StakeDeRegistration";
    CertificateType[CertificateType["StakeDelegation"] = 2] = "StakeDelegation";
    CertificateType[CertificateType["PoolRegistration"] = 3] = "PoolRegistration";
    CertificateType[CertificateType["PoolRetirement"] = 4] = "PoolRetirement";
    /** @deprecated since conway */
    CertificateType[CertificateType["GenesisKeyDelegation"] = 5] = "GenesisKeyDelegation";
    /** @deprecated since conway */
    CertificateType[CertificateType["MoveInstantRewards"] = 6] = "MoveInstantRewards";
    // DELEG 
    CertificateType[CertificateType["RegistrationDeposit"] = 7] = "RegistrationDeposit";
    CertificateType[CertificateType["UnRegistrationDeposit"] = 8] = "UnRegistrationDeposit";
    CertificateType[CertificateType["VoteDeleg"] = 9] = "VoteDeleg";
    CertificateType[CertificateType["StakeVoteDeleg"] = 10] = "StakeVoteDeleg";
    CertificateType[CertificateType["StakeRegistrationDeleg"] = 11] = "StakeRegistrationDeleg";
    CertificateType[CertificateType["VoteRegistrationDeleg"] = 12] = "VoteRegistrationDeleg";
    CertificateType[CertificateType["StakeVoteRegistrationDeleg"] = 13] = "StakeVoteRegistrationDeleg";
    // GOVCERT
    CertificateType[CertificateType["AuthCommitteeHot"] = 14] = "AuthCommitteeHot";
    CertificateType[CertificateType["ResignCommitteeCold"] = 15] = "ResignCommitteeCold";
    CertificateType[CertificateType["RegistrationDrep"] = 16] = "RegistrationDrep";
    CertificateType[CertificateType["UnRegistrationDrep"] = 17] = "UnRegistrationDrep";
    CertificateType[CertificateType["UpdateDrep"] = 18] = "UpdateDrep";
})(CertificateType = exports.CertificateType || (exports.CertificateType = {}));
;
Object.freeze(CertificateType);
function isCertificateType(stuff) {
    return typeof stuff === "number" && (stuff >= 0 && stuff <= 18 &&
        stuff === Math.round(stuff));
}
exports.isCertificateType = isCertificateType;
function certTypeToString(certT) {
    switch (certT) {
        case CertificateType.StakeRegistration: return "StakeRegistration";
        case CertificateType.StakeDeRegistration: return "StakeDeRegistration";
        case CertificateType.StakeDelegation: return "StakeDelegation";
        case CertificateType.PoolRegistration: return "PoolRegistration";
        case CertificateType.PoolRetirement: return "PoolRetirement";
        case CertificateType.GenesisKeyDelegation: return "GenesisKeyDelegation";
        case CertificateType.MoveInstantRewards: return "MoveInstantRewards";
        case CertificateType.RegistrationDeposit: return "RegistrationDeposit";
        case CertificateType.UnRegistrationDeposit: return "UnRegistrationDeposit";
        case CertificateType.VoteDeleg: return "VoteDeleg";
        case CertificateType.StakeVoteDeleg: return "StakeVoteDeleg";
        case CertificateType.StakeRegistrationDeleg: return "StakeRegistrationDeleg";
        case CertificateType.VoteRegistrationDeleg: return "VoteRegistrationDeleg";
        case CertificateType.StakeVoteRegistrationDeleg: return "StakeVoteRegistrationDeleg";
        case CertificateType.AuthCommitteeHot: return "AuthCommitteeHot";
        case CertificateType.ResignCommitteeCold: return "ResignCommitteeCold";
        case CertificateType.RegistrationDrep: return "RegistrationDrep";
        case CertificateType.UnRegistrationDrep: return "UnRegistrationDrep";
        case CertificateType.UpdateDrep: return "UpdateDrep";
        default: return "";
    }
}
exports.certTypeToString = certTypeToString;
