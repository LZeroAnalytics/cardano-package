import { CborArray, CborObj, CborString, SubCborRef } from "@harmoniclabs/cbor";
import { PubKeyHash } from "../../credentials/index.js";
import { CanBeHash28 } from "../../hashes/index.js";
import { DRepType } from "./DRepType.js";
import { IDRep } from "./IDRep.js";
import { DataConstr } from "@harmoniclabs/plutus-data";
import { ToDataVersion } from "../../toData/defaultToDataVersion.js";
export interface IDRepKeyHash {
    hash: CanBeHash28;
}
export declare function isIDRepKeyHash(stuff: any): stuff is IDRepKeyHash;
export declare class DRepKeyHash implements IDRep, IDRepKeyHash {
    readonly subCborRef?: SubCborRef | undefined;
    readonly drepType: DRepType.KeyHash;
    readonly hash: PubKeyHash;
    constructor({ hash }: IDRepKeyHash, subCborRef?: SubCborRef | undefined);
    toData(version?: ToDataVersion | undefined): DataConstr;
    toCbor(): CborString;
    toCborObj(): CborArray;
    static fromCborObj(cbor: CborObj): DRepKeyHash;
    toJSON(): {
        drepType: string;
        hash: string;
    };
    toJson(): {
        drepType: string;
        hash: string;
    };
}
