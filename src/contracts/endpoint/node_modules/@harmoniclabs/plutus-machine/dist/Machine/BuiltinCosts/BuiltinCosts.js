"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.costModelV3ToBuiltinCosts = exports.costModelV2ToBuiltinCosts = exports.costModelV1ToBuiltinCosts = void 0;
var uplc_1 = require("@harmoniclabs/uplc");
var costFunctions_1 = require("./costFunctions.js");
var cardano_costmodels_ts_1 = require("@harmoniclabs/cardano-costmodels-ts");
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var assert_1 = require("../../utils/assert.js");
function costModelV1ToBuiltinCosts(costmdls) {
    return costModelV3ToBuiltinCosts((0, cardano_costmodels_ts_1.costModelV1ToFakeV3)(__assign({}, costmdls)));
}
exports.costModelV1ToBuiltinCosts = costModelV1ToBuiltinCosts;
function costModelV2ToBuiltinCosts(costmdls) {
    return costModelV3ToBuiltinCosts((0, cardano_costmodels_ts_1.costModelV2ToFakeV3)(__assign({}, costmdls)));
}
exports.costModelV2ToBuiltinCosts = costModelV2ToBuiltinCosts;
function costModelV3ToBuiltinCosts(costmdls) {
    var costs = __assign({}, (0, cardano_costmodels_ts_1.toCostModelV3)(costmdls));
    (0, assert_1.assert)((0, cardano_costmodels_ts_1.isCostModelsV3)(costs), "invalid cost models passed");
    var cache = {};
    return (function (tag) {
        if ((0, obj_utils_1.hasOwn)(cache, tag))
            return cache[tag];
        function readonly(costs) {
            var result = {};
            (0, obj_utils_1.defineReadOnlyProperty)(result, "mem", costs.mem);
            (0, obj_utils_1.defineReadOnlyProperty)(result, "cpu", costs.cpu);
            // save in cache
            (0, obj_utils_1.defineReadOnlyProperty)(cache, tag, result);
            return result;
        }
        switch (tag) {
            case uplc_1.UPLCBuiltinTag.addInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMax(BigInt(costs["addInteger-cpu-arguments-intercept"]), BigInt(costs["addInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InMax(BigInt(costs["addInteger-memory-arguments-intercept"]), BigInt(costs["addInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.subtractInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMax(BigInt(costs["subtractInteger-cpu-arguments-intercept"]), BigInt(costs["subtractInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InMax(BigInt(costs["subtractInteger-memory-arguments-intercept"]), BigInt(costs["subtractInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.multiplyInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InBothAdd(BigInt(costs["multiplyInteger-cpu-arguments-intercept"]), BigInt(costs["multiplyInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd(BigInt(costs["multiplyInteger-memory-arguments-intercept"]), BigInt(costs["multiplyInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.divideInteger:
                return readonly({
                    cpu: new costFunctions_1.ConstMinOrQuadratic2InXY(BigInt(costs["divideInteger-cpu-arguments-constant"]), BigInt(costs["divideInteger-cpu-arguments-model-arguments-minimum"]), BigInt(costs["divideInteger-cpu-arguments-model-arguments-c00"]), BigInt(costs["divideInteger-cpu-arguments-model-arguments-c01"]), BigInt(costs["divideInteger-cpu-arguments-model-arguments-c02"]), BigInt(costs["divideInteger-cpu-arguments-model-arguments-c10"]), BigInt(costs["divideInteger-cpu-arguments-model-arguments-c11"]), BigInt(costs["divideInteger-cpu-arguments-model-arguments-c20"])),
                    mem: new costFunctions_1.Linear2InBothSub(BigInt(costs["divideInteger-memory-arguments-intercept"]), BigInt(costs["divideInteger-memory-arguments-slope"]), BigInt(costs["divideInteger-memory-arguments-minimum"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.quotientInteger:
                return readonly({
                    cpu: new costFunctions_1.ConstMinOrQuadratic2InXY(BigInt(costs["quotientInteger-cpu-arguments-constant"]), BigInt(costs["quotientInteger-cpu-arguments-model-arguments-minimum"]), BigInt(costs["quotientInteger-cpu-arguments-model-arguments-c00"]), BigInt(costs["quotientInteger-cpu-arguments-model-arguments-c01"]), BigInt(costs["quotientInteger-cpu-arguments-model-arguments-c02"]), BigInt(costs["quotientInteger-cpu-arguments-model-arguments-c10"]), BigInt(costs["quotientInteger-cpu-arguments-model-arguments-c11"]), BigInt(costs["quotientInteger-cpu-arguments-model-arguments-c20"])),
                    mem: new costFunctions_1.Linear2InBothSub(BigInt(costs["quotientInteger-memory-arguments-intercept"]), BigInt(costs["quotientInteger-memory-arguments-slope"]), BigInt(costs["quotientInteger-memory-arguments-minimum"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.remainderInteger:
                return readonly({
                    cpu: new costFunctions_1.ConstMinOrQuadratic2InXY(BigInt(costs["remainderInteger-cpu-arguments-constant"]), BigInt(costs["remainderInteger-cpu-arguments-model-arguments-minimum"]), BigInt(costs["remainderInteger-cpu-arguments-model-arguments-c00"]), BigInt(costs["remainderInteger-cpu-arguments-model-arguments-c01"]), BigInt(costs["remainderInteger-cpu-arguments-model-arguments-c02"]), BigInt(costs["remainderInteger-cpu-arguments-model-arguments-c10"]), BigInt(costs["remainderInteger-cpu-arguments-model-arguments-c11"]), BigInt(costs["remainderInteger-cpu-arguments-model-arguments-c20"])),
                    mem: new costFunctions_1.Linear2InY(BigInt(costs["remainderInteger-memory-arguments-intercept"]), BigInt(costs["remainderInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.modInteger:
                return readonly({
                    cpu: new costFunctions_1.ConstMinOrQuadratic2InXY(BigInt(costs["modInteger-cpu-arguments-constant"]), BigInt(costs["modInteger-cpu-arguments-model-arguments-minimum"]), BigInt(costs["modInteger-cpu-arguments-model-arguments-c00"]), BigInt(costs["modInteger-cpu-arguments-model-arguments-c01"]), BigInt(costs["modInteger-cpu-arguments-model-arguments-c02"]), BigInt(costs["modInteger-cpu-arguments-model-arguments-c10"]), BigInt(costs["modInteger-cpu-arguments-model-arguments-c11"]), BigInt(costs["modInteger-cpu-arguments-model-arguments-c20"])),
                    mem: new costFunctions_1.Linear2InY(BigInt(costs["modInteger-memory-arguments-intercept"]), BigInt(costs["modInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin(BigInt(costs["equalsInteger-cpu-arguments-intercept"]), BigInt(costs["equalsInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["equalsInteger-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin(BigInt(costs["lessThanInteger-cpu-arguments-intercept"]), BigInt(costs["lessThanInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["lessThanInteger-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanEqualInteger:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin(BigInt(costs["lessThanEqualsInteger-cpu-arguments-intercept"]), BigInt(costs["lessThanEqualsInteger-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["lessThanEqualsInteger-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.appendByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InBothAdd(BigInt(costs["appendByteString-cpu-arguments-intercept"]), BigInt(costs["appendByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd(BigInt(costs["appendByteString-memory-arguments-intercept"]), BigInt(costs["appendByteString-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.consByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InY(BigInt(costs["consByteString-cpu-arguments-intercept"]), BigInt(costs["consByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd(BigInt(costs["consByteString-memory-arguments-intercept"]), BigInt(costs["consByteString-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.sliceByteString:
                return readonly({
                    mem: new costFunctions_1.Linear3InZ(BigInt(costs["sliceByteString-memory-arguments-intercept"]), BigInt(costs["sliceByteString-memory-arguments-slope"])),
                    cpu: new costFunctions_1.Linear3InZ(BigInt(costs["sliceByteString-cpu-arguments-intercept"]), BigInt(costs["sliceByteString-cpu-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.lengthOfByteString:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["lengthOfByteString-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["lengthOfByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.indexByteString:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["indexByteString-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["indexByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsByteString:
                return readonly({
                    cpu: new costFunctions_1.LinearOnEqualXY(BigInt(costs["equalsByteString-cpu-arguments-intercept"]), BigInt(costs["equalsByteString-cpu-arguments-slope"]), BigInt(costs["equalsByteString-cpu-arguments-constant"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["equalsByteString-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin(BigInt(costs["lessThanByteString-cpu-arguments-intercept"]), BigInt(costs["lessThanByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["lessThanByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.lessThanEqualsByteString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin(BigInt(costs["lessThanEqualsByteString-cpu-arguments-intercept"]), BigInt(costs["lessThanEqualsByteString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["lessThanEqualsByteString-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.sha2_256:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["sha2_256-cpu-arguments-intercept"]), BigInt(costs["sha2_256-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["sha2_256-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.sha3_256:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["sha3_256-cpu-arguments-intercept"]), BigInt(costs["sha3_256-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["sha3_256-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.blake2b_256:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["blake2b_256-cpu-arguments-intercept"]), BigInt(costs["blake2b_256-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["blake2b_256-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.verifyEd25519Signature:
                return readonly({
                    cpu: new costFunctions_1.Linear3InZ(BigInt(costs["verifyEd25519Signature-cpu-arguments-intercept"]), BigInt(costs["verifyEd25519Signature-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["verifyEd25519Signature-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.appendString:
                return readonly({
                    cpu: new costFunctions_1.Linear2InBothAdd(BigInt(costs["appendString-cpu-arguments-intercept"]), BigInt(costs["appendString-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear2InBothAdd(BigInt(costs["appendString-memory-arguments-intercept"]), BigInt(costs["appendString-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsString:
                return readonly({
                    cpu: new costFunctions_1.LinearOnEqualXY(BigInt(costs["equalsString-cpu-arguments-intercept"]), BigInt(costs["equalsString-cpu-arguments-slope"]), BigInt(costs["equalsString-cpu-arguments-constant"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["equalsString-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.encodeUtf8:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["encodeUtf8-cpu-arguments-intercept"]), BigInt(costs["encodeUtf8-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear1(BigInt(costs["encodeUtf8-memory-arguments-intercept"]), BigInt(costs["encodeUtf8-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.decodeUtf8:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["decodeUtf8-cpu-arguments-intercept"]), BigInt(costs["decodeUtf8-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear1(BigInt(costs["decodeUtf8-memory-arguments-intercept"]), BigInt(costs["decodeUtf8-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.ifThenElse:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["ifThenElse-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["ifThenElse-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.chooseUnit:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["chooseUnit-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["chooseUnit-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.trace:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["trace-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["trace-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.fstPair:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["fstPair-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["fstPair-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.sndPair:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["sndPair-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["sndPair-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.chooseList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["chooseList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["chooseList-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkCons:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["mkCons-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["mkCons-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.headList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["headList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["headList-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.tailList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["tailList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["tailList-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.nullList:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["nullList-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["nullList-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.chooseData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["chooseData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["chooseData-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.constrData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["constrData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["constrData-memory-arguments"])),
                });
                break;
            case uplc_1.UPLCBuiltinTag.mapData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["mapData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["mapData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.listData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["listData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["listData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.iData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["iData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["iData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unConstrData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["unConstrData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["unConstrData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unMapData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["unMapData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["unMapData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unListData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["unListData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["unListData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unIData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["unIData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["unIData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.unBData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["unBData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["unBData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.equalsData:
                return readonly({
                    cpu: new costFunctions_1.Linear2InMin(BigInt(costs["equalsData-cpu-arguments-intercept"]), BigInt(costs["equalsData-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["equalsData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkPairData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["mkPairData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["mkPairData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkNilData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["mkNilData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["mkNilData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.mkNilPairData:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["mkNilPairData-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["mkNilPairData-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.serialiseData:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["serialiseData-cpu-arguments-intercept"]), BigInt(costs["serialiseData-cpu-arguments-slope"])),
                    mem: new costFunctions_1.Linear1(BigInt(costs["serialiseData-memory-arguments-intercept"]), BigInt(costs["serialiseData-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.verifyEcdsaSecp256k1Signature:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["verifyEcdsaSecp256k1Signature-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["verifyEcdsaSecp256k1Signature-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.verifySchnorrSecp256k1Signature:
                return readonly({
                    cpu: new costFunctions_1.Linear3InY(BigInt(costs["verifySchnorrSecp256k1Signature-cpu-arguments-intercept"]), BigInt(costs["verifySchnorrSecp256k1Signature-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["verifySchnorrSecp256k1Signature-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G1_add:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_add-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_add-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G1_neg:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_neg-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_neg-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G1_scalarMul:
                return readonly({
                    cpu: new costFunctions_1.Linear2InX(BigInt(costs["bls12_381_G1_scalarMul-cpu-arguments-intercept"]), BigInt(costs["bls12_381_G1_scalarMul-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_scalarMul-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G1_equal:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_equal-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_equal-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G1_hashToGroup:
                return readonly({
                    cpu: new costFunctions_1.Linear2InX(BigInt(costs["bls12_381_G1_hashToGroup-cpu-arguments-intercept"]), BigInt(costs["bls12_381_G1_hashToGroup-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_hashToGroup-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G1_compress:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_compress-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_compress-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G1_uncompress:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_uncompress-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G1_uncompress-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G2_add:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_add-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_add-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G2_neg:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_neg-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_neg-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G2_scalarMul:
                return readonly({
                    cpu: new costFunctions_1.Linear2InX(BigInt(costs["bls12_381_G2_scalarMul-cpu-arguments-intercept"]), BigInt(costs["bls12_381_G2_scalarMul-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_scalarMul-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G2_equal:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_equal-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_equal-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G2_hashToGroup:
                return readonly({
                    cpu: new costFunctions_1.Linear2InX(BigInt(costs["bls12_381_G2_hashToGroup-cpu-arguments-intercept"]), BigInt(costs["bls12_381_G2_hashToGroup-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_hashToGroup-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G2_compress:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_compress-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_compress-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_G2_uncompress:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_uncompress-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_G2_uncompress-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_millerLoop:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_millerLoop-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_millerLoop-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_mulMlResult:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_mulMlResult-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_mulMlResult-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.bls12_381_finalVerify:
                return readonly({
                    cpu: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_finalVerify-cpu-arguments"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["bls12_381_finalVerify-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.keccak_256:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["keccak_256-cpu-arguments-intercept"]), BigInt(costs["keccak_256-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["keccak_256-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.blake2b_224:
                return readonly({
                    cpu: new costFunctions_1.Linear1(BigInt(costs["blake2b_224-cpu-arguments-intercept"]), BigInt(costs["blake2b_224-cpu-arguments-slope"])),
                    mem: new costFunctions_1.FixedCost(BigInt(costs["blake2b_224-memory-arguments"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.integerToByteString:
                return readonly({
                    cpu: new costFunctions_1.Quadratic3InZ(BigInt(costs["integerToByteString-cpu-arguments-c0"]), BigInt(costs["integerToByteString-cpu-arguments-c1"]), BigInt(costs["integerToByteString-cpu-arguments-c2"])),
                    mem: new costFunctions_1.ConstYOrLinearZ(BigInt(costs["integerToByteString-memory-arguments-intercept"]), BigInt(costs["integerToByteString-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.byteStringToInteger:
                return readonly({
                    cpu: new costFunctions_1.Quadratic2InY(BigInt(costs["byteStringToInteger-cpu-arguments-c0"]), BigInt(costs["byteStringToInteger-cpu-arguments-c1"]), BigInt(costs["byteStringToInteger-cpu-arguments-c2"])),
                    mem: new costFunctions_1.Linear2InY(BigInt(costs["byteStringToInteger-memory-arguments-intercept"]), BigInt(costs["byteStringToInteger-memory-arguments-slope"]))
                });
                break;
            case uplc_1.UPLCBuiltinTag.andByteString:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear3InYAndZ(BigInt(costs["andByteString-cpu-arguments-intercept"]), BigInt(costs["andByteString-cpu-arguments-slope1"]), BigInt(costs["andByteString-cpu-arguments-slope2"])),
                        mem: new costFunctions_1.Linear3InMaxYZ(BigInt(costs["andByteString-memory-arguments-intercept"]), BigInt(costs["andByteString-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.orByteString:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear3InYAndZ(BigInt(costs["orByteString-cpu-arguments-intercept"]), BigInt(costs["orByteString-cpu-arguments-slope1"]), BigInt(costs["orByteString-cpu-arguments-slope2"])),
                        mem: new costFunctions_1.Linear3InMaxYZ(BigInt(costs["orByteString-memory-arguments-intercept"]), BigInt(costs["orByteString-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.xorByteString:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear3InYAndZ(BigInt(costs["xorByteString-cpu-arguments-intercept"]), BigInt(costs["xorByteString-cpu-arguments-slope1"]), BigInt(costs["xorByteString-cpu-arguments-slope2"])),
                        mem: new costFunctions_1.Linear3InMaxYZ(BigInt(costs["xorByteString-memory-arguments-intercept"]), BigInt(costs["xorByteString-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.complementByteString:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear1(BigInt(costs["complementByteString-cpu-arguments-intercept"]), BigInt(costs["complementByteString-cpu-arguments-slope"])),
                        mem: new costFunctions_1.Linear1(BigInt(costs["complementByteString-memory-arguments-intercept"]), BigInt(costs["complementByteString-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.readBit:
                {
                    return readonly({
                        cpu: new costFunctions_1.FixedCost(BigInt(costs["readBit-cpu-arguments"])),
                        mem: new costFunctions_1.FixedCost(BigInt(costs["readBit-memory-arguments"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.writeBits:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear3InY(BigInt(costs["writeBits-cpu-arguments-intercept"]), BigInt(costs["writeBits-cpu-arguments-slope"])),
                        mem: new costFunctions_1.Linear3InX(BigInt(costs["writeBits-memory-arguments-intercept"]), BigInt(costs["writeBits-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.replicateByte:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear2InX(BigInt(costs["replicateByte-cpu-arguments-intercept"]), BigInt(costs["replicateByte-cpu-arguments-slope"])),
                        mem: new costFunctions_1.Linear2InX(BigInt(costs["replicateByte-memory-arguments-intercept"]), BigInt(costs["replicateByte-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.shiftByteString:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear2InX(BigInt(costs["shiftByteString-cpu-arguments-intercept"]), BigInt(costs["shiftByteString-cpu-arguments-slope"])),
                        mem: new costFunctions_1.Linear2InX(BigInt(costs["shiftByteString-memory-arguments-intercept"]), BigInt(costs["shiftByteString-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.rotateByteString:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear2InX(BigInt(costs["rotateByteString-cpu-arguments-intercept"]), BigInt(costs["rotateByteString-cpu-arguments-slope"])),
                        mem: new costFunctions_1.Linear2InX(BigInt(costs["rotateByteString-memory-arguments-intercept"]), BigInt(costs["rotateByteString-memory-arguments-slope"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.countSetBits:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear1(BigInt(costs["countSetBits-cpu-arguments-intercept"]), BigInt(costs["countSetBits-cpu-arguments-slope"])),
                        mem: new costFunctions_1.FixedCost(BigInt(costs["countSetBits-memory-arguments"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.findFirstSetBit:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear1(BigInt(costs["findFirstSetBit-cpu-arguments-intercept"]), BigInt(costs["findFirstSetBit-cpu-arguments-slope"])),
                        mem: new costFunctions_1.FixedCost(BigInt(costs["findFirstSetBit-memory-arguments"])),
                    });
                }
                break;
            case uplc_1.UPLCBuiltinTag.ripemd_160:
                {
                    return readonly({
                        cpu: new costFunctions_1.Linear1(BigInt(costs["ripemd_160-cpu-arguments-intercept"]), BigInt(costs["ripemd_160-cpu-arguments-slope"])),
                        mem: new costFunctions_1.FixedCost(BigInt(costs["ripemd_160-memory-arguments"])),
                    });
                }
                break;
            default:
                // tag; // check it is type "never"
                throw new Error("unmatched builtin cost");
        }
        throw new Error("unmatched builtin cost");
    });
}
exports.costModelV3ToBuiltinCosts = costModelV3ToBuiltinCosts;
